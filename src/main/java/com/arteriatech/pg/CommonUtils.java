package com.arteriatech.pg;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.TimeZone;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.nio.charset.StandardCharsets;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.net.ssl.HttpsURLConnection;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import com.google.gson.JsonSyntaxException;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CookieStore;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.arteriatech.bc.Account.AccountClient;
import com.arteriatech.bc.AccountBalance.AccountBalanceClient;
import com.arteriatech.bc.PaymentTransactionPost.PaymentTransactionClient;
import com.arteriatech.bc.SCFAccount.SCFAccountClient;
import com.arteriatech.bc.SCFApply.SCFApplyClient;
import com.arteriatech.bc.SCFOffer.SCFOfferClient;
import com.arteriatech.bc.UserRegistration.UserRegistrationClient;
import com.arteriatech.bc.eSignContractCALPartnership.PartnershipESignClient;
import com.arteriatech.bc.eSignContractCALProprietorship.ProprietorESignClient;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.sap.cloud.account.TenantContext;
import com.sap.core.connectivity.api.authentication.AuthenticationHeader;
import com.sap.core.connectivity.api.authentication.AuthenticationHeaderProvider;
import com.sap.core.connectivity.api.configuration.ConnectivityConfiguration;
import com.sap.core.connectivity.api.configuration.DestinationConfiguration;
import com.sap.security.um.user.User;
import com.sap.security.um.user.UserProvider;
import com.sap.cloud.sdk.cloudplatform.security.AuthTokenAccessor;
import com.sap.cloud.sdk.cloudplatform.security.principal.PrincipalAccessor;
import com.sap.cloud.sdk.cloudplatform.security.principal.Principal;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestination;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.*;
import org.apache.http.client.HttpClient;
import java.util.List;

import io.vavr.control.Try;
import com.arteriatech.support.DestinationUtils;
import com.arteriatech.logs.ODataLogs;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.util.concurrent.atomic.AtomicInteger;
import javax.net.ssl.HttpsURLConnection;

import com.sap.xsa.security.container.XSUserInfo;
import com.sap.xsa.security.container.XSUserInfoException;
import com.sap.cloud.security.token.SecurityContext;
import com.sap.cloud.security.token.Token;
import com.sap.cloud.security.token.AccessToken;
import com.sap.cloud.security.token.TokenClaims;
import com.sap.cloud.sdk.cloudplatform.tenant.TenantAccessor;
import com.sap.cloud.sdk.cloudplatform.tenant.Tenant;

public class CommonUtils {
	
	private static final String PUGW_DEST_NAME =  "pugw_utils_op";
	private static final String PCGW_UTIL_DEST_NAME =  "pcgw_utils_op"; 
	private static final String SCFLIMIT_DEST_NAME =  "SCFLimit";
	private static final String CPI_CONNECT_DEST_NAME =  "CPIConnect";
	private static final String ARTERIA_CPIDEST =  "ARTECCPI"; 
	private static final int HASH_BYTE_SIZE = 256;
	private static final int PBKDF2_ITERATIONS = 65556;
	
	CookieStore cookieStore = null;
	
	protected Map<String, String> readConfigValues(String pgName, String environment)
	{
		Map<String,String> pgConfigValues = new HashMap<String,String>();
		
		if(environment.equalsIgnoreCase("T"))
		{
			pgConfigValues.put("pgUrl","https://eazypayuat.icicibank.com/EazyPG");
			pgConfigValues.put("statusPgUrl","https://eazypayuat.icicibank.com/EazyPGVerify");
			pgConfigValues.put("merchantCode","115806");
			pgConfigValues.put("secretKey","1111140158001518");
		}
		else if(environment.equalsIgnoreCase("P"))
		{
			pgConfigValues.put("pgUrl","https://eazypay.icicibank.com/EazyPG");
			pgConfigValues.put("merchantCode","225806");
			pgConfigValues.put("secretKey","2211140158001518");
			pgConfigValues.put("statusPgUrl","https://eazypay.icicibank.com/EazyPGVerify");
		}
		return pgConfigValues;
	}
	
	public String getODataDestinationProperties(String propertyName, String destinationName){
		
		String propertyValue = "";
//		String destinationName = destinationConstant;
		Map<String, String> allDestinationPropeties = null;
		try{
			/* Try<Tenant> currentTenant = TenantAccessor.tryGetCurrentTenant();
			Try<Principal> currentPrincipal = PrincipalAccessor.tryGetCurrentPrincipal();
			System.out.println("currentTenant: "+currentTenant);
			System.out.println("currentPrincipal: "+currentPrincipal); */

			//Context ctxDestFact = new InitialContext();
			//ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxDestFact.lookup("java:comp/env/connectivityConfiguration");
			//DestinationConfiguration destConfiguration = configuration.getConfiguration(destinationName);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destinationName, options);
			Destination destConfiguration = destinationAccessor.get();

			if(destConfiguration != null){
				if(propertyName.equalsIgnoreCase("URL")){
					propertyValue = destConfiguration.get("URL").get().toString();
				}else if(propertyName.equalsIgnoreCase("clientId")){
					propertyValue = destConfiguration.get("clientId").get().toString();
				}else if(propertyName.equalsIgnoreCase("AggregatorID")){
					propertyValue = destConfiguration.get("AggregatorID").get().toString();
				}else if(propertyName.equalsIgnoreCase("clientSecret")){
					propertyValue = destConfiguration.get("clientSecret").get().toString();
				}else if(propertyName.equalsIgnoreCase("tokenServiceURL")){
					propertyValue = destConfiguration.get("tokenServiceURL").get().toString();
				}else if(propertyName.equalsIgnoreCase("Authentication")){
					propertyValue = destConfiguration.get("Authentication").get().toString();
				}else if(propertyName.equalsIgnoreCase("authTokens")){
					propertyValue = destConfiguration.get("authTokens").get().toString();
				}else if(propertyName.equalsIgnoreCase("PortalURL")){
					propertyValue = destConfiguration.get("PortalURL").get().toString();
				}else if(propertyName.equalsIgnoreCase("User")){
					propertyValue = destConfiguration.get("User").get().toString();
				}else if(propertyName.equalsIgnoreCase("Password")){
					propertyValue = destConfiguration.get("Password").get().toString();
				}else if(propertyName.equalsIgnoreCase("System")){
					propertyValue = destConfiguration.get("System").get().toString();
				}else if(propertyName.equalsIgnoreCase("emailid")){
					propertyValue = destConfiguration.get("emailid").get().toString();
				}else if(propertyName.equalsIgnoreCase("emailpass")){
					propertyValue = destConfiguration.get("emailpass").get().toString();
				}else if(propertyName.equalsIgnoreCase("ConnectionMode")){
					propertyValue = destConfiguration.get("ConnectionMode").get().toString();
				}else if(propertyName.equalsIgnoreCase("SupportEmail")){
					propertyValue = destConfiguration.get("SupportEmail").get().toString();
				}else if(propertyName.equalsIgnoreCase("LenderCode")){
					propertyValue = destConfiguration.get("LenderCode").get().toString();
				}
				
				if(propertyName.equalsIgnoreCase("AggregatorID")){
					if(propertyValue == null || propertyValue.trim().equalsIgnoreCase("")){
						propertyValue = "E112";
					}
				}
			}else{
				propertyValue = "E106";
			}
		}catch (Exception e) {
			propertyValue = "E173 -"+e.getLocalizedMessage();
		}
		return propertyValue;
	}
	
	public String readDestProperties(String reqProperty)
	{
		String destinationProperties = "";
		
//		Map<String, String> allDestinationPropeties = null;
		String name = SCFLIMIT_DEST_NAME;
		try {
//			Context ctxDestFact = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxDestFact.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(name);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(SCFLIMIT_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			
			if(destConfiguration != null){
//				allDestinationPropeties = destConfiguration.getAllProperties();
				

				if(reqProperty.equalsIgnoreCase("URL")){
					destinationProperties = destConfiguration.get("URL").get().toString();
					
				}else if(reqProperty.equalsIgnoreCase("CorpID")){
					if(null != destConfiguration.get("CorpID").get().toString() && destConfiguration.get("CorpID").get().toString().trim().length() > 0){
						destinationProperties = destConfiguration.get("CorpID").get().toString();			
					}else{
						destinationProperties = "E152";
					}
				}else if(reqProperty.equalsIgnoreCase("System")){
					if(null != destConfiguration.get("System") && destConfiguration.get("System").get().toString().trim().length() > 0){
						destinationProperties = destConfiguration.get("System").get().toString();
					}else{
						destinationProperties = "E153";				
					}
				}
				else if(reqProperty.equalsIgnoreCase("AggrID")){
					if(null != destConfiguration.get("AggrID") && destConfiguration.get("AggrID").get().toString().trim().length() > 0){
						destinationProperties = destConfiguration.get("AggrID").get().toString();		
					}else{
						destinationProperties = "E112";
					}
				}else if(reqProperty.equalsIgnoreCase("VendorCorpID")){
					if(null != destConfiguration.get("VENCorpID").get().toString() && destConfiguration.get("VENCorpID").get().toString().trim().length() > 0){
						destinationProperties = destConfiguration.get("VENCorpID").get().toString();
					}else{
						destinationProperties = "E112";
					}
				}
			}else{
				destinationProperties = "E106";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return destinationProperties;
	}
	
	public String getIPAddress(HttpServletRequest request)
	{
		
		String ip = request.getHeader("X-Forwarded-For");  
		
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("Proxy-Client-IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("WL-Proxy-Client-IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_CLIENT_IP");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getHeader("HTTP_X_FORWARDED_FOR");  
        }  
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {  
            ip = request.getRemoteAddr();  
        }  
		
		return ip;
	}
	
	public String hasUserAlreadyAgreed(HttpServletRequest request, HttpServletResponse response, String customerNo, String merchantCode)
	{
		String errorCode = "";
		
		return errorCode;
	}
	
	public String validateInboundReq(HttpServletRequest request, HttpServletResponse response, JSONObject jsonObj, boolean debug)
	{
		String errorCode = "";
		double acceptAmount=0.00;
		boolean acceptedAmtNumeric = true;
		
		try
		{
			if(null == jsonObj.getString("CustomerNo") || jsonObj.getString("CustomerNo").trim().length() == 0)
			{
				errorCode = "E100";
			}
			else 
			{
				errorCode = validateCustomer(request, response, jsonObj.getString("sessionID"), jsonObj.getString("CustomerNo"), debug);
			}
			
			/*if(errorCode == null || errorCode.trim().length() == 0)
			{
				if(null == jsonObj.getString("Status") || jsonObj.getString("Status").trim().length() == 0)
				{
					errorCode = "E101";
				}
				else if(jsonObj.getString("Status") != "01" && jsonObj.getString("Status") != "02" && jsonObj.getString("Status") != "03")
				{
					errorCode = "E110";
				}
			}*/
			
			if(errorCode == null || errorCode.trim().length() == 0)
			{
				if(jsonObj.getString("Status").equalsIgnoreCase("000003"))
				{
					if(jsonObj.getString("AcceptedLimit") == null || jsonObj.getString("AcceptedLimit").trim().length() == 0)
					{
						errorCode = "E102";
					}
					else
					{
						try{
							acceptAmount = Double.parseDouble(jsonObj.getString("AcceptedLimit"));
						}catch (NumberFormatException e) {
							acceptedAmtNumeric = false;
						}
						
						if(! acceptedAmtNumeric)
						{
							errorCode = "E109";
						}
						else
						{
							if(acceptAmount < 0.00)
							{
								errorCode = "E109";
							}
						}
					}
					
					if(jsonObj.getString("IPAddress") == null || jsonObj.getString("IPAddress").trim().length() == 0)
					{
						errorCode = "E119";
					}else if(jsonObj.getString("DealerName") == null || jsonObj.getString("DealerName").trim().length() == 0)
					{
						errorCode = "E120";
					}/*else if(jsonObj.getString("CAAccount") == null || jsonObj.getString("CAAccount").trim().length() == 0)
					{
						errorCode = "E121";
					}*/else if(jsonObj.getString("ODAccount") == null || jsonObj.getString("ODAccount").trim().length() == 0)
					{
						errorCode = "E122";
					}else if(jsonObj.getString("SanctionLimit") == null || jsonObj.getString("SanctionLimit").trim().length() == 0)
					{
						errorCode = "E123";
					}else if(jsonObj.getString("DealerPAN") == null || jsonObj.getString("DealerPAN").trim().length() == 0)
					{
						errorCode = "E124";
					}else if(jsonObj.getString("ConstitutionType") == null || jsonObj.getString("ConstitutionType").trim().length() == 0)
					{
						errorCode = "E124";
					}
					else if(jsonObj.getString("ProposedLimit") == null || jsonObj.getString("ProposedLimit").trim().length() == 0)
					{
						errorCode = "E132";
					}
					else if(jsonObj.getString("PartnerNames") == null || jsonObj.getString("PartnerNames").trim().length() == 0)
					{
						errorCode = "E133";
					}
					/*else if(jsonObj.getString("DealerAddress1") == null || jsonObj.getString("DealerAddress1").trim().length() == 0)
					{
						errorCode = "E134";
					}
					else if(jsonObj.getString("DealerAddress2") == null || jsonObj.getString("DealerAddress1").trim().length() == 0)
					{
						errorCode = "E134";
					}
					else if(jsonObj.getString("DealerAddress3") == null || jsonObj.getString("DealerAddress3").trim().length() == 0)
					{
						errorCode = "E134";
					}*/
				}
				else if(! jsonObj.getString("Status").equalsIgnoreCase("000003"))
				{
					if(jsonObj.getString("CustomerNo") == null || jsonObj.getString("CustomerNo").trim().length() == 0)
					{
						errorCode = "E100";
					}
					else if(jsonObj.getString("IPAddress") == null || jsonObj.getString("IPAddress").trim().length() == 0)
					{
						errorCode = "E119";
					}
				}
			}
			
			if(errorCode == null || errorCode.trim().length() == 0)
			{
				
			}
		} catch (JSONException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		
		return errorCode;
	}

	
	
	public String validateCustomer(HttpServletRequest request, HttpServletResponse response, String loginSessionID, String customerNo, boolean debug) throws IOException, URISyntaxException
	{
		String destURL="", errorCode="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth=""; 
		boolean isValidCustomer = false;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		try{
			customerFilter = "LoginID eq '"+loginSessionID+"' and CustomerNo eq '"+customerNo+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			if (debug){
				response.getWriter().println("customerFilter: "+customerFilter);
				response.getWriter().println("customerNo: "+customerNo);
				response.getWriter().println("loginSessionID: "+loginSessionID);
			}
			
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			HttpDestination destConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(destConfiguration);
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				//basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			/* String service = null;
			if(destConfiguration.get("service")!=null && !destConfiguration.get("service").isEmpty()){
				service=destConfiguration.get("service").get().toString();
			} */
			
			
			if(sapclient != null)
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
			}
			else
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
			}

			/* if(null != service && service.equalsIgnoreCase("SFGW")){
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
				}
			}else{ */
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?$filter="+ customerFilter;
				}
			// }
			if (debug){
				response.getWriter().println("CustomerService: "+customerService);
				response.getWriter().println("destURL: "+destURL);
			}
			
	        userCustomersGet = new HttpGet(customerService);
	        userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        userCustomersGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader("Authorization", "Bearer "+ authParam);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        HttpResponse httpResponse = client.execute(userCustomersGet);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("validateCustomer.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		        
				String retSrc = EntityUtils.toString(customerEntity);
				
				if (debug)
					response.getWriter().println("retSrc: "+retSrc);
//				if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
//					response.getWriter().println("retSrc: "+retSrc);
				docBuilder = docBuilderFactory.newDocumentBuilder();
				inputSource = new InputSource(new StringReader(retSrc));
	            Document document = docBuilder.parse(inputSource);
	            NodeList nodeList = document.getElementsByTagName("d:CustomerNo");
	            for(int i=0 ; i<nodeList.getLength() ; i++)
	            {
	            	if (debug)
	            		response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
//	            	response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
	            	if(customerNo.equalsIgnoreCase(nodeList.item(i).getTextContent()))
        			{
	            		isValidCustomer = true;
	            		break;
        			}
	            }
	            if(! isValidCustomer)
	            {
	            	errorCode = "E105";
	            }
			}
		}catch (RuntimeException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("RuntimeException in validateCustomer: "+e.getMessage());
		}catch (ParserConfigurationException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("ParserConfigurationException in validateCustomer: "+e.getMessage());
		} catch (SAXException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("SAXException in validateCustomer: "+e.getMessage());
		}
		/* finally
		{
			//closableHttpClient.close();
		} */
		return errorCode;
	}
	
	public String validateVendor(HttpServletRequest request, HttpServletResponse response, String loginSessionID, String vendorNo, boolean debug) throws IOException, URISyntaxException
	{
		String destURL="", errorCode="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth=""; 
		boolean isValidCustomer = false;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		try{
			customerFilter = "LoginID eq '"+loginSessionID+"' and VendorNo eq '"+vendorNo+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			if (debug){
				response.getWriter().println("vendorFilter: "+customerFilter);
				response.getWriter().println("vendorNo: "+vendorNo);
				response.getWriter().println("loginSessionID: "+loginSessionID);
			}
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(PCGW_UTIL_DEST_NAME);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			// String service = destConfiguration.get("service").get().toString();
			
			if(sapclient != null)
			{
//					CustomerService = destination.getURI().getPath()+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ CustomerFilter;
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
			}
			else
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
			}
			/*if(null != service && service.equalsIgnoreCase("SFGW")){
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
				}
			}else{*/
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/Vendors?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/Vendors?$filter="+ customerFilter;
				}
//			}
			if (debug){
				response.getWriter().println("VendorsService: "+customerService);
				response.getWriter().println("destURL: "+destURL);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("validateVendor.proxyType: "+proxyType);
			    response.getWriter().println("validateVendor.proxyHost: "+proxyHost);
			    response.getWriter().println("validateVendor.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        userCustomersGet = new HttpGet(customerService);
	        // userCustomersGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        userCustomersGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(userCustomersGet);
			HttpResponse httpResponse = client.execute(userCustomersGet);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("validateVendor.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		        
				String retSrc = EntityUtils.toString(customerEntity);
				
				if (debug)
					response.getWriter().println("retSrc: "+retSrc);
//				if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
//					response.getWriter().println("retSrc: "+retSrc);
				docBuilder = docBuilderFactory.newDocumentBuilder();
				inputSource = new InputSource(new StringReader(retSrc));
	            Document document = docBuilder.parse(inputSource);
	            NodeList nodeList = document.getElementsByTagName("d:VendorNo");
	            for(int i=0 ; i<nodeList.getLength() ; i++)
	            {
	            	if (debug)
	            		response.getWriter().println("nodeList VendorNo: "+nodeList.item(i).getTextContent());
//	            	response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
	            	if(vendorNo.equalsIgnoreCase(nodeList.item(i).getTextContent()))
        			{
	            		isValidCustomer = true;
	            		break;
        			}
	            }
	            if(! isValidCustomer)
	            {
	            	errorCode = "E105";
	            }
			}
		}catch (RuntimeException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("RuntimeException in validateCustomer: "+e.getMessage());
		}catch (ParserConfigurationException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("ParserConfigurationException in validateCustomer: "+e.getMessage());
		} catch (SAXException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("SAXException in validateCustomer: "+e.getMessage());
		} /* catch (NamingException e) {
			errorCode = "E105";
			if(debug)
				response.getWriter().println("NamingException in validateCustomer: "+e.getMessage());
		} */
		/* finally
		{
			// closableHttpClient.close();
		} */
		return errorCode;
	}
	
	public String getLoginID(HttpServletRequest request, HttpServletResponse response, boolean debug) throws IOException{
		String loginID = null;
		String reqPropertyValue = "", authTokenHeader="", authMtd="", authValue="";
		String jwtSplit[] = null;
		JsonObject jwtBody = new JsonObject();
		System.out.println("Inside getUserPrincipal");

		System.out.println( "inside getUserPrincipal for getCurrentToken:" +AuthTokenAccessor.getCurrentToken().getJwt());
		// System.out.println( "inside getUserPrincipal for getXsuaaServiceToken:" +AuthTokenAccessor.getXsuaaServiceToken().getJwt());
		System.out.println("inside getUserPrincipal for getCurrentPrincipal:"+PrincipalAccessor.getCurrentPrincipal());
		try 
		{
			authTokenHeader = getAuthorization(request);
			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true")){
				debug = true;
				response.getWriter().println("getUserPrincipal.authTokenHeader: "+authTokenHeader);
			}

			jwtSplit = authTokenHeader.split("\\s+");
			
			if(jwtSplit.length == 2){
				authMtd = jwtSplit[0];
				authValue = jwtSplit[1];
			}

			jwtBody = decodeJWTBody(request, response, authValue, debug);
			if(debug)
				response.getWriter().println("getUserPrincipal.jwtBody: "+jwtBody);

			loginID = PrincipalAccessor.getCurrentPrincipal().getPrincipalId();
		}catch (Exception e) { 
			if(debug)
				response.getWriter().println("getLoginID.Exception: "+e.getMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getLoginID-Exception Stack Trace: "+buffer.toString());
			}
			
			loginID="";
		}
		return loginID;
	}
	
	public String getAnonymousDestProperties(HttpServletRequest request, HttpServletResponse response, String destName, String paramName) throws IOException{
		//get the destination name from the request
//		String destinationName = "";
//		LOGGER.info("4. destination name from request: "+destinationName);	
		//check destination null condition
//		destinationName = PUGW_DEST_NAME;
		String returnValue = null;
		try {
			// look up the connectivity configuration API "connectivityConfiguration"
//			Context ctxConnConfgn = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxConnConfgn.lookup("java:comp/env/connectivityConfiguration");
			// get destination configuration for "myDestinationName"
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(destName);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destName, options);
			Destination destConfiguration = destinationAccessor.get();
//			LOGGER.info("5. destination configuration object created");	
			// Get the destination URL
			if(destConfiguration != null)
			{
				if(paramName.equalsIgnoreCase("URL")){
					returnValue = destConfiguration.get("URL").get().toString();	
				}else if(paramName.equalsIgnoreCase("Authentication")){
					returnValue = destConfiguration.get("Authentication").get().toString();
				}else if(paramName.equalsIgnoreCase("User")){
					returnValue = destConfiguration.get("User").get().toString();
				}else if(paramName.equalsIgnoreCase("Password")){
					returnValue = destConfiguration.get("Password").get().toString();
				}
			}
		} catch (Exception e) {
			// Lookup of destination failed
			String errorMessage = "Lookup of destination failed with reason: "
					+ e.getMessage()
					+ ". See "
					+ "logs for details. Hint: Make sure to have the destination "
					+ destName + " configured.";
//			LOGGER.error("Lookup of destination failed", e);
			//response.getWriter().println(" " +  errorMessage);
		} 
		return returnValue;
	}
	
	public String getDestinationURL(HttpServletRequest request, HttpServletResponse response, String paramName) throws IOException{
		//get the destination name from the request
		String destinationName = "";
//		LOGGER.info("4. destination name from request: "+destinationName);	
		//check destination null condition
		destinationName = PUGW_DEST_NAME;
		String url = null;
		try {
			// Try<Tenant> currentTenant = TenantAccessor.tryGetCurrentTenant();
			// look up the connectivity configuration API "connectivityConfiguration"
//			Context ctxConnConfgn = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxConnConfgn.lookup("java:comp/env/connectivityConfiguration");
			// get destination configuration for "myDestinationName"
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(destinationName);
			// Try<Tenant> currentTenant = TenantAccessor.tryGetCurrentTenant();
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destinationName, options);
			Destination destConfiguration = destinationAccessor.get();
//			LOGGER.info("5. destination configuration object created");	
			// Get the destination URL
			if(destConfiguration != null)
			{
				if(paramName.equalsIgnoreCase("URL")){
					url = destConfiguration.get("URL").get().toString();	
				}else if(paramName.equalsIgnoreCase("Authentication")){
					url = destConfiguration.get("Authentication").get().toString();
				}
			}
		} catch (Exception e) {
			// Lookup of destination failed
			String errorMessage = "Lookup of destination failed with reason: "
					+ e.getMessage()
					+ ". See "
					+ "logs for details. Hint: Make sure to have the destination "
					+ destinationName + " configured.";
//			LOGGER.error("Lookup of destination failed", e);
			//response.getWriter().println(" " +  errorMessage);
		} 
		return url;
	}
	
	public String createUserSession(HttpServletRequest request, HttpServletResponse response, String url, String loginID, boolean debug) throws IOException{
		String sessionID="";
		String soapXMLMsg, stringEntityMsg="", destinationMsg="", entityMsg="", setGWResponseMsg="";
		String soapXML = getSoapXML(request, loginID);
		soapXMLMsg = "soapXMLMsg"+soapXML;
		CommonUtils commonUtils = new CommonUtils();

		// CloseableHttpClient closableHttpClient = null;

		String destinationName = request.getParameter("destname");

		if (destinationName == null) {
			destinationName = PUGW_DEST_NAME;
		}
		if(debug){
			response.getWriter().println("createUserSession.destinationName: "+destinationName);
			response.getWriter().println("soapXML: "+soapXML);
		}

		try{
			StringEntity stringEntity = new StringEntity(soapXML, "UTF-8");
			stringEntityMsg = "stringEntityMsg"+stringEntity;
			stringEntity.setChunked(true);
        
            // response.getWriter().println("/n"+"stringEntity="+stringEntity);
            // response.getWriter().println("/n"+"url="+url);

            HttpEntity entity = executeHttpPost(stringEntity, url, response, debug);
            entityMsg = "entityMsg"+entity;
            // response.getWriter().println("entityMsg="+entityMsg);
            // response.getWriter().println("resStr="+EntityUtils.toString(entity));
            
			sessionID = commonUtils.setGWHttpResponse(entity, response, debug);
			// entity.consumeContent();
		}catch(Exception e){
			response.getWriter().println("Error at user session create: " +  e.getMessage());
		}
		return sessionID;
	}
	/* public String createUserSession(HttpServletRequest request, HttpServletResponse response, String url, String loginID, boolean debug) 
			throws IOException{
		String sessionID="";
		CommonUtils commonUtils = new CommonUtils();
		String soapXML = "";
		try{
			soapXML = commonUtils.getSoapXML(request, loginID);
			
			if(debug)
				response.getWriter().println("soapXML: "+soapXML);
			//Creates a StringEntity with the specified content and charset. The MIME type to UTF-8.
			if(debug){
				JsonObject result = new JsonObject();
				result.addProperty("Request", soapXML);
				response.getWriter().println(new Gson().toJson(result));
			}
			
			StringEntity stringEntity = new StringEntity(soapXML, "UTF-8");
			stringEntity.setChunked(true);
			//get http destination
			//Execute http post and get entity object
			HttpEntity entity = executeHttpPost2(stringEntity, url, response, debug);
//			entityMsg = "entityMsg"+entity;
//			response.getWriter().println("entityMsg: "+entityMsg);
			//set httppost response to the servlet response
			sessionID = commonUtils.setGWHttpResponse(entity, response, debug);
			entity.consumeContent();
			if(debug)
				response.getWriter().println("sessionID: "+sessionID);
		}catch(Exception e){
			
			response.getWriter().println("Error at user session create: " +  e.getMessage());
			
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("createUserSession.Exception:"+buffer.toString());
			}
		}
		return sessionID;
	} */
	
	public String getSoapXML(HttpServletRequest request, String loginID){
		//Get request parameters
		String app = "PD", methodType = "create", fmName = "", isTestRun = "", objectName = "UserCustomers_";
		Random random=new Random();
		int num = random.nextInt(90) + 10;
		objectName = objectName+num;
		//create soap xml
		String soapXML =  "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:sap-com:document:sap:soap:functions:mc-style\">" 
				+ "<soapenv:Header/>"
				+ "<soapenv:Body>"
				+ "<urn:USRSSNCREATE>"
				+ "<Application>"+app+"</Application>"
				+ "<IsTestRun>"+isTestRun+"</IsTestRun>"
				+ "<LoginID>"+loginID+"</LoginID>"
				+ "<UsrSsnCrtDtl>"
				+ "<Object>"+objectName+"</Object>"
				+ "<Method>"+methodType+"</Method>"
				+ "<FmName>"+fmName+"</FmName>"
				+ "</UsrSsnCrtDtl>"
				+ "</urn:USRSSNCREATE>"
				+ "</soapenv:Body>"
				+ "</soapenv:Envelope>";
		return soapXML;
	}

	public HttpEntity executeHttpPost(StringEntity stringEntity, String destUrl, HttpServletResponse response, boolean debug) throws IOException{
		HttpEntity entity = null;
		try{
			String destinationName = PUGW_DEST_NAME;
			//check destination null condition
			if (destinationName == null) {
				destinationName = PUGW_DEST_NAME;
			}

			if(debug)
				response.getWriter().println("Inside executeHttpPost");

			DestinationOptions options = DestinationOptions
					.builder()
					.augmentBuilder(
							ScpCfDestinationOptionsAugmenter
									.augmenter()
									.tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_THEN_EXCHANGE))
					.build();
			Try<Destination> destinationTry = DestinationAccessor.getLoader().tryGetDestination(destinationName, options);
			HttpClient client = HttpClientAccessor.getHttpClient(destinationTry.get().asHttp());
	        HttpPost sessionRequest = new HttpPost(destUrl);
			sessionRequest.setHeader("content-type", "text/xml; charset=UTF-8");
			sessionRequest.setHeader("Accept", "text/xml");
			sessionRequest.setEntity(stringEntity);
			if(debug)
				response.getWriter().println("Before execute");
			HttpResponse httpResponse = client.execute(sessionRequest);
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug) {
			 	response.getWriter().println("statusCode: "+statusCode);
			}
			entity = httpResponse.getEntity();
		}catch (RuntimeException e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}

			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			System.out.println("RuntimeException in executeHttpPost: "+ e.getMessage());
			System.out.println("RuntimeException in executeHttpPost Full Stack Trace: "+ buffer.toString());

			if(debug){
				response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
				response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			}
		} catch (Exception e) {
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			if(debug){
				response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			}
		}
		return entity;
	}
	/* public HttpEntity executeHttpPost(StringEntity stringEntity, String destUrl, HttpServletResponse response, boolean debug) throws IOException{
		HttpEntity entity = null;
		String userName="", password="", authParam="";
		try{
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_THEN_EXCHANGE)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PUGW_DEST_NAME, options);
			HttpDestination destConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(destConfiguration);
			
			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", PUGW_DEST_NAME));
            }
			
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			
			if(debug){
				response.getWriter().println("executeHttpPost.destUrl: "+ destUrl);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
			}
	        
	        HttpPost sessionRequest = new HttpPost(destUrl);
			sessionRequest.setHeader("content-type", "text/xml; charset=UTF-8");
			sessionRequest.setHeader("Accept", "text/xml");
			sessionRequest.setEntity(stringEntity);

			if(debug){
				response.getWriter().println(" executeHttpPost Before existing  client.execute(sessionRequest)");
			}

			HttpResponse httpResponse = client.execute(sessionRequest);
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug)
				response.getWriter().println("statusCode: "+statusCode);
			entity = httpResponse.getEntity();
		}catch (RuntimeException e) {
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			if(debug){
				response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			}
		} catch (Exception e) {
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			if(debug){
				response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			}
		}
		return entity;
	} */
	
	public String setGWHttpResponse(HttpEntity entity,  HttpServletResponse response, boolean debug) throws IOException{
		// Copy content from the incoming response to the outgoing response
		String sessionID = "";
		if (entity != null) {
			try {
				//response entity converting string by using entity utils
				String retSrc = EntityUtils.toString(entity); 
				if(debug)
					response.getWriter().println("setGWHttpResponse.retSrc: "+retSrc);
				//checking the response string is soap xml or not
				if(retSrc.startsWith("<soap-env:Envelope")){
					//Check Type
					//result.addProperty("Error", "Test: "+ retSrc);
					if(retSrc.contains("<Type>")) {
					String responseType = retSrc.split("<Type>")[1].split("</Type>")[0];
						//checking the response is having usersession tag or not
						if(responseType != null && responseType == "E") {
							String errorId = "Error ID: "+retSrc.split("<Id>")[1].split("</Id>")[0] +"\n";
							String errorNumber = errorId+"Error Number: "+retSrc.split("<Number>")[1].split("</Number>")[0] +"\n";
							String errorMessage = errorNumber+"Error Message: "+retSrc.split("<Message>")[1].split("</Message>")[0];
	
							sessionID = errorMessage;
	
						}else if(retSrc.contains("<UserSession>")){
							if(retSrc.contains("<UserSession>")) {
								//getting the usersession id value from usersession tags
								String loginSessionID = retSrc.split("<UserSession>")[1].split("</UserSession>")[0];
								if(loginSessionID.length()>=1){
									//push the key and value to json object
									sessionID = loginSessionID;
								}else{
									sessionID = "No Usersession ID found (User not Maintained)";
								}
							}else {
								sessionID = "No Usersession ID found (UserSession is missing)";
							}
						}
					}else{
						sessionID = "No Usersession ID found (Response type is missing)\n Backend Error: "+retSrc;
					}
				}else{
					sessionID = "No Usersession ID found (No Envelope) ---"+retSrc;
				}
			}catch(Exception e){
				response.getWriter().println("Error at fetching entity response: " +  e.getMessage());
			}
		}
		
		return sessionID;
	}
	
	public String validateInput(HttpServletResponse response, String fieldName, String  fieldValue, boolean debug) throws IOException
	{
		String validationResponse =  "";
//		boolean isValid = false;
		if(debug){
			response.getWriter().println("validateInput.fieldName: " +  fieldName);
			response.getWriter().println("validateInput.fieldValue: " +  fieldValue);
		}
		if(fieldName.equalsIgnoreCase("Aadhar"))
		{
//			validationResponse = isValidAadhar(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("DOB"))
		{
			validationResponse = isValidDOB(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("PAN") || fieldName.equalsIgnoreCase("PAN_NO"))
		{
			validationResponse = isValidPAN(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("Mobile") || fieldName.equalsIgnoreCase("MOBILE"))
		{
			validationResponse = isValidMobile(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("email"))
		{
			validationResponse = isValidEmail(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("SignerEmailId") || fieldName.equalsIgnoreCase("EMAIL_ID"))
		{
			validationResponse = isValidEmail(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("SignerPAN"))
		{
			validationResponse = isValidPAN(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("SignerMobile"))
		{
			validationResponse = isValidMobile(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("SignerAadhar"))
		{
			validationResponse = isValidAadhar(fieldValue);
		}
		else if(fieldName.equalsIgnoreCase("DateOfIncorporation"))
		{
			validationResponse = isValidDateOfIncorporation(response, fieldValue, debug);
		}
		else if(fieldName.equalsIgnoreCase("PINCODE") || fieldName.equalsIgnoreCase("POSTAL_CODE"))
		{
			validationResponse = isValidPincode(fieldValue);
		}
		return validationResponse;
	}
	
	public String isValidEmail(String emailID)
	{
		String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\."+ 
                "[a-zA-Z0-9_+&*-]+)*@" + 
                "(?:[a-zA-Z0-9-]+\\.)+[a-z" + 
                "A-Z]{2,7}$"; 
                  
		Pattern pat = Pattern.compile(emailRegex); 
		if (emailID == null) 
			return "E141"; 
		
		if (pat.matcher(emailID).matches()) {
			return "";
		}
		else{
			return "E141";
		}
	}
	
	public String isValidMobile(String mobileNo)
	{
		try
		{
			if(mobileNo.length() != 10)
			{
				return "E140";
			}
			else
			{
				long validNo = Long.parseLong(mobileNo);
				return "";
			}
		}
		catch (NumberFormatException e) {
			return "E140";
		}
		catch (Exception e) {
			return "E140";
		}
	}
	
	public String isValidDateOfIncorporation(HttpServletResponse response, String dateOfIncorporation, boolean debug)
	{
		try
		{
			if(debug){
				response.getWriter().println("isValidDateOfIncorporation.dateOfIncorporation: " +  dateOfIncorporation);
			}
			
			String format="yyyyMMdd", value=dateOfIncorporation;
			Date date = null;
			
			SimpleDateFormat sdf = new SimpleDateFormat(format);
			date = sdf.parse(value);
			if(!value.equals(sdf.format(date))) {
				date = null;
			}
			
			if(debug){
				response.getWriter().println("isValidDateOfIncorporation.date: " +  date);
			}
			 
			if(date == null) {
				return "E149";
			}else{
				if(date.before(new Date()))
				{
					if(debug){
						response.getWriter().println("isValidDateOfIncorporation.date before");
					}
					return "";
				}
				else
				{
					if(debug){
						response.getWriter().println("isValidDateOfIncorporation.date not before ");
					}
					return "E150";
				}
			}
		}catch (ParseException e) {
			return "E135";
		}catch (Exception e) {
			return "E135";
		}
	}
	
	public String isValidPincode(String pincode){
		try
		{
			if(pincode.length() != 6)
			{
				return "E167";
			}
			else
			{
				long validNo = Long.parseLong(pincode);
				return "";
			}
		}
		catch (NumberFormatException e) {
			return "E167";
		}
		catch (Exception e) {
			return "E167";
		}
	}
	
	public String isValidPAN(String PAN)
	{
		Pattern pattern = Pattern.compile("[A-Z]{5}[0-9]{4}[A-Z]{1}");
		Matcher matcher = pattern.matcher(PAN);
		// Check if pattern matches 
		if (matcher.matches()) {
		  return "";
		}
		else{
			return "E139";
		}
	}
	
	public String isValidDOB(String DOB)
	{
		try
		{
			String format="yyyyMMdd", value=DOB;
			Date date = null;
			
			SimpleDateFormat sdf = new SimpleDateFormat(format);
			date = sdf.parse(value);
			if(!value.equals(sdf.format(date))) {
				date = null;
			}
			 
			if(date == null) {
				return "E137";
			}else{
				if(date.before(new Date()))
				{
					return "";
				}
				else
				{
					return "E138";
				}
			}
		}catch (ParseException e) {
			return "E135";
		}catch (Exception e) {
			return "E135";
		}
	}
	
	public String isValidAadhar(String aadharNo)
	{
		try
		{
			if(aadharNo.length() != 12)
			{
				return "E134";
			}
			else
			{
				long validNo = Long.parseLong(aadharNo);
//				if(validNo)
				return "";
			}
		}
		catch (NumberFormatException e) {
			return "E134";
		}
		catch (Exception e) {
			return "E134";
		}
	}
	
	public String getRequestTypeInBatch(String requestBody){
		String requestType="";
		
		return requestType;
	}
	
	public String getCorpID(){
		String corpID="", destURL="", aggregatorID="", executeURL="", userName="", password="", authParam="";
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		CommonUtils commonUtils = new CommonUtils();
		try{
			destURL = commonUtils.getODataDestinationProperties("URL", "PYGWHANA");
			aggregatorID = commonUtils.getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userName = commonUtils.getODataDestinationProperties("User", "PYGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PYGWHANA");
			
			authParam = userName+":"+password;
			
			executeURL = destURL+"SCCNFG?$filter=AGGRID%20eq%20%27"+aggregatorID+"%27&$select=CORPID";
			/*response.getWriter().println("destURL: "+destURL);
			response.getWriter().println("aggregatorID: "+aggregatorID);
			response.getWriter().println("userName: "+userName);
			response.getWriter().println("password: "+password);
			response.getWriter().println("authParam: "+authParam);
			response.getWriter().println("executeURL: "+executeURL);*/
			
			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type","application/json");
			connection.setRequestProperty("Accept","application/json");
			connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encodeToString(authParam.getBytes()));
			connection.setDoInput(true);
			
//			int responseCode = connection.getResponseCode();
//			response.getWriter().println("responseCode: "+responseCode);
			
			in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String inputLine;
			StringBuffer responseStrBuffer = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				responseStrBuffer.append(inputLine);
			}
			
//			response.getWriter().println("responseStrBuffer: "+responseStrBuffer.toString());
			JsonParser parser = new JsonParser();
			JsonObject jsonObj = (JsonObject)parser.parse(responseStrBuffer.toString());
			JsonObject results = jsonObj.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject contactPersonJsonObj = (JsonObject) dresults.get(i);
				corpID = contactPersonJsonObj.get("CORPID").getAsString();
			}
			
			if(corpID == null || corpID.trim().length() ==0){
				corpID = "E177";
			}
//			response.getWriter().println("corpID: "+corpID);
		}catch (Exception e) {
			corpID = "Error : "+e.getMessage();
//			response.getWriter().println("Exception: "+e.getLocalizedMessage());
		}finally{
			return corpID;
		}
	}

	public String getUserPrincipal1(HttpServletRequest request, String reqProperty, HttpServletResponse response) throws IOException{
		try {
			System.out.println( "inside getUserPrincipal for getCurrentToken:" +AuthTokenAccessor.getCurrentToken().getJwt());
			// System.out.println( "inside getUserPrincipal for getXsuaaServiceToken:" +AuthTokenAccessor.getXsuaaServiceToken().getJwt());
			System.out.println("inside getUserPrincipal for getCurrentPrincipal:"+PrincipalAccessor.getCurrentPrincipal());
		} catch (Exception e) {
			writeExceptionLogs(e, "getUserPrincipal1");
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost:"+buffer.toString());
		}

		return "";
	}
	
	public String getUserPrincipal(HttpServletRequest request, String reqProperty, HttpServletResponse response)
	{
		String reqPropertyValue = "", authTokenHeader="", authMtd="", authValue="";
		String jwtSplit[] = null;
		JsonObject jwtBody = new JsonObject();
		boolean debug = false;
		System.out.println("Inside getUserPrincipal");

		System.out.println( "inside getUserPrincipal for getCurrentToken:" +AuthTokenAccessor.getCurrentToken().getJwt());
		// System.out.println( "inside getUserPrincipal for getXsuaaServiceToken:" +AuthTokenAccessor.getXsuaaServiceToken().getJwt());
		System.out.println("inside getUserPrincipal for getCurrentPrincipal:"+PrincipalAccessor.getCurrentPrincipal());

		try
		{
			authTokenHeader = getAuthorization(request);
			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true")){
				debug = true;
				response.getWriter().println("getUserPrincipal.authTokenHeader: "+authTokenHeader);
			}

			jwtSplit = authTokenHeader.split("\\s+");
			
			if(jwtSplit.length == 2){
				authMtd = jwtSplit[0];
				authValue = jwtSplit[1];
			}

			jwtBody = decodeJWTBody(request, response, authValue, debug);
			if(debug)
				response.getWriter().println("getUserPrincipal.jwtBody: "+jwtBody);

			switch(reqProperty){
				case "name":
					reqPropertyValue = PrincipalAccessor.getCurrentPrincipal().getPrincipalId();
				break;

				case "email":
					reqPropertyValue = jwtBody.get("email").getAsString();
				break;

				case "DisplayName":
					reqPropertyValue = jwtBody.get("given_name").getAsString()+" "+jwtBody.get("family_name").getAsString();
				break;

				case "user":
					reqPropertyValue = jwtBody.get("user_name").getAsString();
				break;

				case "All":
					reqPropertyValue = jwtBody.toString();
				break;

				default:
					reqPropertyValue = "Invalid Input";
				break;
			}
		}catch (Exception e) {
			reqPropertyValue = e.getClass().getCanonicalName()+" - "+e.getMessage();
			writeExceptionLogs(e, "getUserPrincipal");
		}
		
		return reqPropertyValue;
	}
	
	public String validateLegalStatusForApply(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, 
			String legalStatusFromBP, boolean debug){
		String message = "", executeURL="", aggregatorID = "", legalStatusFromTSet="", userPass="", userName="", password="", oDataUrl="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"AttributeTypesetTypes?$filter=Typeset%20eq%20%27PYELGS%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("validateLegalStatusForApply-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			message = "119";
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
				legalStatusFromTSet = typeSetJsonObj.get("Type").getAsString();
				if(debug)
					response.getWriter().println("validateLegalStatusForApply-legalStatusFromTSet: "+legalStatusFromTSet);
				if(legalStatusFromBP.equalsIgnoreCase(legalStatusFromTSet)){
					message = "";
				}
//				response.getWriter().println("value: "+legalStatusFromTSet);
			}
//			message = 
		}catch (Exception e) {
			message = "001";
		}
		return message;
	}
	
	public String validateLegalStatus(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, boolean debug){
		String message = "", executeURL="", aggregatorID = "", legalStatusFromBP = "", legalStatusFromTSet="", userPass="", userName="", password="", oDataUrl="";
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			legalStatusFromBP = getBPCPDetails(request, response, inputJsonObject, loginID, "LegalStatus", debug);
			message = legalStatusFromBP;
//			response.getWriter().println("message: "+message);
			if(! message.equalsIgnoreCase("118") && ! message.equalsIgnoreCase("062")){
				oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
				aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
				userName = getODataDestinationProperties("User", "PCGWHANA");
				password = getODataDestinationProperties("Password", "PCGWHANA");
				userPass = userName+":"+password;
				if(debug){
					response.getWriter().println("validateLegalStatus-userPass: "+userPass);
				}
				
				executeURL = oDataUrl+"AttributeTypesetTypes?$filter=Typeset%20eq%20%27PYLGST%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
				httpJsonResult = executeURL(executeURL, userPass, response);
				
				JsonObject results = httpJsonResult.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					legalStatusFromTSet = typeSetJsonObj.get("Type").getAsString();
					
					if(legalStatusFromBP.equalsIgnoreCase(legalStatusFromTSet)){
						message = "055";
					}
//					response.getWriter().println("value: "+legalStatusFromTSet);
				}
				
				if(debug)
					response.getWriter().println("validateLegalStatus-message: "+message);
			}else{
				return message;
			}
			
		}catch (Exception e) {
			message = "001";
		}
		
		return message;
	}
	
	public String validateSCF(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, boolean debug){
		String message="";
		try{
			message = getSCFDetails(inputJsonObject, response, debug);
			
			if(debug)
				response.getWriter().println("validateSCF-message: "+message);
			
		}catch (Exception e) {
			message = "001";
		}
		
		return message;
	}
	
	public String getSCFDetails(JSONObject inputJsonObject, HttpServletResponse response, boolean debug){
		String message="", oDataUrl="", aggregatorID="", userName="", password="", userPass="", cpGuid="", cpType="", executeURL="", statusID="";
		JsonObject scfJsonObject = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			
//			executeURL = oDataUrl+"SCF?$filter=CP_GUID%20eq%20%27"+cpGuid+"%27%20and%20CP_TYPE%20eq%20%27"+cpType+"%27%20and%20AGGRID%20eq%20%27"+aggregatorID+"%27%20and%20STATUS_ID%20eq%20%27000003%27";
			executeURL = oDataUrl+"SCF?$filter=CP_GUID%20eq%20%27"+cpGuid+"%27%20and%20CP_TYPE%20eq%20%27"+cpType+"%27%20and%20AGGRID%20eq%20%27"+aggregatorID+"%27";
			scfJsonObject = executeURL(executeURL, userPass, response);
			
			if(debug)
				response.getWriter().println("getSCFDetails.scfJsonObject: "+scfJsonObject);
//			scfJsonObject
			JsonObject results = scfJsonObject.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject scfEntriesJsonObj = (JsonObject) dresults.get(i);
				statusID = scfEntriesJsonObj.get("STATUS_ID").getAsString();
			}
			
			if(statusID != null && statusID.trim().length() > 0){
				if(statusID.equalsIgnoreCase("000002")){
					message = "063";
				}else if(statusID.equalsIgnoreCase("000003")){
					message = "";
				}else{
					message = "057";
				}
			}else{
				message = "";
			}
			
			if(debug)
				response.getWriter().println("getSCFDetails message: "+message);
		}catch (Exception e) {
			message = "001";
		}
		return message;
	}
	
	public String getBPCPDetails(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, 
			String requiredField, boolean debug){
		String returnValue = "", message = "", executeURL="", aggregatorID = "", cpType = "", userPass="", userName="", password="", oDataUrl="", cpGuid="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			
			if(debug){
				response.getWriter().println("getLegalStatusFromBP - userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"BPHeaders?$expand=BPContactPersons&$filter=CPGuid%20eq%20%27"+cpGuid+"%27%20and%20CPType%20eq%20%27"+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject contactPersonJsonObj = (JsonObject) dresults.get(i);
				
				if(requiredField.equalsIgnoreCase("LegalStatus"))
					returnValue = contactPersonJsonObj.get("LegalStatus").getAsString();
				else if(requiredField.equalsIgnoreCase("IncorporationDate"))
					returnValue = contactPersonJsonObj.get("IncorporationDate").getAsString();
				else
					returnValue = "";
//				else if(requiredField.equalsIgnoreCase("State"))
					
			}
			
			if(returnValue == null || returnValue.trim().length() == 0){
				if(requiredField.equalsIgnoreCase("LegalStatus"))
					returnValue = "118";
				else if(requiredField.equalsIgnoreCase("IncorporationDate"))
					returnValue = "117";
				else
					returnValue = "";
			}
			if(dresults.size() == 0){
				returnValue = "062";
			}
			
			if(debug)
				response.getWriter().println("getLegalStatusFromBP - returnValue: "+returnValue);
		}catch (Exception e) {
			returnValue = "001";
		}
		
		return returnValue;
	}
	
	public Map<String, String> simulateSCFOffers(JSONObject inputJsonObject, HttpServletRequest request, HttpServletResponse response, String corpID, boolean debug){
		Map scfOfferResponseMap = null;
		SCFOfferClient offerClient = new SCFOfferClient();
		try{
			if(debug){
				response.getWriter().println("simulateSCFOffers-corpID: "+corpID);
				response.getWriter().println("simulateSCFOffers-CPGUID: "+inputJsonObject.getString("CPGUID"));
			}
			scfOfferResponseMap = offerClient.callSCFOffersWebservice(request, response, corpID, inputJsonObject.getString("CPGUID"), debug);
			if(debug)
				response.getWriter().println("simulateSCFOffers-scfOfferResponseMap: "+scfOfferResponseMap);
			
		}catch (Exception e) {
		}
		return scfOfferResponseMap;
	}
	
	public JsonObject executeUpdate(String executeURL, String userPass, HttpServletResponse response, JSONObject updatePayLoad, 
			HttpServletRequest request, boolean debug, String destination) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration("PYGWHANA");
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", "PYGWHANA"));
            }
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			
			// String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        // response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
	        /* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
//	        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
	        httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
//	        HttpPost updateRequest = new HttpPost(executeURL); */
	        HttpPut updateRequest = new HttpPut(executeURL);
//	        updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PUT");
	        updateRequest.setEntity(requestEntity);
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			// HttpResponse httpResponse = httpClient.execute(updateRequest);
			HttpResponse httpResponse = client.execute(updateRequest);
			responseEntity = httpResponse.getEntity();
			
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
			}
				
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		}catch (RuntimeException e) {
			response.getWriter().println("Error at updating data: " +  e.getMessage());
			response.getWriter().println("Error at updating data xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
//			e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}finally{
			// httpClient.close();
		}
		return jsonObj;
	}
	
	public JsonObject executeRenewalUpdate(String executeURL, String userPass, HttpServletResponse response, JsonObject updatePayLoad, 
			HttpServletRequest request, boolean debug, String destination) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			requestEntity = new StringEntity(updatePayLoad.toString());
			

			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userPass.getBytes());
			
			if(debug){
				response.getWriter().println("executeUpdate.executeURL: "+ executeURL);
				response.getWriter().println("executeUpdate.userName: "+ userName);
		        response.getWriter().println("executeUpdate.password: "+ password);
		        response.getWriter().println("executeUpdate.authParam: "+ authParam);
		        response.getWriter().println("executeUpdate.basicAuth: "+ basicAuth);
			}
			
	        HttpPut updateRequest = new HttpPut(executeURL);
//	        updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PUT");
	        updateRequest.setEntity(requestEntity);
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			// HttpResponse httpResponse = httpClient.execute(updateRequest);
			HttpResponse httpResponse = client.execute(updateRequest);
			responseEntity = httpResponse.getEntity();
			
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
				if(httpResponse.getStatusLine().getStatusCode() > 204)
					response.getWriter().println("executeUpdate.responseEntity: "+EntityUtils.toString(responseEntity));
				
//				String retSrc = EntityUtils.toString(responseEntity); 
//				response.getWriter().println("executeUpdate.retSrc: "+retSrc);
			}
				
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		}catch (RuntimeException e) {
			// In case of an unexpected exception you may want to abort
			// the HTTP request in order to shut down the underlying
			// connection immediately.
			response.getWriter().println("Error at updating data: " +  e.getMessage());
			response.getWriter().println("Error at updating data xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
//			e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}finally{
			// httpClient.close();
		}
		return jsonObj;
	}
	
	public JsonObject executeMergeUpdate(String executeURL, String userPass, HttpServletResponse response, JSONObject updatePayLoad, 
			HttpServletRequest request, boolean debug, String destination) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration("PYGWHANA");
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", "PYGWHANA"));
            }
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			
			// String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        // response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
	        /* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
//	        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
	        httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build(); */
	        HttpPut updateRequest = new HttpPut(executeURL);
//	        updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PUT");
	        updateRequest.setEntity(requestEntity);
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			// HttpResponse httpResponse = httpClient.execute(updateRequest);
			HttpResponse httpResponse = client.execute(updateRequest);

			responseEntity = httpResponse.getEntity();
			
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
				response.getWriter().println("executeUpdate.responseEntity: "+responseEntity);
			}
				
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		}catch (RuntimeException e) {
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
//			e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}finally{
			// httpClient.close();
		}
		return jsonObj;
	}
	
	public JsonObject executePostURL(String executeURL, String userPass, HttpServletResponse response, JSONObject insertPayLoad, 
			HttpServletRequest request, boolean debug, String destination) throws IOException{
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		String data = "";
		try{
			if(debug){
				response.getWriter().println("executePostURL-insertPayLoad: "+insertPayLoad);
			}
			
			if(debug)
				response.getWriter().println("executePostURL-executeURL: "+executeURL);
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration("PYGWHANA");
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			
			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", "PYGWHANA"));
            }
			
			// String proxyType = destConfiguration.get("ProxyType").get().toString();
			if(debug){
				response.getWriter().println("executeHttpPost.User: "+ destConfiguration.get("User").get().toString());
			}
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			
			
//			byte[] encodedByte = Base64.getEncoder().encode(authParam.getBytes());
//			String encodedStr = new String(encodedByte);
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        // response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
			/*String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
	        int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
	        HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);*/
	        
	        /* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
			
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);*/
			
			requestEntity = new StringEntity(insertPayLoad.toString());
			
//			httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
			// httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build(); 
			HttpPost postRequest = new HttpPost(executeURL);
			postRequest.setHeader("Content-Type", "application/json");
			postRequest.setHeader("Accept", "application/json");
//			postRequest.setHeader("X-CSRF-Token", csrfToken);
			postRequest.setEntity(requestEntity);
			
			// HttpResponse httpPostResponse = httpClient.execute(postRequest);
			HttpResponse httpPostResponse = client.execute(postRequest);
			responseEntity = httpPostResponse.getEntity();
			
			if(httpPostResponse.getEntity().getContentType() != null && httpPostResponse.getEntity().getContentType().toString() != "") {
				String contentType = httpPostResponse.getEntity().getContentType().toString().replaceAll("content-type:", "").trim();
				if(contentType.equalsIgnoreCase("application/xml;charset=utf-8")) {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
//					response.getOutputStream().print(EntityUtils.toString(countEntity));
					if(debug)
						response.getWriter().println(EntityUtils.toString(responseEntity));
				}else{
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
//					response.getOutputStream().print(Data);	
					if(debug)
						response.getWriter().println(data);
				}
			}else{
				response.setContentType("application/pdf");
				data = EntityUtils.toString(responseEntity);
//				response.getOutputStream().print(EntityUtils.toString(countEntity));
				if(debug)
					response.getWriter().println(EntityUtils.toString(responseEntity));
			}
			JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(data);
			
		}catch (Exception e) {
			response.getWriter().println("Data: "+data);
			response.getWriter().println("Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executePostURL-Exception Stack Trace: "+buffer.toString());
		}/* finally{
			httpClient.close();
			
		} */
		return jsonObj;
	}
	
	public JsonObject executeURL(String executeURL, String token, HttpServletResponse response){
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		JsonObject jsonObj = null;
		try{
			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type","application/json");
			connection.setRequestProperty("Accept","application/json");
			connection.setRequestProperty("Authorization","Bearer "+ token);
			connection.setDoInput(true);
			
			in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String inputLine;
			StringBuffer responseStrBuffer = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				responseStrBuffer.append(inputLine);
			}
			
			JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(responseStrBuffer.toString());
		}catch (Exception e) {
			response.getWriter().println("executeURL.Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeURL.Full Stack Trace: "+buffer.toString());
		}finally{
			return jsonObj;
		}
	}
	
	public JsonObject scfApply(HttpServletResponse response, HttpServletRequest request, String cpGuid, String aggregatorID, String loginID, 
			String oDataURL, JSONObject inputJsonObject, Properties properties, Map<String, String> scfOfferResponseMap, 
			boolean debug) throws IOException{
		String message = "", corpID = "", gstStateCode = "", incorporationDate="", legalStatus="", name1="", name2="", cinNo="", gSTN="", dealerID="", 
				concatena="", dealerAddress2="", dealerAddress3="", cpType="", dealerAddress4="", dealerAddress5="", dealerCity="", dealerPincode="", isEligible="";
		Map<String,String> payLoadForApplyWebService = new HashMap<String,String>();
		Map<String,String> dealerMasterData = new HashMap<String,String>();
//		Map<String,String> scfOfferResponseMap = new HashMap<String,String>();
		Map<String,String> scfApplyResponseMap = new HashMap<String,String>();
		JsonObject bpContactPersonsJsonObject = null;
		SCFApplyClient applyClient = new SCFApplyClient();
		JsonObject scfInsertObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		String leadID="";
		try{
			
			cpType = inputJsonObject.getString("CPTypeID");
			corpID = getCorpID();
//			scfOfferResponseMap = simulateSCFOffers(inputJsonObject, request, response, corpID, debug);
			
			if(cpType.equalsIgnoreCase("60")){
				gstStateCode = getGSTStateCodeForVendor(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
				dealerMasterData = getVendorDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
				
			}else if(cpType.equalsIgnoreCase("01")){
				gstStateCode = getGSTStateCodeForDealer(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
				dealerMasterData = getDealerDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
			}
			
			legalStatus = getBPCPDetails(request, response, inputJsonObject, loginID, "LegalStatus", debug); //Might give 118
			
			if(null != legalStatus && legalStatus.equalsIgnoreCase("118")){
				message = "118";
				errorResponseObj.addProperty("EligibilityStatus", "000000");
				errorResponseObj.addProperty("ErrorCode", message);
				errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
				errorResponseObj.addProperty("LeadID", leadID);
				scfInsertObj.add("d", errorResponseObj);
				/*scfInsertObj.addProperty("EligibilityStatus", "000000");
				scfInsertObj.addProperty("ErrorCode", message);
				scfInsertObj.addProperty("ErrorMessage", properties.getProperty(message));*/
			}else{
				incorporationDate = getBPCPDetails(request, response, inputJsonObject, loginID, "IncorporationDate", debug); //Might give 117
				if(null != incorporationDate && incorporationDate.equalsIgnoreCase("117")){
					message = "117";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					errorResponseObj.addProperty("LeadID", leadID);
					scfInsertObj.add("d", errorResponseObj);
				}else{
					bpContactPersonsJsonObject = getPartnerDetails(inputJsonObject, response, debug);
					
					if(debug){
						response.getWriter().println("scfApply-gstStateCode: "+gstStateCode);
						response.getWriter().println("scfApply-dealerMasterData: "+dealerMasterData);
						response.getWriter().println("scfApply-corpID: "+corpID);
						response.getWriter().println("scfApply-legalStatus: "+legalStatus);
						response.getWriter().println("scfApply-incorporationDate: "+incorporationDate);
						response.getWriter().println("scfApply-bpContactPersonsJsonObject: "+bpContactPersonsJsonObject.toString());
					}
					
					GsonBuilder gsonMapBuilder = new GsonBuilder();
					Gson gsonObject = gsonMapBuilder.create();
					String scfOfferJsonObject = gsonObject.toJson(scfOfferResponseMap);
					JSONObject scfOfferJsonObj = new JSONObject(scfOfferJsonObject);
					
					message = validateLegalStatusForApply(request, response, inputJsonObject, loginID, legalStatus, debug);
					if(debug){
						response.getWriter().println("scfApply1-scfOfferJsonObj: "+scfOfferJsonObj);
						response.getWriter().println("scfApply1-message: "+message);
						response.getWriter().println("scfApply-ConstitutionType: "+scfOfferJsonObj.getString("ConstitutionType"));
					}
					
					if(! message.equalsIgnoreCase("119")){
						if(debug){
							response.getWriter().println("scfApply1-scfOfferJsonObj.ConstitutionType: "+scfOfferJsonObj.getString("ConstitutionType"));
							response.getWriter().println("scfApply1-legalStatus: "+legalStatus);
						}
						if(null != scfOfferJsonObj.getString("ConstitutionType") && scfOfferJsonObj.getString("ConstitutionType").trim().length() > 0
								&& ! scfOfferJsonObj.getString("ConstitutionType").equalsIgnoreCase(legalStatus)){
							message = "113";
							errorResponseObj.addProperty("EligibilityStatus", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
							errorResponseObj.addProperty("LeadID", leadID);
							scfInsertObj.add("d", errorResponseObj);
							/*scfInsertObj.addProperty("EligibilityStatus", "000000");
							scfInsertObj.addProperty("ErrorCode", message);
							scfInsertObj.addProperty("ErrorMessage", properties.getProperty(message));*/
						}else{
							String messageCode="";
							message = validateSCF1Entries(request, response, inputJsonObject, aggregatorID, scfOfferJsonObj, debug);
							
							if(message.contains("003|"))
								messageCode = "003";
							else if(message.equalsIgnoreCase("999"))
								messageCode = "999";
							else if(message.equalsIgnoreCase("001"))
								messageCode = "001";
							
							if(debug)
								response.getWriter().println("scfApply11-messageCode: "+messageCode);
							if(!messageCode.equalsIgnoreCase("003") && !messageCode.equalsIgnoreCase("999") && !messageCode.equalsIgnoreCase("001")){
								if(! message.equalsIgnoreCase("")){
									JsonParser jsonParser = new JsonParser();
									scfInsertObj = (JsonObject)jsonParser.parse(message);
								}else{
									if(debug)
										response.getWriter().println("scfApply11-EligibilityStatus: "+scfOfferJsonObj.getString("EligibilityStatus"));
									
									String applicationNo="";
									if(scfOfferJsonObj.getString("EligibilityStatus").equalsIgnoreCase("000002")){
										applicationNo = generateApplicationNo(response, properties, debug);
										if(debug)
											response.getWriter().println("Not calling SCF Apply WS");
										scfApplyResponseMap.put("AccountNo", "");
										scfApplyResponseMap.put("Amount", "0.00");
										scfApplyResponseMap.put("ErrorCode", "");
										scfApplyResponseMap.put("LeadID", "PA"+applicationNo);//Generate LeadID
										scfApplyResponseMap.put("Message", "");
										scfApplyResponseMap.put("Rate", "");
										scfApplyResponseMap.put("Status", "000001");
										scfApplyResponseMap.put("Tenure", "0");
										scfApplyResponseMap.put("ValidTo", scfOfferJsonObj.getString("ValidTo"));
										scfInsertObj = insertIntoSCF1(request, response, oDataURL, scfApplyResponseMap, inputJsonObject, aggregatorID, debug);
									
									}else{
										payLoadForApplyWebService.put("dealerState", gstStateCode);
										payLoadForApplyWebService.put("corporateID", corpID);
										payLoadForApplyWebService.put("dateOfIncorporation", incorporationDate);
										payLoadForApplyWebService.put("constitutionType", legalStatus);
										
										for (String key : dealerMasterData.keySet()) {
											if(debug)
												response.getWriter().println("scfApply-dealerMasterData: "+key + " - " + dealerMasterData.get(key));
										
											if(key.equalsIgnoreCase("PAN"))
												payLoadForApplyWebService.put("PAN", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("GSTIN"))
												payLoadForApplyWebService.put("GSTIN", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("PartnerID"))
												payLoadForApplyWebService.put("dealerID", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("Address1"))
												payLoadForApplyWebService.put("dealerAddress1", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("Address2"))
												payLoadForApplyWebService.put("dealerAddress2", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("Address3"))
												payLoadForApplyWebService.put("dealerAddress3", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("Address4"))
												payLoadForApplyWebService.put("dealerAddress4", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("City"))
												payLoadForApplyWebService.put("dealerCity", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("PostalCode"))
												payLoadForApplyWebService.put("dealerPincode", dealerMasterData.get(key));
											if(key.equalsIgnoreCase("Name"))
												name1 = dealerMasterData.get(key);
											if(key.equalsIgnoreCase("Name2"))
												name2 = dealerMasterData.get(key);
											payLoadForApplyWebService.put("dealerName", name1+" "+name2);
										}
										payLoadForApplyWebService.put("dealerAddress5", "");
										payLoadForApplyWebService.put("TIN", "");
										payLoadForApplyWebService.put("CIN", "");
										payLoadForApplyWebService.put("isEligible", "Eligible");
										
										scfApplyResponseMap = applyClient.scfApply(request, response, corpID, payLoadForApplyWebService, bpContactPersonsJsonObject, debug);
										if(debug)
											response.getWriter().println("scfApplyResponseMap.size(): "+scfApplyResponseMap.size());
//										    
										boolean isSuccess = false;
										for (String key : scfApplyResponseMap.keySet()) {
											if(debug)
												response.getWriter().println("scfApplyResponseMap: "+key + " - " + scfApplyResponseMap.get(key));
											if(key.equalsIgnoreCase("Status")){
												if(null != scfApplyResponseMap.get(key)){
													if(scfApplyResponseMap.get(key).equalsIgnoreCase("000001")){
														isSuccess = true;
													}
												}else{
													isSuccess = false;
												}
												
											}
											if(key.equalsIgnoreCase("ErrorCode")){
												if(null != scfApplyResponseMap.get(key)){
													if(scfApplyResponseMap.get(key).equalsIgnoreCase("-599") || scfApplyResponseMap.get(key).equalsIgnoreCase("115")){
														isSuccess = true;
													}
												}else{
													isSuccess = false;
												}
											}
										}
//										isSuccess = true;
										if(debug)
											response.getWriter().println("isSuccess: "+isSuccess);
										if(isSuccess){
											scfInsertObj = insertIntoSCF1(request, response, oDataURL, scfApplyResponseMap, inputJsonObject, aggregatorID, debug);
											if(scfApplyResponseMap.get("ErrorCode").equalsIgnoreCase("-599") || scfApplyResponseMap.get("ErrorCode").equalsIgnoreCase("115")){
												String detailedMsg = scfApplyResponseMap.get("Message")+" (Ref: "+scfApplyResponseMap.get("LeadID")+" / ErrorCode: "+scfApplyResponseMap.get("ErrorCode")+")";
												scfInsertObj.get("d").getAsJsonObject().addProperty("ErrorMsg", detailedMsg);
											}
										}else{
											String detailedMessage = "", errorCode="", applyMsg="";
											//Other than ---> Status as '000001' and error codes -599, 115
											for (String key : scfApplyResponseMap.keySet()) {
												if(key.equalsIgnoreCase("ErrorCode")){
													errorCode = scfApplyResponseMap.get(key);
												}
												if(key.equalsIgnoreCase("Message")){
													applyMsg = scfApplyResponseMap.get(key);
												}
												if(key.equalsIgnoreCase("LeadID")){
													leadID = scfApplyResponseMap.get(key);
												}
											}
											
											if(debug){
												response.getWriter().println("No insertion done scenario. Status is 000002 and error codes other than -599 and 115");
												response.getWriter().println("errorCode: "+errorCode);
												response.getWriter().println("applyMsg: "+applyMsg);
												response.getWriter().println("leadID: "+leadID);
											}
//											s
//											message = "059";
//											detailedMessage = applyMsg + "(Ref: "+leadID+" / ErrorCode: "+errorCode+")";
											
											if(errorCode != null && errorCode.trim().equalsIgnoreCase("059")){
												message = "059";
												detailedMessage = applyMsg;
											}else{
												if(errorCode != null && (errorCode.trim().equalsIgnoreCase("115") || errorCode.trim().equalsIgnoreCase("-599"))){
//													detailedMessage = leadID;
													detailedMessage = applyMsg + "(Ref: "+leadID+" / ErrorCode: "+errorCode+")";
													message = "109";
												}else{
													detailedMessage = applyMsg + "(Ref: "+leadID+" / ErrorCode: "+errorCode+")";
													message = "1091";
												}
											}
											
											errorResponseObj.addProperty("EligibilityStatus", "000000");
											errorResponseObj.addProperty("ErrorCode", message);
											errorResponseObj.addProperty("ErrorMessage", detailedMessage);
											errorResponseObj.addProperty("LeadID", leadID);
											scfInsertObj.add("d", errorResponseObj);
										}
										if(debug)
											response.getWriter().println("scfInsertObj: "+scfInsertObj);
									}
								}
							}else{
								//Error Handing
								String detailedMsg="", applicationNo="", errorCode="";
								
								String[] resSplitResult = message.split("\\|");
								String resParamName="", resParamValue="";
								for(String s : resSplitResult)
								{
									if(s.length() > 5){
										resParamName = s.substring(0, 5);
										resParamValue = s.substring(5,s.length());
										if(resParamName.equalsIgnoreCase("AppNo"))
											applicationNo = resParamValue;
										else if(resParamName.equalsIgnoreCase("Error"))
											errorCode = resParamValue;
										
										if(debug){
											response.getWriter().println("resParamName: "+resParamName);
											response.getWriter().println("resParamValue: "+resParamValue);
										}
									}else{
										resParamValue = s;
										if(debug)
											response.getWriter().println("resParamValue: "+resParamValue);
									}
								}
								
								if(messageCode.equalsIgnoreCase("003")){
									detailedMsg = properties.getProperty(messageCode)+ "(Ref: "+applicationNo+" / ErrorCode: "+errorCode;
									errorResponseObj.addProperty("EligibilityStatus", "000000");
//									errorResponseObj.addProperty("ErrorCode", messageCode);
									errorResponseObj.addProperty("ErrorCode", "109");
									errorResponseObj.addProperty("ErrorMessage", detailedMsg);
									//errorResponseObj.addProperty("LeadID", leadID);//Commented and added below line on 4-Aug-20 for 'busy dialognot closing issue'
									errorResponseObj.addProperty("LeadID", applicationNo);
									scfInsertObj.add("d", errorResponseObj);
									
									/*scfInsertObj.addProperty("EligibilityStatus", "000000");
									scfInsertObj.addProperty("ErrorCode", messageCode);
									scfInsertObj.addProperty("ErrorMessage", detailedMsg);*/
								}else if(messageCode.equalsIgnoreCase("999")){
									errorResponseObj.addProperty("EligibilityStatus", "000000");
									errorResponseObj.addProperty("ErrorCode", messageCode);
									errorResponseObj.addProperty("ErrorMessage", properties.getProperty(messageCode));
									errorResponseObj.addProperty("LeadID", leadID);
									scfInsertObj.add("d", errorResponseObj);
									
									/*scfInsertObj.addProperty("EligibilityStatus", "000000");
									scfInsertObj.addProperty("ErrorCode", messageCode);
									scfInsertObj.addProperty("ErrorMessage", properties.getProperty(messageCode));*/
								}else if(messageCode.equalsIgnoreCase("001")){
									errorResponseObj.addProperty("EligibilityStatus", "000000");
									errorResponseObj.addProperty("ErrorCode", messageCode);
									errorResponseObj.addProperty("ErrorMessage", properties.getProperty(messageCode));
									errorResponseObj.addProperty("LeadID", leadID);
									scfInsertObj.add("d", errorResponseObj);
									/*scfInsertObj.addProperty("EligibilityStatus", "000000");
									scfInsertObj.addProperty("ErrorCode", messageCode);
									scfInsertObj.addProperty("ErrorMessage", properties.getProperty(messageCode));*/
								}
							}
						}
						if(debug)
							response.getWriter().println("scfApply2-message: "+message);
					}else{
						message = "119";
						errorResponseObj.addProperty("EligibilityStatus", "000000");
						errorResponseObj.addProperty("ErrorCode", message);
						errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
						errorResponseObj.addProperty("LeadID", leadID);
						scfInsertObj.add("d", errorResponseObj);
						/*scfInsertObj.addProperty("EligibilityStatus", "000000");
						scfInsertObj.addProperty("ErrorCode", message);
						scfInsertObj.addProperty("ErrorMessage", properties.getProperty(message));*/
					}
				}
			}
		}catch (Exception e) {
			message = "001";
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
//			response.getWriter().println(e.getMessage()+".CommonUtils---> Full Stack Trace: "+buffer.toString());
			errorResponseObj.addProperty("EligibilityStatus", "000000");
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", e.getMessage()+".CommonUtils.scfApply --> "+buffer.toString());
			errorResponseObj.addProperty("LeadID", leadID);
			scfInsertObj.add("d", errorResponseObj);
		}
		
		return scfInsertObj;
	}
	
	public JsonObject insertIntoSCF1(HttpServletRequest request, HttpServletResponse response, String oDataUrl, 
			Map<String, String> scfApplyResponseMap, JSONObject inputJsonObject, String aggregatorID, boolean debug) throws IOException{
		String message = "", createdAt="", createdBy="", executeURL="", errorCode ="", eligibilityStatus="", validTo="", applicationNo="", userName="", password="", scfInsrGuid="", cpGuid="", cpType="", userPass="";
		JSONObject scfInsrPayLoad = new JSONObject();
		JsonObject httpJsonResult = new JsonObject();
		long validToInMillis = 0;
		boolean insertFlag=false;
		String scf1Guid = "";
		CommonUtils commonUtils = new CommonUtils();
		long createdOnInMillis = 0;
		
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			
			createdBy = commonUtils.getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			
			if(debug){
				response.getWriter().println("insertIntoSCF-createdBy"+createdBy);
				response.getWriter().println("insertIntoSCF-createdOnInMillis"+createdOnInMillis);
				response.getWriter().println("insertIntoSCF-createdAt"+createdAt);
			}
			
//			scfInsrGuid = inputJsonObject.getString("SCFGUID");
			scf1Guid = generateGUID(36);
			if(debug)
				response.getWriter().println("insertIntoSCF1-guid: "+scf1Guid);
//			cpGuid = inputJsonObject.getString("CPGUID");
//			cpType = inputJsonObject.getString("CPTypeID");
			
			scfInsrPayLoad.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			scfInsrPayLoad.accumulate("CreatedBy", createdBy);
			scfInsrPayLoad.accumulate("CreatedAt", createdAt);
			
			scfInsrPayLoad.accumulate("CPGUID", cpGuid);
			scfInsrPayLoad.accumulate("CPTypeID", cpType);
			scfInsrPayLoad.accumulate("AggregatorID", aggregatorID);
			/*scfInsrPayLoad.accumulate("CPGUID", "");
			scfInsrPayLoad.accumulate("CPTypeID", "");
			scfInsrPayLoad.accumulate("AggregatorID", "");*/
			scfInsrPayLoad.accumulate("ID", scf1Guid);
			for (String keyValue : scfApplyResponseMap.keySet()) {
				if(keyValue.equalsIgnoreCase("LeadID")){
					applicationNo = scfApplyResponseMap.get(keyValue);
//					PA<10-digit-number>
					if(debug)
						response.getWriter().println("LeadID: "+applicationNo);
				}
				if(keyValue.equalsIgnoreCase("ValidTo")){
					validTo = scfApplyResponseMap.get(keyValue);
					if(debug)
						response.getWriter().println("validTo: "+validTo);
					validToInMillis = convertToMillis(validTo);
				}
				if(keyValue.equalsIgnoreCase("Status")){
					eligibilityStatus = scfApplyResponseMap.get(keyValue);
					if(null != eligibilityStatus && eligibilityStatus.equalsIgnoreCase("000001")){
						insertFlag = true;
					}
					if(debug)
						response.getWriter().println("eligibilityStatus: "+eligibilityStatus);
				}
				if(keyValue.equalsIgnoreCase("ErrorCode")){
					errorCode = scfApplyResponseMap.get(keyValue);
					if(debug)
						response.getWriter().println("errorCode: "+errorCode);
					//Check Error Code
					if(null != errorCode && (errorCode.equalsIgnoreCase("-599")|| errorCode.equalsIgnoreCase("115"))){
						eligibilityStatus = "000002";
						insertFlag = true;
					}
				}
			}
			scfInsrPayLoad.accumulate("ApplicationNo", applicationNo);
			scfInsrPayLoad.accumulate("EligibilityStatus", eligibilityStatus);
			scfInsrPayLoad.accumulate("ValidTo", "/Date("+validToInMillis+")/");
			scfInsrPayLoad.accumulate("ErrorCode", errorCode);
			
			if(debug)
				response.getWriter().println("insertIntoSCF11-scfInsrPayLoad.toString: "+scfInsrPayLoad.toString());
			
			/*scfInsrPayLoad.accumulate("ApplicationNo", "");
			scfInsrPayLoad.accumulate("EligibilityStatus", "");
			scfInsrPayLoad.accumulate("ValidTo", "");
			scfInsrPayLoad.accumulate("ErrorCode", "");*/
			if(insertFlag){
				executeURL = oDataUrl+"SupplyChainFinanceEligibility";
				
				if(debug)
					response.getWriter().println("executeURL: "+executeURL);
				
				httpJsonResult = executePostURL(executeURL, userPass, response, scfInsrPayLoad, request, debug, "PYGWHANA");
				if(debug)
					response.getWriter().println("post SCF1-httpJsonResult: "+httpJsonResult);
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("post SCF1-exception: "+buffer.toString());
		}
		return httpJsonResult;
	}

	public boolean checkErrorCode(Map<String, String> scfApplyResponseMap, String oDataUrl, String aggregatorID){
		boolean isCorrectCode=false;
		String returnValue = "", message = "", executeURL="", cpType = "", userPass="", userName="", password="", cpGuid="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			executeURL = oDataUrl+"";
		}catch (Exception e) {
			isCorrectCode = false;
		}
		return isCorrectCode;
	}
	
	public JsonObject getPartnerDetails(JSONObject inputJsonObject, HttpServletResponse response, boolean debug){
		Map<String,String> partnerDetails = new HashMap<String,String>();
		String returnValue = "", message = "", executeURL="", aggregatorID = "", cpType = "", userPass="", userName="", password="", oDataUrl="", cpGuid="";
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("getPartnerDetails-getPartnerDetails-oDataUrl: "+oDataUrl);
				response.getWriter().println("getPartnerDetails-getPartnerDetails-aggregatorID: "+aggregatorID);
				response.getWriter().println("getPartnerDetails-getPartnerDetails-userName: "+userName);
				response.getWriter().println("getPartnerDetails-getPartnerDetails-password: "+password);
				response.getWriter().println("getPartnerDetails-getPartnerDetails-userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"BPHeaders?$expand=BPContactPersons&$filter=CPGuid%20eq%20%27"+cpGuid+"%27%20and%20CPType%20eq%20%27"+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getPartnerDetails-executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			
//			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
//			JsonArray dresults = results.get("results").getAsJsonArray();
		}catch (Exception e) {
		}
		return httpJsonResult;
	}
	
	public String getGSTStateCodeForDealer(HttpServletResponse response, String cpGuid, String aggregatorID, String loginID, String oDataURL, boolean debug){
		String stateIDOfUser = "", gstStateCode = "";
		Map<String,String> typeSetValues = new HashMap<String,String>();
		try{
			if(debug){
				response.getWriter().println("getGSTStateCodeForDealer.stateIDOfUser: "+stateIDOfUser);
			}
			typeSetValues = getTypeValues(response, aggregatorID, debug);
			stateIDOfUser = getUserCustomersDetails(response, cpGuid, aggregatorID, "Region", loginID, oDataURL, debug);
			
			for (String keyValue : typeSetValues.keySet()) {
				if(keyValue.equalsIgnoreCase(stateIDOfUser)){
					if(debug){
						response.getWriter().println("getGSTStateCodeForDealer.keyValue: "+keyValue);
						response.getWriter().println("getGSTStateCodeForDealer.stateIDOfUser: "+stateIDOfUser);
					}
					gstStateCode = typeSetValues.get(keyValue);
				}
			}
			
		}catch (Exception e) {
			gstStateCode = "001";
		}
		
		return gstStateCode;
	}
	
	public Map<String,String> getDealerDetails(HttpServletResponse response, String cpGuid, String aggregatorID, String loginID, String oDataURL, boolean debug) throws IOException{
		Map<String,String> dealerDetails = new HashMap<String,String>();
		String executeURL = "", userPass="", userName="", password="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			if(debug){
				response.getWriter().println("cpGuid: "+cpGuid);
				response.getWriter().println("aggregatorID: "+aggregatorID);
				response.getWriter().println("loginID: "+loginID);
			}
			
			executeURL = oDataURL+"UserCustomers?$filter=PartnerID%20eq%20%27"+cpGuid+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			if(debug)
				response.getWriter().println("executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getDealerDetails-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getDealerDetails-dresults: "+dresults);
			JsonObject userCustomersJsonObj = null;
			if(debug)
				response.getWriter().println("getDealerDetails-Size: "+dresults.size());
			for (int i = 0; i <= dresults.size() - 1; i++) {
				userCustomersJsonObj = (JsonObject) dresults.get(i);
				if(debug)
					response.getWriter().println("userCustomersJsonObj-get(i): "+userCustomersJsonObj);
				dealerDetails.put("Status", "000001");
				dealerDetails.put("Message", "");
				if(userCustomersJsonObj.get("Application").isJsonNull())
					dealerDetails.put("Application", "");
				else
					dealerDetails.put("Application", userCustomersJsonObj.get("Application").getAsString());
				
				if(userCustomersJsonObj.get("IsActive").isJsonNull())
					dealerDetails.put("IsActive", "");
				else
					dealerDetails.put("IsActive", userCustomersJsonObj.get("IsActive").getAsString());
				
				if(userCustomersJsonObj.get("LoginID").isJsonNull())
					dealerDetails.put("LoginID", "");
				else
					dealerDetails.put("LoginID", userCustomersJsonObj.get("LoginID").getAsString());
				
				if(userCustomersJsonObj.get("PartnerID").isJsonNull())
					dealerDetails.put("PartnerID", "");
				else
					dealerDetails.put("PartnerID", userCustomersJsonObj.get("PartnerID").getAsString());
				
				if(userCustomersJsonObj.get("Address1").isJsonNull())
					dealerDetails.put("Address1", "");
				else
					dealerDetails.put("Address1", userCustomersJsonObj.get("Address1").getAsString());
				
				if(userCustomersJsonObj.get("Address2").isJsonNull())
					dealerDetails.put("Address2", "");
				else
					dealerDetails.put("Address2", userCustomersJsonObj.get("Address2").getAsString());
				
				if(userCustomersJsonObj.get("Address3").isJsonNull())
					dealerDetails.put("Address3", "");
				else
					dealerDetails.put("Address3", userCustomersJsonObj.get("Address3").getAsString());
				
				if(userCustomersJsonObj.get("Address4").isJsonNull())
					dealerDetails.put("Address4", "");
				else
					dealerDetails.put("Address4", userCustomersJsonObj.get("Address4").getAsString());
//				dealerDetails.put("Source", userCustomersJsonObj.get("Source").isJsonNull());
				if(userCustomersJsonObj.get("City").isJsonNull())
					dealerDetails.put("City", "");
				else
					dealerDetails.put("City", userCustomersJsonObj.get("City").getAsString());
				
				if(userCustomersJsonObj.get("CountryDesc").isJsonNull())
					dealerDetails.put("CountryDesc", "");
				else
					dealerDetails.put("CountryDesc", userCustomersJsonObj.get("CountryDesc").getAsString());
				
				if(userCustomersJsonObj.get("CountryID").isJsonNull())
					dealerDetails.put("CountryID", "");
				else
					dealerDetails.put("CountryID", userCustomersJsonObj.get("CountryID").getAsString());
				
				if(userCustomersJsonObj.get("DateOfIncorporation").isJsonNull())
					dealerDetails.put("DateOfIncorporation", "");
				else
					dealerDetails.put("DateOfIncorporation", userCustomersJsonObj.get("DateOfIncorporation").getAsString());
				
				if(userCustomersJsonObj.get("District").isJsonNull())
					dealerDetails.put("District", "");
				else
					dealerDetails.put("District", userCustomersJsonObj.get("District").getAsString());
				
				if(userCustomersJsonObj.get("EmailID").isJsonNull())
					dealerDetails.put("EmailID", "");
				else
					dealerDetails.put("EmailID", userCustomersJsonObj.get("EmailID").getAsString());
				
				if(userCustomersJsonObj.get("FaxExtn").isJsonNull())
					dealerDetails.put("FaxExtn", "");
				else
					dealerDetails.put("FaxExtn", userCustomersJsonObj.get("FaxExtn").getAsString());
				
				if(userCustomersJsonObj.get("Fax").isJsonNull())
					dealerDetails.put("Fax", "");
				else
					dealerDetails.put("Fax", userCustomersJsonObj.get("Fax").getAsString());
				
				if(userCustomersJsonObj.get("GSTIN").isJsonNull())
					dealerDetails.put("GSTIN", "");
				else
					dealerDetails.put("GSTIN", userCustomersJsonObj.get("GSTIN").getAsString());
				
				if(userCustomersJsonObj.get("ID").isJsonNull())
					dealerDetails.put("ID", "");
				else
					dealerDetails.put("ID", userCustomersJsonObj.get("ID").getAsString());
				
				if(userCustomersJsonObj.get("Mobile1").isJsonNull())
					dealerDetails.put("Mobile1", "");
				else
					dealerDetails.put("Mobile1", userCustomersJsonObj.get("Mobile1").getAsString());
				
				if(userCustomersJsonObj.get("Name").isJsonNull())
					dealerDetails.put("Name", "");
				else
					dealerDetails.put("Name", userCustomersJsonObj.get("Name").getAsString());
				
				if(userCustomersJsonObj.get("Name2").isJsonNull())
					dealerDetails.put("Name2", "");
				else
					dealerDetails.put("Name2", userCustomersJsonObj.get("Name2").getAsString());
				
				if(userCustomersJsonObj.get("Name3").isJsonNull())
					dealerDetails.put("Name3", "");
				else
					dealerDetails.put("Name3", userCustomersJsonObj.get("Name3").getAsString());
				
				if(userCustomersJsonObj.get("Name4").isJsonNull())
					dealerDetails.put("Name4", "");
				else
					dealerDetails.put("Name4", userCustomersJsonObj.get("Name4").getAsString());
				
				if(userCustomersJsonObj.get("PAN").isJsonNull())
					dealerDetails.put("PAN", "");
				else
					dealerDetails.put("PAN", userCustomersJsonObj.get("PAN").getAsString());
					
				if(userCustomersJsonObj.get("PostalCode").isJsonNull())
					dealerDetails.put("PostalCode", "");
				else
					dealerDetails.put("PostalCode", userCustomersJsonObj.get("PostalCode").getAsString());
				
				if(userCustomersJsonObj.get("CustomerNo").isJsonNull())
					dealerDetails.put("CustomerNo", "");
				else
					dealerDetails.put("CustomerNo", userCustomersJsonObj.get("CustomerNo").getAsString());
				
				if(userCustomersJsonObj.get("SupplyChainPartnerType").isJsonNull())
					dealerDetails.put("SupplyChainPartnerType", "");
				else
					dealerDetails.put("SupplyChainPartnerType", userCustomersJsonObj.get("SupplyChainPartnerType").getAsString());
					
				
				if(userCustomersJsonObj.get("RegionDesc").isJsonNull())
					dealerDetails.put("RegionDesc", "");
				else
					dealerDetails.put("RegionDesc", userCustomersJsonObj.get("RegionDesc").getAsString());
				
				if(userCustomersJsonObj.get("Region").isJsonNull())
					dealerDetails.put("Region", "");
				else
					dealerDetails.put("Region", userCustomersJsonObj.get("Region").getAsString());
				
				if(userCustomersJsonObj.get("LandlineExtn").isJsonNull())
					dealerDetails.put("LandlineExtn", "");
				else
					dealerDetails.put("LandlineExtn", userCustomersJsonObj.get("LandlineExtn").getAsString());
					
				
				if(userCustomersJsonObj.get("Landline").isJsonNull())
					dealerDetails.put("Landline", "");
				else
					dealerDetails.put("Landline", userCustomersJsonObj.get("Landline").getAsString());
					
				
				if(userCustomersJsonObj.get("LegalStatus").isJsonNull())
					dealerDetails.put("LegalStatus", "");
				else
					dealerDetails.put("LegalStatus", userCustomersJsonObj.get("LegalStatus").getAsString());
					
				
				if(userCustomersJsonObj.get("LegalStatusDesc").isJsonNull())
					dealerDetails.put("LegalStatusDesc", "");
				else
					dealerDetails.put("LegalStatusDesc", userCustomersJsonObj.get("LegalStatusDesc").getAsString());
			}
			if(debug)
				response.getWriter().println("userCustomersJsonObj: "+userCustomersJsonObj);
		}catch (Exception e) {
//			gstStateCode = "001";
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("User Customers: "+buffer.toString());
		}
		return dealerDetails;
	}
	
	public String getUserCustomersDetails(HttpServletResponse response, String cpGuid, String aggregatorID, String requiredField, String loginID, String oDataURL, boolean debug){
		String returnValue ="", executeURL = "", userPass="", userName="", password="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataURL+"UserCustomers?$filter=PartnerID%20eq%20%27"+cpGuid+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			if(debug){
				response.getWriter().println("getUserCustomersDetails.httpJsonResult: "+httpJsonResult);
			}
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject userCustomersJsonObj = (JsonObject) dresults.get(i);
				
				if(requiredField.equalsIgnoreCase("Region"))
					returnValue = userCustomersJsonObj.get("Region").getAsString();
				else
					returnValue = "";
			}
		}catch (Exception e) {
			returnValue = "001";
		}
		return returnValue;
	}
	
	public Map getTypeValues(HttpServletResponse response, String aggregatorID, boolean debug){
		String returnValue ="", executeURL = "", userPass="", userName="", password="", oDataURL="";
		JsonObject httpJsonResult = new JsonObject();
		Map<String,String> typeSetValues = new HashMap<String,String>();
		try{
			oDataURL = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataURL+"ConfigTypsetTypeValues?$filter=Typeset%20eq%20%27STATE%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug){
				response.getWriter().println("getTypeValues.STATE.httpJsonResult: "+httpJsonResult);
			}
			
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject typeValuesJsonObj = (JsonObject) dresults.get(i);
				
				typeSetValues.put(typeValuesJsonObj.get("Types").getAsString(), typeValuesJsonObj.get("TypeValue").getAsString());
			}
		}catch (Exception e) {
			typeSetValues.put("001", e.getMessage());
		}
		
		return typeSetValues;
	}
	
	public long convertToMillis(String validTo){
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
		Date date = null;
		long mills = 0;
		try {
			date = (Date)formatter.parse(validTo);
			mills = date.getTime();
		} catch (ParseException e) {
			date = null;
		}
		
		return mills;
	}
	
	public String generateApplicationNo(HttpServletResponse response, Properties properties, boolean debug){
		String applicationNo = "", executeURL="", destURL="", userName="", passWord="", userPass="", aggrID="";
		JsonObject httpPostResponse = new JsonObject();
		JSONObject insertPayload = new JSONObject();
		try{
			destURL = getODataDestinationProperties("URL", "CPIConnect");
			userName = getODataDestinationProperties("User", "CPIConnect");
			passWord = getODataDestinationProperties("Password", "CPIConnect");
			aggrID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userPass = userName+":"+passWord;
			executeURL = destURL+""+properties.getProperty("GetNumberRangeEndPoint");
			
			if (debug) {
				response.getWriter().println("generateApplicationNo.executeURL: "+executeURL);
				response.getWriter().println("generateApplicationNo.destURL: "+destURL);
				response.getWriter().println("generateApplicationNo.userName: "+userName);
				response.getWriter().println("generateApplicationNo.passWord: "+passWord);
				response.getWriter().println("generateApplicationNo.userPass: "+userPass);
				response.getWriter().println("generateApplicationNo.aggrID: "+aggrID);
			}
			
			insertPayload.accumulate("AggregatorID", aggrID);
			insertPayload.accumulate("NumberRangeObject", properties.getProperty("ApplicationNo"));
//			httpPostResponse = executePostURL(executeURL, userPass, response, insertPayload, request, debug);
			httpPostResponse = getHttpURLConnection(executeURL, userPass, insertPayload, response, debug); 
			
			if (debug) {
				response.getWriter().println("generateApplicationNo.httpPostResponse: "+httpPostResponse);
			}
			
			if(! httpPostResponse.has("Error")){
				if ( ! httpPostResponse.get("Status").isJsonNull() &&
						httpPostResponse.get("Status").getAsString().equalsIgnoreCase("000001") ) {
					
					if ( ! httpPostResponse.get("Number").isJsonNull())
						applicationNo = httpPostResponse.get("Number").getAsString();
					else
						applicationNo ="";
				}else{
					applicationNo ="";
				}
			}
			
			if(debug)
				response.getWriter().println("generateApplicationNo-applicationNo: "+applicationNo);
		}catch (Exception e) {
			applicationNo = "";
		}
		
		return applicationNo;
	}
	
	public boolean ifOfferAmountGrtZero(JSONObject inputJSON, boolean debug){
		boolean isGrtThanZero = false;
		String offerAmount = "";
		BigDecimal offerAmountDec = new BigDecimal(0.00);
		BigDecimal zeroValue = new BigDecimal(0.00);
		try{
			offerAmount = inputJSON.getString("OfferAmt");
			if(null != offerAmount && offerAmount.trim().length() > 0 && !offerAmount.trim().equalsIgnoreCase("")){
				if(offerAmount.equalsIgnoreCase("0.00")){
					isGrtThanZero = false;
				}else{
					DecimalFormat df = (DecimalFormat) NumberFormat.getInstance(Locale.US);
					df.setParseBigDecimal(true);
					df.setParseIntegerOnly(false);
					offerAmountDec = (BigDecimal) df.parseObject(offerAmount);
					
					if(offerAmountDec.compareTo(zeroValue) > 0){
						isGrtThanZero = true;
					}else{
						isGrtThanZero = false;
					}
				}
			}else{
				isGrtThanZero = false;
			}
		}catch (Exception e) {
			isGrtThanZero = false;
		}
		
		return isGrtThanZero;
	}
	
	public String getContactPersonDetails(HttpServletRequest request, HttpServletResponse response, String loginID, JSONObject responseScfOfferJsonObj, JSONObject inputJsonObject, boolean debug){
		String message="";
		JsonObject partnerJSON = new JsonObject();
		try{
			partnerJSON = getPartnerDetails(inputJsonObject, response, debug);
			
			if(debug)
				response.getWriter().println("getContactPersonDetails-partnerJSON"+partnerJSON);
			
			JsonObject results = partnerJSON.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(dresults.size() == 0){
				message = "062";
			}else{
				message="";
			}
			
			if(debug){
				response.getWriter().println("getContactPersonDetails-size"+dresults.size());
				response.getWriter().println("getContactPersonDetails-message"+message);
			}
		}catch (Exception e) {
			message = "001";
		}
		return message;
	}
	
	public String validateSCF1Entries(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String aggregatorID, JSONObject scfOffersJson, boolean debug) throws IOException{
		String message="", oDataUrl="", userName="", password="", cpGuid="", cpType="", userPass="", executeURL="";
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("validateSCF1Entries-oDataUrl: "+oDataUrl);
				response.getWriter().println("validateSCF1Entries-aggregatorID: "+aggregatorID);
				response.getWriter().println("validateSCF1Entries-userName: "+userName);
				response.getWriter().println("validateSCF1Entries-password: "+password);
				response.getWriter().println("validateSCF1Entries-userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"SupplyChainFinanceEligibility?$filter=CPGUID%20eq%20%27"+cpGuid+"%27%20and%20CPTypeID%20eq%20%27"+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("validateSCF1Entries-executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(debug){
				response.getWriter().println("validateSCF1Entries-httpJsonResult: "+httpJsonResult);
				response.getWriter().println("validateSCF1Entries-results: "+dresults);
				response.getWriter().println("validateSCF1Entries-resultsSize: "+dresults.size());
			}
			
			if(dresults.size() == 0){
				message= "";
			}else{
				JsonObject scf1JsonObj = null;
				String dateString = "", dateInMillis="", eligibilityStatus="", scf1Guid="", applicationNo="", errorCode="";
				JsonObject scf1AllEntry=null;
				boolean odEligibilityEntry=false;
				for (int i = 0; i <= dresults.size() - 1; i++) {
					scf1AllEntry = dresults.get(i).getAsJsonObject();
					if(debug)
						response.getWriter().println("validateSCF1Entries-scf1AllEntry (i): "+scf1AllEntry);
					if (scf1AllEntry.get("EligibilityTypeID").isJsonNull()
							|| scf1AllEntry.get("EligibilityTypeID").getAsString().equalsIgnoreCase("")) {
						scf1JsonObj = (JsonObject) dresults.get(i);
						// returnValue =
						// userCustomersJsonObj.get("State").getAsString();
						// response.getWriter().println("returnValue:
						// "+returnValue);
						dateString = scf1JsonObj.get("ValidTo").getAsString();
						eligibilityStatus = scf1JsonObj.get("EligibilityStatus").getAsString();
						scf1Guid = scf1JsonObj.get("ID").getAsString();
						applicationNo = scf1JsonObj.get("ApplicationNo").getAsString();
						errorCode = scf1JsonObj.get("ErrorCode").getAsString();
						odEligibilityEntry=true;
					}
				}
				if(!odEligibilityEntry){
					message= "";
				} else {
					if (null == applicationNo || applicationNo.trim().length() == 0)
						applicationNo = "NA";

					if (null == errorCode || errorCode.trim().length() == 0)
						errorCode = "NA";

					if (debug) {
						response.getWriter().println("validateSCF1Entries-dateString: " + dateString);
						response.getWriter().println("validateSCF1Entries-eligibilityStatus: " + eligibilityStatus);
						response.getWriter().println("validateSCF1Entries-scf1Guid: " + scf1Guid);
						response.getWriter().println("validateSCF1Entries-applicationNo: " + applicationNo);
						response.getWriter().println("validateSCF1Entries-errorCode: " + errorCode);
					}

					if (null != dateString && dateString.trim().length() > 0
							&& !dateString.equalsIgnoreCase("0000000000000")
							&& !dateString.equalsIgnoreCase("/Date(0)/")) {
						dateInMillis = dateString.substring(6, 19);
						long tempDateInMillis = Long.parseLong(dateInMillis);
						// Calendar calendar = Calendar.getInstance();
						// calendar.setTimeInMillis(tempDateInMillis);
						java.sql.Date validTo = new java.sql.Date(tempDateInMillis);
						java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
						String validToStr = "" + validTo;
						String currentDateStr = "" + currentDate;

						if (debug) {
							response.getWriter().println("dateString: " + dateString);
							response.getWriter().println("dateInMillis: " + dateInMillis);
							response.getWriter().println("tempDateInMillis: " + tempDateInMillis);
							response.getWriter().println("validTo: " + validTo);
							response.getWriter().println("currentDate: " + currentDate);
							response.getWriter().println("validToStr: " + validToStr);
							response.getWriter().println("currentDateStr: " + currentDateStr);
						}

						if (validTo.after(currentDate) || currentDateStr.equalsIgnoreCase(validToStr)) {
							if (debug)
								response.getWriter().println("Valid to is greater than/equal to current date");

							if (eligibilityStatus.equalsIgnoreCase("000001")) {
								JsonObject scfInsertObj = new JsonObject();
								if (debug)
									response.getWriter().println("Sending back scf entries back to UI");

								JsonParser jsonParser = new JsonParser();
								JsonObject jo = (JsonObject) jsonParser.parse(scf1JsonObj.toString());
								scfInsertObj.add("d", jo);
								if (debug)
									response.getWriter().println("Existing Entry: " + jo);

								message = scfInsertObj.toString();
							} else {
								if (scfOffersJson.getString("EligibilityStatus") != null
										&& scfOffersJson.getString("EligibilityStatus").equalsIgnoreCase("000002")) {
									if (eligibilityStatus != null && eligibilityStatus.equalsIgnoreCase("000002")) {
										boolean isDeletionSuccess = false;
										String tableName = "SupplyChainFinanceEligibility";
										isDeletionSuccess = deleteEntry(request, response, scf1Guid, tableName,
												oDataUrl, userPass, aggregatorID, debug);
										if (debug)
											response.getWriter().println("Deletion done: " + isDeletionSuccess);

										if (isDeletionSuccess)
											message = "";
										else
											message = "999";
									}
								} else {
									// Error Message 003 - User Not Eligible
									if (debug)
										response.getWriter().println("User not eligible");
									// //message =
									// "003|"+applicationNo+"|"+errorCode;
									// //Commented and added below line on
									// 4-Aug-20 for 'busy dialognot closing
									// issue'
									message = "003|AppNo" + applicationNo + "|Error" + errorCode;
								}
							}
						} else {
							// Delete and proceed to SCF Apply
							boolean isDeletionSuccess = false;
							String tableName = "SupplyChainFinanceEligibility";
							isDeletionSuccess = deleteEntry(request, response, scf1Guid, tableName, oDataUrl, userPass,
									aggregatorID, debug);
							if (debug)
								response.getWriter().println("Deletion done: " + isDeletionSuccess);

							if (isDeletionSuccess)
								message = "";
							else
								message = "999";
						}
					} else {
						if (debug)
							response.getWriter().println("Date is not available in table");
						// Case where ValidTo date is not updated/Not eligible
						// message = "003";
						message = "003|AppNo=" + applicationNo + "|Error=" + errorCode;
					}
				}	
			}
			
			if(debug)
				response.getWriter().println("validateSCF1Entries-message: "+message);
		}catch (Exception e) {
			message = "001";
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception-validateSCF1Entries: "+e.getMessage()+"---> Full Stack Trace: "+buffer.toString());
			}
		}
		
		return message;
	}
	
	public boolean deleteEntry(HttpServletRequest request, HttpServletResponse response, String uniqueKey, String tableName, String oDataUrl, String userPass, String aggregatorID, boolean debug){
		boolean isSuccess = false;
		String executeURL = "";
		try{
			executeURL = oDataUrl+tableName+"('"+uniqueKey+"')";
			
			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("DELETE");
			connection.setRequestProperty("Accept","application/json");
			connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encodeToString(userPass.getBytes()));
			connection.setDoInput(true);
			
			if(connection.getResponseCode() == 204 || connection.getResponseCode() == 200 || connection.getResponseCode() == 202){
				isSuccess = true;
			}
			
		}catch (Exception e) {
			isSuccess = false;
		}
		
		return isSuccess;
	}
	
	public String generateGUID(int fieldLength){
		String guid="";
		String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
		if(fieldLength == 32){
			guid = UUID.randomUUID().toString().replace("-", "");
		} else if(fieldLength == 36){
			guid = UUID.randomUUID().toString();
		} else if(fieldLength == 16){
			StringBuilder salt = new StringBuilder();
	        Random rnd = new Random();
	        while (salt.length() < fieldLength) {
	            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
	            salt.append(SALTCHARS.charAt(index));
	        }
	        
	        guid = salt.toString();
		} else if(fieldLength == 10){
			long number = (long) Math.floor(Math.random() * 9_000_000_000L) + 1_000_000_000L;
			guid = ""+number;
		}else{
			guid = "Unrecognized length request for a GUID";
		}
		
		return guid;
	}
	
	public JsonObject callProprietor(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String aggregatorID, String loginID, String oDataURL, JsonObject scfApplyResults, Map<String, String> scfOfferResponseMap, 
			String bpLegalStatus, Properties properties, boolean debug) throws IOException{
		String cpGuid="", message="", expiryDate="", corpID="", cpType="";
		JsonObject proprietorWSResponse = new JsonObject();
		JsonObject proprietorCalWSResponse = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject signerDetails = new JsonObject();
		JsonObject scfInsertResponse = new JsonObject();
		Map<String,String> dealerMasterData = new HashMap<String,String>();
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		Map<String,String> accountsWSResponse = new HashMap<String,String>();
		
		try{
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			
			signerDetails = getPartnerDetails(inputJsonObject, response, debug);//BPHeader
			if (cpType.equalsIgnoreCase("60") ) {
				dealerMasterData = getVendorDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
			}else if(cpType.equalsIgnoreCase("01") ){
				dealerMasterData = getDealerDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug); //UserCustomers
			}
			pyeactEntries = getPYEACTEntries(request, response, inputJsonObject, loginID, debug); //PYEACT typeset values
			userAccountsEntry = getUserAccounts(request, response, inputJsonObject, loginID, pyeactEntries, oDataURL, aggregatorID, debug);
			if(debug){
				response.getWriter().println("callProprietorWS-signerDetails: "+signerDetails);
				response.getWriter().println("callProprietorWS-cpGuid: "+cpGuid);
				for (String key : dealerMasterData.keySet()) {
					response.getWriter().println("callProprietorWS-dealerMasterData: "+key + " - " + dealerMasterData.get(key));
				}
				for (String key : pyeactEntries.keySet()) {
					response.getWriter().println("callProprietorWS-pyeactEntries: "+key + " - " + pyeactEntries.get(key));
				}
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("callProprietorWS-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
			}
			
			if(userAccountsEntry.get("Error").equalsIgnoreCase("076")){
				message = "076";
				errorResponseObj.addProperty("EligibilityStatus", "000000");
				errorResponseObj.addProperty("ErrorCode", message);
				errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
				proprietorWSResponse.add("d", errorResponseObj);
			}else{
				accountsWSResponse = callAccountsWS(request, response, userAccountsEntry, loginID, aggregatorID, cpGuid, oDataURL, inputJsonObject, debug);
				
				if(accountsWSResponse.get("Error").equalsIgnoreCase("054")){
					message = "054";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					proprietorWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("059")){
					message = "059";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", accountsWSResponse.get("Message"));
					proprietorWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("067")){
					message = "067";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					proprietorWSResponse.add("d", errorResponseObj);
				}
				else if(accountsWSResponse.get("Error").equalsIgnoreCase("065")){
					message = "065";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					proprietorWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("066")){
					message = "066";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					proprietorWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("001")){
					message = "001";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					proprietorWSResponse.add("d", errorResponseObj);
				}else{
//					Expiry Date Logic 
					Date currentDate = new Date(System.currentTimeMillis());
					expiryDate = getExpiryDate(request, response, currentDate, debug);

//					Get CORPID
					corpID = getCorpID();
					
//					Call Proprietor WS
					proprietorCalWSResponse = callProprietorESignContractWS(request, response, inputJsonObject, signerDetails, dealerMasterData, userAccountsEntry, accountsWSResponse, corpID, expiryDate, scfApplyResults, scfOfferResponseMap, aggregatorID, bpLegalStatus, debug);
					if(debug)
						response.getWriter().println("proprietorCalWSResponse: "+proprietorCalWSResponse);
					if(proprietorCalWSResponse.get("Status").getAsString().equalsIgnoreCase("000001")){
						//Call SCF Insert
//						scfInsertResponse = insertIntoSCF(request, response, inputJsonObject, scfOfferResponseMap, scfApplyResults, proprietorCalWSResponse, aggregatorID, oDataURL, debug);
						proprietorWSResponse = insertIntoSCF(request, response, inputJsonObject, scfOfferResponseMap, scfApplyResults, proprietorCalWSResponse, aggregatorID, oDataURL, debug);
//						proprietorWSResponse.addProperty("EligibilityStatus", "000001");
						proprietorWSResponse.get("d").getAsJsonObject().addProperty("EligibilityStatus", "000001");
						if(debug)
							response.getWriter().println("callPropriter-proprietorWSResponse.SCFInsert: "+proprietorWSResponse);
					}else{
						message = "059";
						errorResponseObj.addProperty("EligibilityStatus", "000000");
						errorResponseObj.addProperty("ErrorCode", message);
						errorResponseObj.addProperty("ErrorMessage", proprietorCalWSResponse.get("Message").getAsString());
						proprietorWSResponse.add("d", errorResponseObj);
					}
				}
			}
		}catch (Exception e) {
//			response.getWriter().println(e.getLocalizedMessage());
			message = "001";
			errorResponseObj.addProperty("EligibilityStatus", "000000");
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", e.getLocalizedMessage());
			proprietorWSResponse.add("d", errorResponseObj);
		}
		
		return proprietorWSResponse;
	}
	
	public JsonObject callProprietorESignContractWS(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			JsonObject signerDetails, Map<String, String> dealerMasterData, Map<String, String> userAccountsEntry, 
			Map<String, String> accountsWSResponse, String corpID, String expiryDate, JsonObject scfApplyResults, 
			Map<String, String> scfOfferResponseMap, String aggregatorID, String bpLegalStatus, boolean debug) throws IOException{
		
		JsonObject propESignContractResponse = new JsonObject();
		JsonArray contactPersonResults = new JsonArray();
		String corporateName="", signerDOB="", signerEmail="", signerMobile="", signerPAN="", signerName="", dateOfIncorporation="", signOrder="";
		String dateOfIncorporationStr="", signerDOBStr="", currentDateStr="", currentTimeStr="";
		Map<String, String> payloadForPropContractWS = new HashMap<String, String>();
		try{
			contactPersonResults = getSignerDetails(request, response, signerDetails, debug);
			corporateName = getCorporateName(request, response, debug);
			
			//Extract Signer Information
			JsonObject results = signerDetails.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			JsonObject headerObj  = new JsonObject();
			JsonObject contactPersonObj  = new JsonObject();
			
			for (int i = 0; i <= dresults.size() - 1; i++) {
				headerObj = (JsonObject) dresults.get(i);
				if(debug)
					response.getWriter().println("callProprietorESignContractWS-BPContactPersons: "+headerObj.get("BPContactPersons").getAsJsonObject());
				
				dateOfIncorporation = headerObj.get("IncorporationDate").getAsString();
				contactPersonObj = headerObj.get("BPContactPersons").getAsJsonObject();
			}
			
			if(debug)
				response.getWriter().println("callProprietorESignContractWS-contactPersonObj: "+contactPersonObj);
			JsonArray bpContactPersonResults = contactPersonObj.get("results").getAsJsonArray();
			
			if(debug){
				response.getWriter().println("callProprietorESignContractWS-contactPersonResults: "+bpContactPersonResults);
				response.getWriter().println("callProprietorESignContractWS-contactPersonResults-size: "+bpContactPersonResults.size());
			}
			
			JsonObject signerItemObj  = new JsonObject();
			for(int i=0 ; i<bpContactPersonResults.size() ; i++){
				signerItemObj = (JsonObject) bpContactPersonResults.get(i);
				if(debug)
					response.getWriter().println("callProprietorESignContractWS-signerItemObj: "+signerItemObj);
				
				signerDOB = signerItemObj.get("DOB").getAsString();
				signerEmail = signerItemObj.get("EmailID").getAsString();
				signerMobile = signerItemObj.get("Mobile").getAsString();
				signerPAN = signerItemObj.get("PanNo").getAsString();
				signerName = signerItemObj.get("Name1").getAsString()+" "+signerItemObj.get("Name2").getAsString();
				signOrder = signerItemObj.get("SigningOrder").getAsString();
			}
			
			dateOfIncorporationStr = convertLongDateToString(response, dateOfIncorporation, debug);
			signerDOBStr = convertLongDateToString(response, signerDOB, debug);
			currentDateStr = getCurrentDateYYYYMMDDFormat(response, debug);
			currentTimeStr = getCurrentTimeHHMMSSFormat(response, debug);
			if(debug){
				response.getWriter().println("callProprietorESignContractWS-dateOfIncorporationStr: "+dateOfIncorporationStr);
				response.getWriter().println("callProprietorESignContractWS-signerDOBStr: "+signerDOBStr);
				response.getWriter().println("callProprietorESignContractWS-currentDateStr: "+currentDateStr);
				response.getWriter().println("callProprietorESignContractWS-currentTimeStr: "+currentTimeStr);
				
				response.getWriter().println("callProprietorESignContractWS-inputJsonObject: "+inputJsonObject);
				response.getWriter().println("callProprietorESignContractWS-scfApplyResults: "+new Gson().toJson(scfApplyResults));
				
				for (String key : scfOfferResponseMap.keySet()) {
					response.getWriter().println("callProprietorESignContractWS1-scfOfferResponseMap: "+key + " - " + scfOfferResponseMap.get(key));
				}
				
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("callProprietorESignContractWS1-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
			}
			
			payloadForPropContractWS.put("AadharNumber", "");
			payloadForPropContractWS.put("AddlnPeriodInterestRateSpread", scfOfferResponseMap.get("ADDLNPRDINTRateSP"));
			payloadForPropContractWS.put("AddlnTenorOfPayment", scfOfferResponseMap.get("AddlnTenorOfPymt"));
//			payloadForPropContractWS.put("Constitution", scfOfferResponseMap.get("ConstitutionType"));
			payloadForPropContractWS.put("Constitution", bpLegalStatus);
			payloadForPropContractWS.put("CorporateName", corporateName); //From Attribute PYDLRC
			payloadForPropContractWS.put("CPType", inputJsonObject.getString("CPTypeID")); //From inputJSON
			payloadForPropContractWS.put("CurrentDate", currentDateStr); //yyyyMMdd format
			payloadForPropContractWS.put("CurrentTime", currentTimeStr); //hhmmss
			payloadForPropContractWS.put("DateOfBirth", signerDOBStr); //Signer DOB
			payloadForPropContractWS.put("DateOfIncorporation", dateOfIncorporationStr); //From BPHeader
			payloadForPropContractWS.put("DealerName", accountsWSResponse.get("CustomerName")); //From AccountsWS - CustomerName
			payloadForPropContractWS.put("DefaultInterestSpread", scfOfferResponseMap.get("DefIntSpread"));
			payloadForPropContractWS.put("EmailAddress", signerEmail); //Signer EMAIL
			payloadForPropContractWS.put("ExpiryDate", expiryDate);
			payloadForPropContractWS.put("FacilityAmount", scfOfferResponseMap.get("OfferAmt"));
			payloadForPropContractWS.put("InterestRateSpread", scfOfferResponseMap.get("InterestRateSpread"));
			payloadForPropContractWS.put("IPAddress", inputJsonObject.getString("ApplicantID"));//From inputJSON 
//			payloadForPropContractWS.put("LeadId", scfApplyResults.get("LeadID").getAsString());//From SCF Apply
			payloadForPropContractWS.put("LeadId", scfApplyResults.get("ApplicationNo").getAsString());//From SCF Apply
			payloadForPropContractWS.put("MCLR6MRate", scfOfferResponseMap.get("MCLR6Rate"));
			payloadForPropContractWS.put("MobileNumber", signerMobile); //Signer Mobile
			payloadForPropContractWS.put("PAN", signerPAN); //Signer PAN
			payloadForPropContractWS.put("ProcessingFee", scfOfferResponseMap.get("ProcessingFee"));
			payloadForPropContractWS.put("ProprietorAccount", userAccountsEntry.get("BankAccntNo")); //From UserAccounts
			payloadForPropContractWS.put("ProprietorName", "");//Not needed
			payloadForPropContractWS.put("TenorOfPayment", scfOfferResponseMap.get("TenorOfPayment"));
			payloadForPropContractWS.put("TestRun", inputJsonObject.getString("TestRun")); //From inputJSON
			
			payloadForPropContractWS.put("SignerAadhar", "");
			payloadForPropContractWS.put("SignerEmailId", signerEmail);
			payloadForPropContractWS.put("SignerName", signerName);
			payloadForPropContractWS.put("SignOrder", signOrder);
			
			if(debug){
				for (String key : payloadForPropContractWS.keySet()) {
					response.getWriter().println("callProprietorESignContractWS1-payloadForPropContractWS: "+key + " - " + payloadForPropContractWS.get(key));
				}
			}
			
			ProprietorESignClient propESignClient = new ProprietorESignClient();
			propESignContractResponse = propESignClient.proprietorESignContract(request, response, payloadForPropContractWS, aggregatorID, debug);
			
		}catch (Exception e) {
			response.getWriter().println("Error-callProprietorESignContractWS: "+e.getLocalizedMessage());
		}
		return propESignContractResponse;
	}
	
	public String getCurrentTimeHHMMSSFormat(HttpServletResponse response, boolean debug){
		String returnValue = "";
		try {
			Date currentDate=new Date(System.currentTimeMillis());
			SimpleDateFormat df2 = new SimpleDateFormat("HHmmss");
			returnValue = df2.format(currentDate);
			if(debug)
				response.getWriter().println("getCurrentTimeHHMMSSFormat-returnValue: "+returnValue);
		} catch (Exception e) {
			returnValue = "";
		}
		return returnValue;
	}
	
	public String getCurrentDateYYYYMMDDFormat(HttpServletResponse response, boolean debug){
		String returnValue = "";
		try {
			Date currentDate=new Date(System.currentTimeMillis());
			SimpleDateFormat df2 = new SimpleDateFormat("yyyyMMdd");
			returnValue = df2.format(currentDate);
			if(debug)
				response.getWriter().println("getCurrentDateYYYYMMDDFormat-returnValue: "+returnValue);
		} catch (Exception e) {
			returnValue = "";
		}
		return returnValue;
	}
	
	public String convertLongDateToString(HttpServletResponse response, String dateString, boolean debug){
		String returnValue = "", longDateValue = "";
		long dateValue=0;
		try{
			if(debug)
			response.getWriter().println("convertLongDateToString-dateString: "+dateString);
			
			longDateValue = dateString.substring((dateString.indexOf("(")+1), dateString.lastIndexOf(")"));
			if(debug)
				response.getWriter().println("convertLongDateToString-longDateValue: "+longDateValue);
			
			dateValue = Long.parseLong(longDateValue);
			if(debug)
				response.getWriter().println("convertLongDateToString-dateValue: "+dateValue);
			
			Date date=new Date(dateValue);
			SimpleDateFormat df2 = new SimpleDateFormat("yyyyMMdd");
			returnValue = df2.format(date);
			if(debug)
				response.getWriter().println("convertLongDateToString-returnValue: "+returnValue);
		}catch (Exception e) {
			returnValue = "";
		}
		return returnValue;
	}
	
	public String getCorporateName(HttpServletRequest request, HttpServletResponse response, boolean debug){
		String corpName = "", executeURL="", aggregatorID = "", types="", userPass="", userName="", password="", oDataUrl="";
		Map<String,String> acntypData = new HashMap<String,String>();
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"AttributeTypesetTypes?$filter=Typeset%20eq%20%27PYDLRC%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Type%20eq%20%27CORPNAME%27";
			if(debug)
				response.getWriter().println("getCorporateName-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getCorporateName-dresults: "+dresults);
			
			if(dresults.size() == 0){
				corpName = "";
			}else{
				corpName = "";
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					corpName = typeSetJsonObj.get("Name").getAsString();
					if(debug)
						response.getWriter().println("getCorporateName-corpName: "+corpName);
					/*acntypData.put(typeSetJsonObj.get("Type").getAsString(), typeSetJsonObj.get("Name").getAsString());
					if(debug){
						response.getWriter().println("getACNTYPEntries-Type: "+typeSetJsonObj.get("Type").getAsString());
						response.getWriter().println("getACNTYPEntries-Name: "+typeSetJsonObj.get("Name").getAsString());
					}*/
				}
			}
		}catch (Exception e) {
			corpName = "";
		}
		return corpName;
	}
	
	public JsonArray getSignerDetails(HttpServletRequest request, HttpServletResponse response, JsonObject signerDetails, boolean debug) throws IOException{
		JsonArray contactPersonResults = new JsonArray();
		
		try{
			if(debug)
				response.getWriter().println("getSignerDetails-signerDetails: "+signerDetails);
			JsonObject results = signerDetails.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(debug){
				response.getWriter().println("getSignerDetails-results: "+dresults);
				response.getWriter().println("getSignerDetails-results-size: "+dresults.size());
			}
			
			JsonObject headerObj  = new JsonObject();
			JsonObject contactPersonObj  = new JsonObject();
			
			for (int i = 0; i <= dresults.size() - 1; i++) {
				headerObj = (JsonObject) dresults.get(i);
				if(debug)
					response.getWriter().println("BPContactPersons: "+headerObj.get("BPContactPersons").getAsJsonObject());
				contactPersonObj = headerObj.get("BPContactPersons").getAsJsonObject();
			}
			
			if(debug)
				response.getWriter().println("getSignerDetails-contactPersonObj: "+contactPersonObj);
			contactPersonResults = contactPersonObj.get("results").getAsJsonArray();
			
			if(debug){
				response.getWriter().println("getSignerDetails-contactPersonResults: "+contactPersonResults);
				response.getWriter().println("getSignerDetails-contactPersonResults-size: "+contactPersonResults.size());
			}
		}catch (Exception e) {
			response.getWriter().println("Exception in getSignerDetails: "+e.getLocalizedMessage());
		}
		
		return contactPersonResults;
	}
	
	public String getExpiryDate(HttpServletRequest request, HttpServletResponse response, Date currentDate, boolean debug) throws IOException{
		String returnDate="";
		try{
			DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");  
//			Date date = new Date(System.currentTimeMillis());
			if(debug)
				response.getWriter().println("getExpiryDate-currentDate: "+currentDate);
			Calendar c = Calendar.getInstance();
			c.setTime(currentDate);
			c.add(Calendar.YEAR, 1);
			c.add(Calendar.DATE, -1);
			java.util.Date newDate = c.getTime();
			if(debug)
				response.getWriter().println("getExpiryDate-newDate: "+newDate);
			returnDate = dateFormat.format(newDate);
		}catch (Exception e) {
			returnDate="";
		}
		
		if(debug)
			response.getWriter().println("getExpiryDate-returnDate: "+returnDate);
		
		return returnDate;
	}
	
	public Map<String, String> callAccountsWS(HttpServletRequest request, HttpServletResponse response, Map<String, String> userAccountsEntry, 
			String loginID, String aggregatorID, String cpGuid1, String oDataURL, JSONObject inputJsonObject, boolean debug) throws IOException{
		AccountClient accountClient = new AccountClient();
		Map<String, String> accountsResponseMap = new HashMap<String, String>();
		Map<String, String> userRegResponseMap = new HashMap<String, String>();
		Map<String, String> accountsWSResponseMap = new HashMap<String, String>();
		Map<String, String> accountTypesMap = new HashMap<String, String>();
		boolean hasUserRegistered = true, isValidAccType = false;
		String accountTypeFromWS = "", accountStatusFromWS="", accountStatusCode="", accountTypeDesc="";
		try{
//			1. Call UserRegistrations
			userRegResponseMap = getUserRegDetails(request, response, loginID, aggregatorID, oDataURL, debug);
			for (String key : userRegResponseMap.keySet()) {
				/*if(debug)
					response.getWriter().println("callAccounts-userRegResponseMap: "+key + " - " + userRegResponseMap.get(key));*/
				if(key.equalsIgnoreCase("Error")){
					if(userRegResponseMap.get(key).equalsIgnoreCase("054") || userRegResponseMap.get(key).equalsIgnoreCase("001")){
						hasUserRegistered = false;
						break;
					}else{
						if(! userRegResponseMap.get("UserRegStatus").equalsIgnoreCase("000002")){
							hasUserRegistered = false;
							break;
						}
					}
				}
			}
			
			if(debug)
				response.getWriter().println("callAccounts-hasUserRegistered: "+hasUserRegistered);
			
			if(hasUserRegistered){
//				2. Call Accounts WS
				accountTypeFromWS = "";
				accountStatusFromWS="";
				
				accountsWSResponseMap = accountClient.callAccountsWebservice(request, response, userAccountsEntry, userRegResponseMap, aggregatorID, debug);
				if(debug){
					for (String key : accountsWSResponseMap.keySet()){
						response.getWriter().println("callAccountsWS-accountsWSResponseMap:"+key+"--Value: "+accountsWSResponseMap.get(key));
					}
				}
				if(accountsWSResponseMap.get("Error").equalsIgnoreCase("059")){
					accountsResponseMap.put("Error", "059");
					accountsResponseMap.put("Message", accountsWSResponseMap.get("Message"));
				}else{
//					3. Account Type Matching and other validations
					accountTypesMap = getACNTYPEntries(request, response, inputJsonObject, loginID, debug);
					accountTypeFromWS = accountsWSResponseMap.get("AccountType");
					
					if(null == accountTypeFromWS || accountTypeFromWS.trim().equalsIgnoreCase("") || accountTypeFromWS.trim().length() == 0)
						accountTypeFromWS = "";
					
					for (String key : accountTypesMap.keySet()){
						if(key.equalsIgnoreCase(accountTypeFromWS)){
							isValidAccType=true;
							break;
						}
					}
					
					if(! isValidAccType){
						accountsResponseMap.put("Error", "067");
						accountsResponseMap.put("Message", "");
					}else{
						accountStatusFromWS = accountsWSResponseMap.get("AccountStatus");
						
						if(accountStatusFromWS.equalsIgnoreCase("Closed")){
							accountsResponseMap.put("Error", "065");
							accountsResponseMap.put("Message", "");
						}else if(accountStatusFromWS.equalsIgnoreCase("Inactive")){
							accountsResponseMap.put("Error", "066");
							accountsResponseMap.put("Message", "");
						}else if(accountStatusFromWS.equalsIgnoreCase("Dormant")){
							accountsResponseMap.put("Error", "066");
							accountsResponseMap.put("Message", "");
						}else{
							accountsResponseMap.put("Error", "");
							accountsResponseMap.put("Message", "");
							//Taking descriptions
							accountStatusCode=""; accountTypeDesc="";
							accountTypeDesc = getAccountTypeDesc(request, response, aggregatorID, accountsWSResponseMap.get("AccountType"), debug);
							accountStatusCode = getAccountStatusCode(request, response, aggregatorID, accountsWSResponseMap.get("AccountStatus"), debug);
							
							accountsResponseMap.put("AccountStatusCode", accountStatusCode);
							accountsResponseMap.put("AccountTypeDesc", accountTypeDesc);
							
							for (String key : accountsWSResponseMap.keySet()){
//								response.getWriter().println("callAccountsWS-accountsWSResponseMap:"+key+"--Value: "+accountsWSResponseMap.get(key));
								accountsResponseMap.put(key, accountsWSResponseMap.get(key));
							}
							
							
							if(debug){
								response.getWriter().println("callAccountsWS-accountStatusCode: "+accountStatusCode);
								response.getWriter().println("callAccountsWS-accountTypeDesc: "+accountTypeDesc);
							}
						}
					}
				}
			}else{
				accountsResponseMap.put("Error", "054");
				accountsResponseMap.put("Message", "");
			}
		}catch (Exception e) {
			accountsResponseMap.put("Error", "001");
			accountsResponseMap.put("Message", e.getMessage());
		}
		
		if(debug){
			for (String key : accountsResponseMap.keySet()) {
				response.getWriter().println("callAccounts-accountsResponseMap: "+key + " - " + accountsResponseMap.get(key));
			}
		}
		return accountsResponseMap;
	}
	
	public String getAccountStatusCode(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String accountStatusFromWS, boolean debug) throws IOException{
		String accountStatusCode = "", executeURL="", userPass="", userName="", password="", oDataUrl="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("getAccountStatusCode-oDataUrl: "+oDataUrl);
				response.getWriter().println("getAccountStatusCode-aggregatorID: "+aggregatorID);
				response.getWriter().println("getAccountStatusCode-userName: "+userName);
				response.getWriter().println("getAccountStatusCode-password: "+password);
				response.getWriter().println("getAccountStatusCode-userPass: "+userPass);
			}
			executeURL = oDataUrl+"ConfigTypesetTypes?$filter=Typeset%20eq%20%27PYACST%27%20and%20TypesName%20eq%20%27"+accountStatusFromWS+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getAccountStatusCode-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getAccountStatusCode-dresults: "+dresults);
			if(dresults.size() == 0){
				accountStatusCode = "Not Maintained";
			}else{
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					accountStatusCode = typeSetJsonObj.get("Types").getAsString();
					if(debug){
						response.getWriter().println("getAccountStatusCode-Types: "+typeSetJsonObj.get("Types").getAsString());
						response.getWriter().println("getAccountStatusCode-TypesName: "+typeSetJsonObj.get("TypesName").getAsString());
					}
				}
			}
		}catch (Exception e) {
			accountStatusCode="Not Maintained";
		}
		return accountStatusCode;
	}
	
	public String getAccountStatusDesc(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String accountStatusFromWS, boolean debug) throws IOException{
		String accountStatusDesc = "", executeURL="", userPass="", userName="", password="", oDataUrl="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("getAccountStatusDesc-oDataUrl: "+oDataUrl);
				response.getWriter().println("getAccountStatusDesc-aggregatorID: "+aggregatorID);
				response.getWriter().println("getAccountStatusDesc-userName: "+userName);
				response.getWriter().println("getAccountStatusDesc-password: "+password);
				response.getWriter().println("getAccountStatusDesc-userPass: "+userPass);
			}
			executeURL = oDataUrl+"ConfigTypesetTypes?$filter=Typeset%20eq%20%27PYACST%27%20and%20Types%20eq%20%27"+accountStatusFromWS+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getAccountStatusDesc-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getAccountStatusDesc-dresults: "+dresults);
			if(dresults.size() == 0){
				accountStatusDesc = "Not Maintained";
			}else{
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					accountStatusDesc = typeSetJsonObj.get("TypesName").getAsString();
					if(debug){
						response.getWriter().println("getAccountStatusDesc-Types: "+typeSetJsonObj.get("Types").getAsString());
						response.getWriter().println("getAccountStatusDesc-TypesName: "+typeSetJsonObj.get("TypesName").getAsString());
					}
				}
			}
		}catch (Exception e) {
			accountStatusDesc="Not Maintained";
		}
		return accountStatusDesc;
	}
	
	public String getAccountTypeDesc(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String accountTypeFromWS, boolean debug) throws IOException{
		String accountTypeDesc = "", executeURL="", userPass="", userName="", password="", oDataUrl="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("getAccountTypeDesc-oDataUrl: "+oDataUrl);
				response.getWriter().println("getAccountTypeDesc-aggregatorID: "+aggregatorID);
				response.getWriter().println("getAccountTypeDesc-userName: "+userName);
				response.getWriter().println("getAccountTypeDesc-password: "+password);
				response.getWriter().println("getAccountTypeDesc-userPass: "+userPass);
			}
			executeURL = oDataUrl+"ConfigTypesetTypes?$filter=Typeset%20eq%20%27PYACTY%27%20and%20Types%20eq%20%27"+accountTypeFromWS+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getAccountTypeDesc-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getAccountTypeDesc-dresults: "+dresults);
			if(dresults.size() == 0){
				accountTypeDesc = "Not Maintained";
			}else{
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					accountTypeDesc = typeSetJsonObj.get("TypesName").getAsString();
					if(debug){
						response.getWriter().println("getAccountTypeDesc-Types: "+typeSetJsonObj.get("Types").getAsString());
						response.getWriter().println("getAccountTypeDesc-TypesName: "+typeSetJsonObj.get("TypesName").getAsString());
					}
				}
			}
		}catch (Exception e) {
			accountTypeDesc="Not Maintained";
		}
		return accountTypeDesc;
	}
	
	public Map<String, String> getACNTYPEntries(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject1, 
			String loginID, boolean debug){
		String message = "", executeURL="", aggregatorID = "", types="", userPass="", userName="", password="", oDataUrl="";
		Map<String,String> acntypData = new HashMap<String,String>();
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"AttributeTypesetTypes?$filter=Typeset%20eq%20%27ACNTYP%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getACNTYPEntries-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getACNTYPEntries-dresults: "+dresults);
			
			if(dresults.size() == 0){
//				message = "119";
				acntypData.put("Error", "000");
			}else{
				acntypData.put("Error", "");
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					acntypData.put(typeSetJsonObj.get("Type").getAsString(), typeSetJsonObj.get("Name").getAsString());
					if(debug){
						response.getWriter().println("getACNTYPEntries-Type: "+typeSetJsonObj.get("Type").getAsString());
						response.getWriter().println("getACNTYPEntries-Name: "+typeSetJsonObj.get("Name").getAsString());
					}
				}
			}
		}catch (Exception e) {
			acntypData.put("Error", "001");
		}
		return acntypData;
	}
	
	public JsonObject registerUser(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, 
			String aggregatorID, String corpID, Properties properties, boolean debug) throws IOException{
		String message = "", tableGuid="", userRegID="";
		Map<String, String> userRegWSMap = new HashMap<String, String>();
		UserRegistrationClient userRegistrationClient = new UserRegistrationClient();
		JsonObject userRegInsrJsonRes = new JsonObject();
		try{
			tableGuid = generateGUID(36);
			userRegID = generateGUID(32);
			
			//Call WS
			userRegWSMap = userRegistrationClient.callUserRegWS(request, response, inputJsonObject, userRegID, corpID, aggregatorID, debug);
			
			if(debug){
				for (String key : userRegWSMap.keySet()) {
					response.getWriter().println("registerUser-userRegWSMap: "+key + " - " + userRegWSMap.get(key));
				}
			}
			
			if(userRegWSMap.get("Status").equalsIgnoreCase("000001")){
				//Insert into COMN/UserRegistrations
				userRegInsrJsonRes = insertUserRegistration(request, response, inputJsonObject, tableGuid.toUpperCase(), userRegID, corpID, aggregatorID, loginID, debug);
				
				userRegInsrJsonRes.get("d").getAsJsonObject().addProperty("ErrorCode", "");
				userRegInsrJsonRes.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
			}else{
//				message = "027";
				JsonObject errorResponseObj = new JsonObject();
				errorResponseObj.addProperty("ErrorCode", "027");
				errorResponseObj.addProperty("ErrorMessage", properties.getProperty("027")+" "+userRegWSMap.get("Message"));
				userRegInsrJsonRes.add("d", errorResponseObj);
			}
			
		}catch (Exception e) {
			JsonObject errorResponseObj = new JsonObject();
			errorResponseObj.addProperty("ErrorCode", "027");
			errorResponseObj.addProperty("ErrorMessage", properties.getProperty("027")+" "+e.getLocalizedMessage());
			userRegInsrJsonRes.add("d", errorResponseObj);
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception-UserRegistrationClient: "+e.getMessage()+"---> Full Stack Trace: "+buffer.toString());
			}
		}
		if(debug)
			response.getWriter().println("registerUser-userRegInsrJsonRes: "+userRegInsrJsonRes);
		
		return userRegInsrJsonRes;
	}
	
	public long getCreatedOnDate(){
		long createdOn=0;
		 try {
			 SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			 SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			 sdf1.setTimeZone(TimeZone.getTimeZone("IST"));
			 Date createdAtDate = sdf2.parse(sdf1.format(new Date()));
			 createdOn = createdAtDate.getTime();
			 
			/*Calendar cal = Calendar.getInstance();
			createdOn = cal.getTimeInMillis();*/
		} catch (Exception e) {
			createdOn=0;
		}
		 return createdOn;
	}
	
	public String getCreatedAtTime(){
		String createdAt="";
		 try {
			 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			 sdf.setTimeZone(TimeZone.getTimeZone("IST"));
			 createdAt = sdf.format(new Date());
			 createdAt = "PT"+createdAt.substring(11, 13) +"H"+createdAt.substring(14, 16)+"M"+createdAt.substring(17, createdAt.length())+"S";
			/*Calendar cal = Calendar.getInstance();
			createdAt = "PT"+cal.get(Calendar.HOUR_OF_DAY)+"H"+cal.get(Calendar.MINUTE)+"M"+cal.get(Calendar.SECOND)+"S";*/
		} catch (Exception e) {
			createdAt="PT00H00M00S";
		}
		 return createdAt;
	}
	
	public JsonObject insertUserRegistration(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String tableGuid, 
			String userRegID, String corpID, String aggregatorID, String loginID, boolean debug) throws IOException{
		String userName="", password="", userPass="", executeURL="", createdAt="", oDataUrl="";
		JSONObject userRegPayLoad = new JSONObject();
		JsonObject httpJsonResult = new JsonObject();
		long createdOnInMillis = 0;
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserRegistrations";
			
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			if(debug){
				response.getWriter().println("insertUserRegistration-CommnGuid: "+tableGuid);
				response.getWriter().println("insertUserRegistration-aggregatorID: "+aggregatorID);
				response.getWriter().println("insertUserRegistration-AliasID: "+inputJsonObject.getString("AliasID"));
				response.getWriter().println("insertUserRegistration-CorpId: "+inputJsonObject.getString("CorpId"));
				response.getWriter().println("insertUserRegistration-createdAt: "+createdAt);
				response.getWriter().println("insertUserRegistration-loginID: "+loginID);
				response.getWriter().println("insertUserRegistration-createdOnInMillis: "+createdOnInMillis);
				response.getWriter().println("insertUserRegistration-userRegID: "+userRegID);
				response.getWriter().println("insertUserRegistration-UserId: "+inputJsonObject.getString("UserId"));
				response.getWriter().println("insertUserRegistration-executeURL: "+executeURL);
			}
				
//			cpGuid = inputJsonObject.getString("CPGUID");
//			cpType = inputJsonObject.getString("CPTypeID");
			
			
			userRegPayLoad.accumulate("AggregatorID", aggregatorID);
			userRegPayLoad.accumulate("AliasID", inputJsonObject.getString("AliasID"));
			userRegPayLoad.accumulate("CommnGuid", tableGuid);
			userRegPayLoad.accumulate("CorpId", inputJsonObject.getString("CorpId"));
			userRegPayLoad.accumulate("CreatedAt", createdAt);
			userRegPayLoad.accumulate("CreatedBy", loginID);
			userRegPayLoad.accumulate("CreatedOn",  "/Date("+createdOnInMillis+")/");
			userRegPayLoad.accumulate("LoginId", loginID);
			userRegPayLoad.accumulate("UserRegId", userRegID);
			userRegPayLoad.accumulate("UserId", inputJsonObject.getString("UserId"));
			userRegPayLoad.accumulate("UserRegStatus", "000001");
			
			if(debug)
				response.getWriter().println("insertUserRegistration-userRegPayLoad.toString: "+userRegPayLoad.toString());
			
			if(debug)
				response.getWriter().println("executeURL: "+executeURL);
			
			httpJsonResult = executePostURL(executeURL, userPass, response, userRegPayLoad, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("post insertUserRegistration-httpJsonResult: "+httpJsonResult);
		
		}catch (Exception e) {
			JsonObject errorResponseObj = new JsonObject();
			errorResponseObj.addProperty("ErrorCode", "027");
			errorResponseObj.addProperty("ErrorMessage", e.getMessage());
			httpJsonResult.add("d", errorResponseObj);
		}
		
		return httpJsonResult;
	}
	
	public Map<String, String> getUserRegDetailsForReg(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, String aggregatorID, String oDataURL, boolean debug) throws IOException{
		String executeURL = "", userPass="", userName="", password="", corpId="", userId="";
		Map<String, String> userRegResponseMap = new HashMap<String, String>();
		JsonObject httpJsonResult = new JsonObject();
		try{
			corpId = inputJsonObject.getString("CorpId");
			userId=inputJsonObject.getString("UserId");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			if(debug){
				response.getWriter().println("aggregatorID: "+aggregatorID);
				response.getWriter().println("loginID: "+loginID);
			}
			
//			executeURL = oDataURL+"UserRegistrations?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginId%20eq%20%27"+loginID+"%27";
			executeURL = oDataURL+"UserRegistrations?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20CorpId%20eq%20%27"+corpId+"%27%20and%20UserId%20eq%20%27"+userId+"%27";
			if(debug)
				response.getWriter().println("getUserRegDetails-executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getUserRegDetails-httpJsonResult: "+httpJsonResult);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getUserRegDetails-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getUserRegDetails-dresults: "+dresults);
			JsonObject userRegistrationJsonObj = null;
			if(debug)
				response.getWriter().println("getUserRegDetails-Size: "+dresults.size());
			
			if(dresults.size() >  0){
				userRegResponseMap.put("Error", "012");
			}else{
				for (int i = 0; i <= dresults.size() - 1; i++) {
					userRegistrationJsonObj = (JsonObject) dresults.get(i);
					if(debug)
						response.getWriter().println("userCustomersJsonObj-get(i): "+userRegistrationJsonObj);
					userRegResponseMap.put("Error", "");
					
					if(userRegistrationJsonObj.get("CorpId").isJsonNull())
						userRegResponseMap.put("CorpId", "");
					else
						userRegResponseMap.put("CorpId", userRegistrationJsonObj.get("CorpId").getAsString());
					
					if(userRegistrationJsonObj.get("UserId").isJsonNull())
						userRegResponseMap.put("UserId", "");
					else
						userRegResponseMap.put("UserId", userRegistrationJsonObj.get("UserId").getAsString());
					
					if(userRegistrationJsonObj.get("AliasID").isJsonNull())
						userRegResponseMap.put("AliasID", "");
					else
						userRegResponseMap.put("AliasID", userRegistrationJsonObj.get("AliasID").getAsString());
					
					if(userRegistrationJsonObj.get("UserRegId").isJsonNull())
						userRegResponseMap.put("UserRegId", "");
					else
						userRegResponseMap.put("UserRegId", userRegistrationJsonObj.get("UserRegId").getAsString());
					
					if(userRegistrationJsonObj.get("UserRegStatus").isJsonNull()){
						userRegResponseMap.put("UserRegStatus", "");
					}else{
						userRegResponseMap.put("UserRegStatus", userRegistrationJsonObj.get("UserRegStatus").getAsString());
						if(! userRegistrationJsonObj.get("UserRegStatus").getAsString().equalsIgnoreCase("000002")){
//							break;
						}
					}
					
					if(userRegistrationJsonObj.get("LoginId").isJsonNull())
						userRegResponseMap.put("LoginId", "");
					else
						userRegResponseMap.put("LoginId", userRegistrationJsonObj.get("LoginId").getAsString());
				}
			}
		}catch (Exception e) {
			userRegResponseMap.put("Error", "001");
		}
		if(debug){
			for (String key : userRegResponseMap.keySet()) {
				response.getWriter().println("getUserRegDetails-userRegResponseMap: "+key + " - " + userRegResponseMap.get(key));
			}
		}
		
		return userRegResponseMap;
	}
	
	public Map<String, String> getUserRegDetails(HttpServletRequest request, HttpServletResponse response, String loginID, 
			String aggregatorID, String oDataURL, boolean debug) throws IOException{
		String executeURL = "", userPass="", userName="", password="",registrationFor="";
		Map<String, String> userRegResponseMap = new HashMap<String, String>();
		JsonObject httpJsonResult = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			if(debug){
				response.getWriter().println("aggregatorID: "+aggregatorID);
				response.getWriter().println("loginID: "+loginID);
			}
			executeURL = oDataURL+"UserRegistrations?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginId%20eq%20%27"+loginID+"%27";
			
//			executeURL = oDataURL+"UserRegistrations?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginId%20eq%20%27"+loginID+"%27%20and%20RegistrationFor%20ne%20%27B2BIZ%27";
			if(debug)
				response.getWriter().println("getUserRegDetails-executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getUserRegDetails-httpJsonResult: "+httpJsonResult);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getUserRegDetails-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getUserRegDetails-dresults: "+dresults);
			JsonObject userRegistrationJsonObj = null;
			if(debug)
				response.getWriter().println("getUserRegDetails-Size: "+dresults.size());
			
			if(dresults.size() ==  0){
				userRegResponseMap.put("Error", "054");
			}else{
				boolean isCorrectStatus=true;
				for (int i = 0; i <= dresults.size() - 1; i++) {
					
					registrationFor ="";
					userRegistrationJsonObj = (JsonObject) dresults.get(i);
					if(debug)
						response.getWriter().println("userCustomersJsonObj-get(i): "+userRegistrationJsonObj);
					
					if ( ! userRegistrationJsonObj.get("RegistrationFor").isJsonNull())
						registrationFor = userRegistrationJsonObj.get("RegistrationFor").getAsString();
					
					if ( ! registrationFor.equalsIgnoreCase("B2BIZ")) {
						
						userRegResponseMap.put("Error", "");
						
						if(userRegistrationJsonObj.get("CorpId").isJsonNull())
							userRegResponseMap.put("CorpId", "");
						else
							userRegResponseMap.put("CorpId", userRegistrationJsonObj.get("CorpId").getAsString());
						
						if(userRegistrationJsonObj.get("UserId").isJsonNull())
							userRegResponseMap.put("UserId", "");
						else
							userRegResponseMap.put("UserId", userRegistrationJsonObj.get("UserId").getAsString());
						
						if(userRegistrationJsonObj.get("AliasID").isJsonNull())
							userRegResponseMap.put("AliasID", "");
						else
							userRegResponseMap.put("AliasID", userRegistrationJsonObj.get("AliasID").getAsString());
						
						if(userRegistrationJsonObj.get("UserRegId").isJsonNull())
							userRegResponseMap.put("UserRegId", "");
						else
							userRegResponseMap.put("UserRegId", userRegistrationJsonObj.get("UserRegId").getAsString());
						
						if(userRegistrationJsonObj.get("UserRegStatus").isJsonNull()){
							userRegResponseMap.put("UserRegStatus", "");
						}else{
							userRegResponseMap.put("UserRegStatus", userRegistrationJsonObj.get("UserRegStatus").getAsString());
							if(! userRegistrationJsonObj.get("UserRegStatus").getAsString().equalsIgnoreCase("000002")){
								isCorrectStatus = false;
//							break;
							}
						}
						
						if(userRegistrationJsonObj.get("LoginId").isJsonNull())
							userRegResponseMap.put("LoginId", "");
						else
							userRegResponseMap.put("LoginId", userRegistrationJsonObj.get("LoginId").getAsString());
						break;
						
					}else
					{
						userRegResponseMap.put("Error", "054");
					}
					
				}
//				if(! isCorrectStatus){
//					userRegResponseMap.clear();
//					userRegResponseMap.put("Error", "054");
//				}
			}
		}catch (Exception e) {
			userRegResponseMap.put("Error", "001");
		}
		if(debug){
			for (String key : userRegResponseMap.keySet()) {
				response.getWriter().println("getUserRegDetails-userRegResponseMap: "+key + " - " + userRegResponseMap.get(key));
			}
		}
		
		return userRegResponseMap;
	}
	
	public JsonObject callPartnership(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String aggregatorID, String loginID, String oDataURL, JsonObject scfApplyResults, Map<String, String> scfOfferResponseMap, 
			String bpLegalStatus, Properties properties, boolean debug) throws IOException{
		String cpGuid="", message="", expiryDate="", corpID="", cpType="";
		JsonObject partnershipWSResponse = new JsonObject();
		JsonObject partnershipCalWSResponse = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject signerDetails = new JsonObject();
		Map<String,String> dealerMasterData = new HashMap<String,String>();
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		Map<String,String> accountsWSResponse = new HashMap<String,String>();
		
		try{
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			signerDetails = getPartnerDetails(inputJsonObject, response, debug);//BPHeader
			if(cpType.equalsIgnoreCase("60")){
				dealerMasterData = getVendorDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug);
			}else if(cpType.equalsIgnoreCase("01")){
				dealerMasterData = getDealerDetails(response, cpGuid, aggregatorID, loginID, oDataURL, debug); //UserCustomers
			}
			pyeactEntries = getPYEACTEntries(request, response, inputJsonObject, loginID, debug); //PYEACT typeset values
			userAccountsEntry = getUserAccounts(request, response, inputJsonObject, loginID, pyeactEntries, oDataURL, aggregatorID, debug);
			if(debug){
				response.getWriter().println("callPartnership-signerDetails: "+signerDetails);
				response.getWriter().println("callPartnership-cpGuid: "+cpGuid);
				for (String key : dealerMasterData.keySet()) {
					response.getWriter().println("callPartnership-dealerMasterData: "+key + " - " + dealerMasterData.get(key));
				}
				for (String key : pyeactEntries.keySet()) {
					response.getWriter().println("callPartnership-pyeactEntries: "+key + " - " + pyeactEntries.get(key));
				}
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("callPartnership-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
			}
			
			if(userAccountsEntry.get("Error").equalsIgnoreCase("076")){
				message = "076";
				errorResponseObj.addProperty("EligibilityStatus", "000000");
				errorResponseObj.addProperty("ErrorCode", message);
				errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
				partnershipWSResponse.add("d", errorResponseObj);
			}else{
				accountsWSResponse = callAccountsWS(request, response, userAccountsEntry, loginID, aggregatorID, cpGuid, oDataURL, inputJsonObject, debug);
				if(debug){
					for (String key : accountsWSResponse.keySet()) {
						response.getWriter().println("callPartnership-accountsWSResponse: "+key + " - " + accountsWSResponse.get(key));
					}
				}
								
				if(accountsWSResponse.get("Error").equalsIgnoreCase("054")){
					message = "054";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					partnershipWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("059")){
					message = "059";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", accountsWSResponse.get("Message"));
					partnershipWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("067")){
					message = "067";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					partnershipWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("065")){
					message = "065";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					partnershipWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("066")){
					message = "066";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					partnershipWSResponse.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("001")){
					message = "001";
					errorResponseObj.addProperty("EligibilityStatus", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					partnershipWSResponse.add("d", errorResponseObj);
				}else{
//					Expiry Date Logic 
					Date currentDate = new Date(System.currentTimeMillis());
					expiryDate = getExpiryDate(request, response, currentDate, debug);

//					Get CORPID
					corpID = getCorpID();
					
//					Call Partnership WS
					partnershipCalWSResponse = callPartnershipESignContractWS(request, response, inputJsonObject, signerDetails, dealerMasterData, userAccountsEntry, accountsWSResponse, corpID, expiryDate, scfApplyResults, scfOfferResponseMap, aggregatorID, bpLegalStatus, debug);
					
					if(debug)
						response.getWriter().println("partnershipCalWSResponse.Status: "+partnershipCalWSResponse.get("Status").getAsString());
					
					if(partnershipCalWSResponse.get("Status").getAsString().equalsIgnoreCase("000001")){
						//Call SCF Insert
//						scfInsertResponse = insertIntoSCF(request, response, inputJsonObject, scfOfferResponseMap, scfApplyResults, partnershipCalWSResponse, aggregatorID, oDataURL, debug);
						partnershipWSResponse = insertIntoSCF(request, response, inputJsonObject, scfOfferResponseMap, scfApplyResults, partnershipCalWSResponse, aggregatorID, oDataURL, debug);
//						partnershipWSResponse.addProperty("EligibilityStatus", "000001");
						partnershipWSResponse.get("d").getAsJsonObject().addProperty("EligibilityStatus", "000001");
						if(debug)
							response.getWriter().println("callPartnership-partnershipWSResponse.SCFInsert: "+partnershipWSResponse);
					}else{
						message = "059";
						errorResponseObj.addProperty("EligibilityStatus", "000000");
						errorResponseObj.addProperty("ErrorCode", message);
						errorResponseObj.addProperty("ErrorMessage", partnershipCalWSResponse.get("Message").getAsString());
						partnershipWSResponse.add("d", errorResponseObj);
					}
					if(debug)
						response.getWriter().println("callPartnership-partnershipCalWSResponse: "+partnershipCalWSResponse);
				}
			}
		}catch (Exception e) {
//			response.getWriter().println(e.getLocalizedMessage());
			message = "001";
			errorResponseObj.addProperty("EligibilityStatus", "000000");
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", e.getLocalizedMessage());
			partnershipWSResponse.add("d", errorResponseObj);
		}
		
		
		
		return partnershipWSResponse;
	}
	
	public JsonObject insertIntoSCF(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, Map<String, String> scfOfferResponseMap,
			JsonObject scfApplyResults, JsonObject eSignWSResponse, String aggregatorID, String oDataUrl, boolean debug) throws IOException{
		JsonObject scfInsertResponseObj = new JsonObject();
		JSONObject scfInsertPayLoad = new JSONObject();
		String executeURL="", createdAt="", userName="", password="", userPass="", cpGuid="", cpType="", scfGuid="", ddbActive="", applicantID="", createdBy="";
		CommonUtils commonUtils = new CommonUtils();
		long createdOnInMillis = 0;
		try{
			createdBy = commonUtils.getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			
			if(debug){
				response.getWriter().println("insertIntoSCF-createdBy"+createdBy);
				response.getWriter().println("insertIntoSCF-createdOnInMillis"+createdOnInMillis);
				response.getWriter().println("insertIntoSCF-createdAt"+createdAt);
			}
			
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			cpGuid = inputJsonObject.getString("CPGUID");
			cpType = inputJsonObject.getString("CPTypeID");
			scfGuid = inputJsonObject.getString("SCFGUID");
			ddbActive = inputJsonObject.getString("DDBActive");
			applicantID = inputJsonObject.getString("ApplicantID");
			if(debug)
				response.getWriter().println("insertIntoSCF-guid: "+scfGuid);
			
			scfInsertPayLoad.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			scfInsertPayLoad.accumulate("CreatedBy", createdBy);
			scfInsertPayLoad.accumulate("CreatedAt", createdAt);
			
			
			scfInsertPayLoad.accumulate("ID", scfGuid);
			scfInsertPayLoad.accumulate("CPGUID", cpGuid);
			scfInsertPayLoad.accumulate("CPTypeID", cpType);
			scfInsertPayLoad.accumulate("AggregatorID", aggregatorID);
			
			if(null == scfOfferResponseMap.get("OfferAmt") || scfOfferResponseMap.get("OfferAmt").trim().length() == 0)
				scfInsertPayLoad.accumulate("OfferAmt", "0.00");
			else
				scfInsertPayLoad.accumulate("OfferAmt", scfOfferResponseMap.get("OfferAmt"));
			
			scfInsertPayLoad.accumulate("OfferTenure", scfOfferResponseMap.get("OfferTenure"));
			scfInsertPayLoad.accumulate("Rate", scfOfferResponseMap.get("Rate"));
			scfInsertPayLoad.accumulate("NoOfChequeReturns", scfOfferResponseMap.get("NoOfChequeReturns"));
			
			if(null == scfOfferResponseMap.get("PaymentDelayDays12Months") || scfOfferResponseMap.get("PaymentDelayDays12Months").trim().length() == 0)
				scfInsertPayLoad.accumulate("PaymentDelayDays12Months", "0.00");
			else
				scfInsertPayLoad.accumulate("PaymentDelayDays12Months", scfOfferResponseMap.get("PaymentDelayDays12Months"));
			
			scfInsertPayLoad.accumulate("BusinessVintageOfDealer", scfOfferResponseMap.get("BusinessVintageOfDealer"));
			
			if(null == scfOfferResponseMap.get("PurchasesOf12Months") || scfOfferResponseMap.get("PurchasesOf12Months").trim().length() == 0)
				scfInsertPayLoad.accumulate("PurchasesOf12Months", "0.00");
			else
				scfInsertPayLoad.accumulate("PurchasesOf12Months", scfOfferResponseMap.get("PurchasesOf12Months"));
			
			scfInsertPayLoad.accumulate("DealersOverallScoreByCorp", scfOfferResponseMap.get("DealersOverallScoreByCorp"));
			scfInsertPayLoad.accumulate("CorpRating", scfOfferResponseMap.get("CorpRating"));
			scfInsertPayLoad.accumulate("DealerVendorFlag", scfOfferResponseMap.get("DealerVendorFlag"));
			scfInsertPayLoad.accumulate("ConstitutionType", scfOfferResponseMap.get("ConstitutionType"));
			
			if(null == scfOfferResponseMap.get("MaxLimitPerCorp") || scfOfferResponseMap.get("MaxLimitPerCorp").trim().length() ==  0)
				scfInsertPayLoad.accumulate("MaxLimitPerCorp", "0.00");
			else
				scfInsertPayLoad.accumulate("MaxLimitPerCorp", scfOfferResponseMap.get("MaxLimitPerCorp"));
			
			if(null == scfOfferResponseMap.get("salesOf12Months") || scfOfferResponseMap.get("salesOf12Months").trim().length() == 0)
				scfInsertPayLoad.accumulate("salesOf12Months", "0.00");
			else
				scfInsertPayLoad.accumulate("salesOf12Months", scfOfferResponseMap.get("salesOf12Months"));
			
			scfInsertPayLoad.accumulate("Currency", scfOfferResponseMap.get("Currency"));
			scfInsertPayLoad.accumulate("StatusID", "000001");
			
			if(null == scfOfferResponseMap.get("MCLR6Rate") || scfOfferResponseMap.get("MCLR6Rate").trim().length() == 0)
				scfInsertPayLoad.accumulate("MCLR6Rate", "0.00");
			else
				scfInsertPayLoad.accumulate("MCLR6Rate", scfOfferResponseMap.get("MCLR6Rate"));
			
			scfInsertPayLoad.accumulate("InterestRateSpread", scfOfferResponseMap.get("InterestRateSpread"));
			scfInsertPayLoad.accumulate("TenorOfPayment", scfOfferResponseMap.get("TenorOfPayment"));
			scfInsertPayLoad.accumulate("ADDLNPRDINTRateSP", scfOfferResponseMap.get("ADDLNPRDINTRateSP"));
			scfInsertPayLoad.accumulate("AddlnTenorOfPymt", scfOfferResponseMap.get("AddlnTenorOfPymt"));
			scfInsertPayLoad.accumulate("DefIntSpread", scfOfferResponseMap.get("DefIntSpread"));
			
			if(null == scfOfferResponseMap.get("ProcessingFee") || scfOfferResponseMap.get("ProcessingFee").trim().length() == 0)
				scfInsertPayLoad.accumulate("ProcessingFee", "0.00");
			else
				scfInsertPayLoad.accumulate("ProcessingFee", scfOfferResponseMap.get("ProcessingFee"));
			
			scfInsertPayLoad.accumulate("EContractID", eSignWSResponse.get("ContractId").getAsString());
			scfInsertPayLoad.accumulate("ECustomerID", eSignWSResponse.get("CustomerId").getAsString());
			scfInsertPayLoad.accumulate("ApplicationNo", scfApplyResults.get("ApplicationNo").getAsString());
			scfInsertPayLoad.accumulate("ApplicantID", applicantID);
			
			if(null == scfOfferResponseMap.get("InterestSpread") || scfOfferResponseMap.get("InterestSpread").trim().length() == 0)
				scfInsertPayLoad.accumulate("InterestSpread", "0.00");
			else
				scfInsertPayLoad.accumulate("InterestSpread", scfOfferResponseMap.get("InterestSpread"));
			
			scfInsertPayLoad.accumulate("DDBActive", ddbActive);
			
			if(null == scfOfferResponseMap.get("ProcessFeePerc") || scfOfferResponseMap.get("ProcessFeePerc").trim().length() == 0)
				scfInsertPayLoad.accumulate("ProcessFeePerc", "0.00");
			else
				scfInsertPayLoad.accumulate("ProcessFeePerc", scfOfferResponseMap.get("ProcessFeePerc"));
			
			if(debug)
				response.getWriter().println("insertIntoSCF-scfInsertPayLoad.toString: "+scfInsertPayLoad.toString());
			
			executeURL = oDataUrl+"SupplyChainFinances";
			
			if(debug)
				response.getWriter().println("insertIntoSCF-executeURL: "+executeURL);
			
			scfInsertResponseObj = executePostURL(executeURL, userPass, response, scfInsertPayLoad, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("post SCF-scfInsertResponseObj: "+scfInsertResponseObj);
		}catch (Exception e) {
			JsonObject errorResponseObj = new JsonObject();
			errorResponseObj.addProperty("ErrorCode", "001");
			errorResponseObj.addProperty("ErrorMessage", e.getMessage());
			scfInsertResponseObj.add("d", errorResponseObj);
		}
		
		return scfInsertResponseObj;
	}
	
	public JsonObject callPartnershipESignContractWS(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			JsonObject signerDetails, Map<String, String> dealerMasterData, Map<String, String> userAccountsEntry, 
			Map<String, String> accountsWSResponse, String corpID, String expiryDate, JsonObject scfApplyResults, 
			Map<String, String> scfOfferResponseMap, String aggregatorID, String bpLegalStatus, boolean debug) throws IOException{
//		debug = true;
		JsonObject partESignContractResponse = new JsonObject();
		JsonArray contactPersonResults = new JsonArray();
		String corporateName="", dateOfIncorporation="";
		
		String dateOfIncorporationStr="", signerDOBStr="", currentDateStr="", currentTimeStr="";
		Map<String, String> payloadForPartContractWS = new HashMap<String, String>();
		try{
			contactPersonResults = getSignerDetails(request, response, signerDetails, debug);
			corporateName = getCorporateName(request, response, debug);
			
			//Extract Signer Information
			JsonObject results = signerDetails.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			JsonObject headerObj  = new JsonObject();
			JsonObject contactPersonObj  = new JsonObject();
			
			for (int i = 0; i <= dresults.size() - 1; i++) {
				headerObj = (JsonObject) dresults.get(i);
				if(debug)
					response.getWriter().println("callPartnershipESignContractWS-BPContactPersons: "+headerObj.get("BPContactPersons").getAsJsonObject());
				
				dateOfIncorporation = headerObj.get("IncorporationDate").getAsString();
				contactPersonObj = headerObj.get("BPContactPersons").getAsJsonObject();
			}
			if(debug)
				response.getWriter().println("callPartnershipESignContractWS-contactPersonObj: "+contactPersonObj);
			JsonArray bpContactPersonResults = contactPersonObj.get("results").getAsJsonArray();
			
			if(debug){
				response.getWriter().println("callPartnershipESignContractWS-contactPersonResults: "+bpContactPersonResults);
				response.getWriter().println("callPartnershipESignContractWS-contactPersonResults-size: "+bpContactPersonResults.size());
			}
			
			/*String[][] partnerNameArray = new String[1][bpContactPersonResults.size()];
			String[][] aadharNumberArray = new String[1][bpContactPersonResults.size()];
			String[][] dateOfBirthArray = new String[1][bpContactPersonResults.size()];
			String[][] emailAddressArray = new String[1][bpContactPersonResults.size()];
			String[][] mobileNumberArray = new String[1][bpContactPersonResults.size()];
			String[][] panNumberArray = new String[1][bpContactPersonResults.size()];
			
			String[] signerAadharNumber = new String[bpContactPersonResults.size()];
			String[] signerEmailId = new String[bpContactPersonResults.size()];
			String[] signerName = new String[bpContactPersonResults.size()];
			String[] signerOrder = new String[bpContactPersonResults.size()];*/
			
			Map<String, String> signerMap = null;
			List<Map<String, String>> signerData = new ArrayList<>();
			
			Map<String, String> partnerMap = null;
			List<Map<String, String>> partnerData = new ArrayList<>();
			
			String signerDOB="";
			JsonObject signerItemObj  = new JsonObject();
			for(int i=0 ; i<bpContactPersonResults.size() ; i++){
				signerMap = new HashMap<String, String>();
				partnerMap = new HashMap<String, String>();
				signerDOB = ""; signerDOBStr="";
				signerItemObj = (JsonObject) bpContactPersonResults.get(i);
				if(debug)
					response.getWriter().println("callPartnershipESignContractWS-signerItemObj: "+signerItemObj);
				
				signerDOB = signerItemObj.get("DOB").getAsString();
				signerDOBStr = convertLongDateToString(response, signerDOB, debug);
				
				partnerMap.put("AadharNumber", "");
				partnerMap.put("DateOfBirth", signerDOBStr);
				partnerMap.put("EmailAddress", signerItemObj.get("EmailID").getAsString());
				partnerMap.put("MobileNumber", signerItemObj.get("Mobile").getAsString());
				partnerMap.put("PANNumber", signerItemObj.get("PanNo").getAsString());
				partnerMap.put("PartnerName", signerItemObj.get("Name1").getAsString()+" "+signerItemObj.get("Name2").getAsString());
				
				partnerData.add(i, partnerMap);
				
				/*partnerNameArray[0][i] = signerItemObj.get("Name1").getAsString()+" "+signerItemObj.get("Name2").getAsString();
				aadharNumberArray[0][i] = "";
				dateOfBirthArray[0][i] = signerDOBStr;
				emailAddressArray[0][i] = signerItemObj.get("EmailID").getAsString();
				mobileNumberArray[0][i] = signerItemObj.get("Mobile").getAsString();
				panNumberArray[0][i] = signerItemObj.get("PanNo").getAsString();*/
				
				signerMap.put("SignerAadharNumber", "");
				signerMap.put("SignerEmailId", signerItemObj.get("EmailID").getAsString());
				signerMap.put("SignerName", signerItemObj.get("Name1").getAsString()+" "+signerItemObj.get("Name2").getAsString());
				signerMap.put("SignOrder", signerItemObj.get("SigningOrder").getAsString());
				
				signerData.add(i, signerMap);
				/*signerAadharNumber[i] = "";
				signerEmailId[i] = signerItemObj.get("EmailID").getAsString();
				signerName[i] = signerItemObj.get("Name1").getAsString()+" "+signerItemObj.get("Name2").getAsString();
				signerOrder[i] = signerItemObj.get("SigningOrder").getAsString();*/
			}
			
			dateOfIncorporationStr = convertLongDateToString(response, dateOfIncorporation, debug);
//			signerDOBStr = convertLongDateToString(response, signerDOB, debug);
			currentDateStr = getCurrentDateYYYYMMDDFormat(response, debug);
			currentTimeStr = getCurrentTimeHHMMSSFormat(response, debug);
			if(debug){
				response.getWriter().println("callPartnershipESignContractWS-dateOfIncorporationStr: "+dateOfIncorporationStr);
//				response.getWriter().println("callPartnershipESignContractWS-signerDOBStr: "+signerDOBStr);
				response.getWriter().println("callPartnershipESignContractWS-currentDateStr: "+currentDateStr);
				response.getWriter().println("callPartnershipESignContractWS-currentTimeStr: "+currentTimeStr);
				
				response.getWriter().println("callPartnershipESignContractWS-inputJsonObject: "+inputJsonObject);
				response.getWriter().println("callPartnershipESignContractWS-scfApplyResults: "+new Gson().toJson(scfApplyResults));
				
				for (String key : scfOfferResponseMap.keySet()) {
					response.getWriter().println("callPartnershipESignContractWS-scfOfferResponseMap: "+key + " - " + scfOfferResponseMap.get(key));
				}
				
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("callPartnershipESignContractWS-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
				
				response.getWriter().println("partnerData.size(): "+partnerData.size());
				for(int i=0; i<partnerData.size() ; i++){
					response.getWriter().println("DateOfBirth ("+i+"): "+partnerData.get(i).get("DateOfBirth"));
					response.getWriter().println("EmailAddress ("+i+"): "+partnerData.get(i).get("EmailAddress"));
					response.getWriter().println("MobileNumber ("+i+"): "+partnerData.get(i).get("MobileNumber"));
					response.getWriter().println("PANNumber ("+i+"): "+partnerData.get(i).get("PANNumber"));
					response.getWriter().println("PartnerName ("+i+"): "+partnerData.get(i).get("PartnerName"));
				}
				
				response.getWriter().println("signerData.size(): "+signerData.size());
				for(int i=0; i<signerData.size() ; i++){
					response.getWriter().println("SignerEmailId ("+i+"): "+signerData.get(i).get("SignerEmailId"));
					response.getWriter().println("SignerName ("+i+"): "+signerData.get(i).get("SignerName"));
					response.getWriter().println("SignOrder ("+i+"): "+signerData.get(i).get("SignOrder"));
				}
			}
			
			payloadForPartContractWS.put("AadharNumber", "");
			payloadForPartContractWS.put("AddlnPeriodInterestRateSpread", scfOfferResponseMap.get("ADDLNPRDINTRateSP"));
			payloadForPartContractWS.put("AddlnTenorOfPayment", scfOfferResponseMap.get("AddlnTenorOfPymt"));
//			payloadForPartContractWS.put("Constitution", scfOfferResponseMap.get("ConstitutionType"));
			payloadForPartContractWS.put("Constitution", bpLegalStatus);
			payloadForPartContractWS.put("CorporateName", corporateName); //From Attribute PYDLRC
			payloadForPartContractWS.put("CPType", inputJsonObject.getString("CPTypeID")); //From inputJSON
			payloadForPartContractWS.put("CurrentDate", currentDateStr); //yyyyMMdd format
			payloadForPartContractWS.put("CurrentTime", currentTimeStr); //hhmmss
			payloadForPartContractWS.put("DateOfBirth", signerDOBStr); //Signer DOB
			payloadForPartContractWS.put("DateOfIncorporation", dateOfIncorporationStr); //From BPHeader
			payloadForPartContractWS.put("DealerName", accountsWSResponse.get("CustomerName")); //From AccountsWS - CustomerName
			payloadForPartContractWS.put("DefaultInterestSpread", scfOfferResponseMap.get("DefIntSpread"));
			payloadForPartContractWS.put("ExpiryDate", expiryDate);
			payloadForPartContractWS.put("FacilityAmount", scfOfferResponseMap.get("OfferAmt"));
			payloadForPartContractWS.put("InterestRateSpread", scfOfferResponseMap.get("InterestRateSpread"));
			payloadForPartContractWS.put("IPAddress", inputJsonObject.getString("ApplicantID"));//From inputJSON 
			payloadForPartContractWS.put("LeadId", scfApplyResults.get("ApplicationNo").getAsString());//From SCF Apply
			payloadForPartContractWS.put("MCLR6MRate", scfOfferResponseMap.get("MCLR6Rate"));
			payloadForPartContractWS.put("ProcessingFee", scfOfferResponseMap.get("ProcessingFee"));
			payloadForPartContractWS.put("PartnerAccount", userAccountsEntry.get("BankAccntNo")); //From UserAccounts
			payloadForPartContractWS.put("ProprietorName", "");//Not needed
			payloadForPartContractWS.put("TenorOfPayment", scfOfferResponseMap.get("TenorOfPayment"));
			payloadForPartContractWS.put("TestRun", inputJsonObject.getString("TestRun")); //From inputJSON
			
//			payloadForPartContractWS.put("EmailAddress", signerEmail); //Signer EMAIL
//			payloadForPartContractWS.put("LeadId", scfApplyResults.get("LeadID").getAsString());//From SCF Apply
//			payloadForPartContractWS.put("MobileNumber", signerMobile); //Signer Mobile
//			payloadForPartContractWS.put("PAN", signerPAN); //Signer PAN
			/*payloadForPartContractWS.put("SignerAadhar", "");
			payloadForPartContractWS.put("SignerEmailId", signerEmail);
			payloadForPartContractWS.put("SignerName", signerName);
			payloadForPartContractWS.put("SignOrder", signOrder);*/
			
			if(debug){
				for (String key : payloadForPartContractWS.keySet()) {
					response.getWriter().println("callPartnershipESignContractWS-payloadForPartContractWS: "+key + " - " + payloadForPartContractWS.get(key));
				}
			}
			
			PartnershipESignClient partnerESignClient = new PartnershipESignClient();
			partESignContractResponse = partnerESignClient.partnershipESignContract(request, response, payloadForPartContractWS, aggregatorID, partnerData, signerData, debug);
			
			if(debug)
				response.getWriter().println("partESignContractResponse: "+partESignContractResponse);
		}catch (Exception e) {
			response.getWriter().println("Error-callPartnershipESignContractWS: "+e.getLocalizedMessage());
		}
		return partESignContractResponse;
	}
	
	public Map<String, String> getUserAccounts(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String loginID, Map<String, String> pyeactEntries, String oDataURL, String aggregatorID, boolean debug){
		String userName="", passWord="", userPass="", executeURL="", acccountType="";
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			
			executeURL = oDataURL+"UserAccounts?$filter=LoginId%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getUserAccounts-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getUserAccounts-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getUserAccounts-dresults: "+dresults);
			JsonObject userAccountsJsonObj = null;
			if(debug)
				response.getWriter().println("getUserAccounts-Size: "+dresults.size());
			
			if(dresults.size() == 0){
				userAccountsEntry.put("Error", "076");
			}else{
//				userAccountsEntry.put("Error", "076");
				boolean isValidAccType=false;
				for (int i = 0; i <= dresults.size() - 1; i++) {
					userAccountsJsonObj = (JsonObject) dresults.get(i);
					if(debug)
						response.getWriter().println("userAccountsJsonObj-get(i): "+userAccountsJsonObj);
					
					if(! userAccountsJsonObj.get("BankAccntType").isJsonNull()){
						acccountType = userAccountsJsonObj.get("BankAccntType").getAsString();
					}
					
					if(debug){
						response.getWriter().println("getUserAccounts-acccountType: "+acccountType);
					}
					
					for (String key : pyeactEntries.keySet()) {
						if(debug)
							response.getWriter().println("getUserAccounts-pyeactEntriesType: "+key+"-"+ pyeactEntries.get(key));
						
//						if(null != acccountType && acccountType.equalsIgnoreCase(pyeactEntries.get(key))){
						if(null != acccountType && acccountType.equalsIgnoreCase(key)){
							isValidAccType=true;
							
							userAccountsEntry.put("Error", "");
							
							if(! userAccountsJsonObj.get("BankAccntType").isJsonNull())
								userAccountsEntry.put("BankAccntType", userAccountsJsonObj.get("BankAccntType").getAsString());
							else
								userAccountsEntry.put("BankAccntType", "");
							
							if(! userAccountsJsonObj.get("Corpid").isJsonNull())
								userAccountsEntry.put("Corpid", userAccountsJsonObj.get("Corpid").getAsString());
							else
								userAccountsEntry.put("Corpid", "");
							
							if(! userAccountsJsonObj.get("Userid").isJsonNull())
								userAccountsEntry.put("Userid", userAccountsJsonObj.get("Userid").getAsString());
							else
								userAccountsEntry.put("Userid", "");
							
							if(! userAccountsJsonObj.get("BankCountry").isJsonNull())
								userAccountsEntry.put("BankCountry", userAccountsJsonObj.get("BankCountry").getAsString());
							else
								userAccountsEntry.put("BankCountry", "");
							
							if(! userAccountsJsonObj.get("BankCountry").isJsonNull())
								userAccountsEntry.put("BankCountry", userAccountsJsonObj.get("BankCountry").getAsString());
							else
								userAccountsEntry.put("BankCountry", "");
							
							if(! userAccountsJsonObj.get("BankKey").isJsonNull())
								userAccountsEntry.put("BankKey", userAccountsJsonObj.get("BankKey").getAsString());
							else
								userAccountsEntry.put("BankKey", "");
							
							if(! userAccountsJsonObj.get("BankAccntNo").isJsonNull())
								userAccountsEntry.put("BankAccntNo", userAccountsJsonObj.get("BankAccntNo").getAsString());
							else
								userAccountsEntry.put("BankAccntNo", "");
							
							if(! userAccountsJsonObj.get("BankAccntSts").isJsonNull())
								userAccountsEntry.put("BankAccntSts", userAccountsJsonObj.get("BankAccntSts").getAsString());
							else
								userAccountsEntry.put("BankAccntSts", "");
							
							if(! userAccountsJsonObj.get("DDBActive").isJsonNull())
								userAccountsEntry.put("DDBActive", userAccountsJsonObj.get("DDBActive").getAsString());
							else
								userAccountsEntry.put("DDBActive", "");
							
							break;
						}
					}
					
					if(isValidAccType){
						break;
					}
				}
			}
		}catch (Exception e) {
			userAccountsEntry.put("Error", "001");
		}
		return userAccountsEntry;
	}
	
	public Map<String, String> getPYEACTEntries(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject1, 
			String loginID, boolean debug){
		String message = "", executeURL="", aggregatorID = "", types="", userPass="", userName="", password="", oDataUrl="";
		Map<String,String> pyeactData = new HashMap<String,String>();
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"AttributeTypesetTypes?$filter=Typeset%20eq%20%27PYEACT%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getPYEACTEntries-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getPYEACTEntries-dresults: "+dresults);
			
			if(dresults.size() == 0){
//				message = "119";
				pyeactData.put("Error", "000");
			}else{
				pyeactData.put("Error", "");
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject typeSetJsonObj = (JsonObject) dresults.get(i);
					pyeactData.put(typeSetJsonObj.get("Type").getAsString(), typeSetJsonObj.get("Name").getAsString());
					if(debug){
						response.getWriter().println("getPYEACTEntries-Type: "+typeSetJsonObj.get("Type").getAsString());
						response.getWriter().println("getPYEACTEntries-Name: "+typeSetJsonObj.get("Name").getAsString());
					}
				}
			}
		}catch (Exception e) {
			pyeactData.put("Error", "001");
		}
		return pyeactData;
	}
	
	public JsonObject getUserAccountsInJson(HttpServletRequest request, HttpServletResponse response, String loginID, 
			String oDataURL, String aggregatorID, String accountNo, Properties properties, boolean debug) throws IOException{
		String message="", userName="", passWord="", userPass="", executeURL="";
		JsonObject userAccountsObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			
//			executeURL = oDataURL+"UserAccounts?$filter=LoginId%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if (accountNo.trim().length() > 0) {
				executeURL = oDataURL+"UserAccounts?$filter=LoginId%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20BankAccntNo%20eq%20%27"+accountNo+"%27";
			} else {
				executeURL = oDataURL+"UserAccounts?$filter=LoginId%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			}
			
			if(debug){
//				response.getWriter().println("getUserAccountsInJson-userName: "+userName);
//				response.getWriter().println("getUserAccountsInJson-passWord: "+passWord);
				response.getWriter().println("getUserAccountsInJson-executeURL: "+executeURL);
			}
			
			userAccountsObj = executeURL(executeURL, userPass, response);
			userAccountsObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
			userAccountsObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
		}catch (Exception e) {
			message = "001";
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
			userAccountsObj.add("d", errorResponseObj);
		}
		if(debug){
			response.getWriter().println("getUserAccountsInJson-userAccountsObj: "+userAccountsObj);
		}
		
		return userAccountsObj;
	}
	
	public JsonObject setStandingInstruction1(HttpServletRequest request, HttpServletResponse response, JsonObject userAccountsEntries, 
			Properties properties, String loginID, String aggregatorID, String oDataURL, boolean debug) throws IOException{

		JsonObject userAccountsResponseObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject(); 
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		Map<String,String> accountsWSResponse = new HashMap<String,String>();
		String message="";
		JSONObject inputJsonObject = new JSONObject();
		boolean odAccAvailableY = false;
		try{
//			pyeactEntries = getPYEACTEntries(request, response, inputJsonObject, loginID, debug); //PYEACT typeset values
			userAccountsEntry = getODAUserAccountEntry(request, response, inputJsonObject, loginID, pyeactEntries, oDataURL, aggregatorID, debug);
			if(debug){
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("setStandingInstruction1-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
			}
			
			if(userAccountsEntry.get("Error").equalsIgnoreCase("")){
				//When ODA account is available in UserAccounts
				//Call Accounts WS
				accountsWSResponse = callAccountsWS(request, response, userAccountsEntry, loginID, aggregatorID, "", oDataURL, inputJsonObject, debug);
		
				if(debug){
					for (String key : accountsWSResponse.keySet()) {
						response.getWriter().println("setStandingInstruction1-accountsWSResponse: "+key + " - " + accountsWSResponse.get(key));
					}
				}
				
				if(accountsWSResponse.get("Error").equalsIgnoreCase("054")){
					message = "054";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("059")){
					message = "059";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", accountsWSResponse.get("Message"));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("067")){
					message = "067";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}
				else if(accountsWSResponse.get("Error").equalsIgnoreCase("065")){
					message = "065";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("066")){
					message = "066";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("001")){
					message = "001";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else{
					userAccountsResponseObj = userAccountsEntries;
					boolean isDDBActive = false;
					String selectedAccNo = userAccountsEntry.get("BankAccntNo");
					if(debug){
						response.getWriter().println("selectedAccNo: "+selectedAccNo);
						response.getWriter().println("setStandingInstruction.IsCFSOD: "+accountsWSResponse.get("IsCFSOD"));
					}
					
					if(accountsWSResponse.get("IsCFSOD").equalsIgnoreCase("Y")){
						odAccAvailableY = true;
						
						JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
						JsonArray dresults = results.get("results").getAsJsonArray();
						for (int i = 0; i <= dresults.size() - 1; i++) {
							if(selectedAccNo.equalsIgnoreCase(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntNo").getAsString())){
								//Setting SI as X and CFS OD as Y when the account is CFSOD
								if(debug)
									response.getWriter().println("1");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "X");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "Y");
							}else{
								//All other accounts - setSI as ""
								if(debug)
									response.getWriter().println("2");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
						}
					}else{
						//When ODA account is not CFSOD
						userAccountsResponseObj = userAccountsEntries;
						JsonObject results1 = userAccountsResponseObj.get("d").getAsJsonObject();
						JsonArray dresults1 = results1.get("results").getAsJsonArray();
						for (int i = 0; i <= dresults1.size() - 1; i++) {
							if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")){
								//When  CFS OD account in "N"
								if(debug)
									response.getWriter().println("3");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}else{
								//If CFS OD is N, then CAA logic added
								if(debug)
									response.getWriter().println("4");
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
										&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
									if(debug)
										response.getWriter().println("5");
									isDDBActive = true;
								}
							}
						}
						
						if(isDDBActive){
							userAccountsResponseObj = userAccountsEntries;
							JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
							JsonArray dresults = results.get("results").getAsJsonArray();
							for (int i = 0; i <= dresults.size() - 1; i++) {
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
										&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
									//Set SI as O only when CAA is available and DDBActive is X
									if(debug)
										response.getWriter().println("6");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
								}else if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")
										&& userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("")){
									//Set SI as "" only when CAA is available and DDBActive is ""
									if(debug)
										response.getWriter().println("7");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}else{
									//All other Account Types other than CAA and ODA - set SI as ""
									if(debug)
										response.getWriter().println("8");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
						}else{
							userAccountsResponseObj = userAccountsEntries;
							JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
							JsonArray dresults = results.get("results").getAsJsonArray();
							for (int i = 0; i <= dresults.size() - 1; i++) {
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")){
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
									if(debug)
										response.getWriter().println("9");
								}else{
									if(debug)
										response.getWriter().println("10");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}
								
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
						}
					}
					
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("Status", "000001");
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
				}
			}else{
				//No ODA account available in UserAccounts
				if(debug)
					response.getWriter().println("No ODA Account Available");
				boolean isDDBActive = false;
				userAccountsResponseObj = userAccountsEntries;
				JsonObject results1 = userAccountsResponseObj.get("d").getAsJsonObject();
				JsonArray dresults1 = results1.get("results").getAsJsonArray();
				for (int i = 0; i <= dresults1.size() - 1; i++) {
					if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
							&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
						if(debug)
							response.getWriter().println("11");
						isDDBActive = true;
					}
				}
				if(debug)
					response.getWriter().println("No ODA Account AvailableisDDBActive: "+isDDBActive);
				
				if(isDDBActive){
					userAccountsResponseObj = userAccountsEntries;
					JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
					JsonArray dresults = results.get("results").getAsJsonArray();
					for (int i = 0; i <= dresults.size() - 1; i++) {
						if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
								&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
							//Set SI as O only when CAA is available and DDBActive is X
							if(debug)
								response.getWriter().println("12");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
						}else if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")
								&& userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("")){
							//Set SI as "" only when CAA is available and DDBActive is ""
							if(debug)
								response.getWriter().println("13");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}else{
							//All other Account Types other than CAA and ODA - set SI as ""
							if(debug)
								response.getWriter().println("14");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}
						userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
					}
				}else{
					userAccountsResponseObj = userAccountsEntries;
					JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
					JsonArray dresults = results.get("results").getAsJsonArray();
					for (int i = 0; i <= dresults.size() - 1; i++) {
						if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")){
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
							if(debug)
								response.getWriter().println("15");
						}else{
							if(debug)
								response.getWriter().println("16");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}
						
						userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
					}
				}
				
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("Status", "000001");
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
			}
			
			if(debug)
				response.getWriter().println("setStandingInstruction1.userAccountsResponseObj before setting description: "+userAccountsResponseObj);
			//Setting Description Fields
			String accountStatusDesc="", accountTypeDesc="";
			
			if(! userAccountsResponseObj.get("d").getAsJsonObject().get("Status").getAsString().equalsIgnoreCase("000000")){
				JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
				for (int i = 0; i <= dresults.size() - 1; i++) {
					accountTypeDesc = getAccountTypeDesc(request, response, aggregatorID, dresults.get(i).getAsJsonObject().get("BankAccntType").getAsString(), debug);
					accountStatusDesc = getAccountStatusDesc(request, response, aggregatorID, dresults.get(i).getAsJsonObject().get("BankAccntSts").getAsString(), debug);
				
					userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("BankAccStsDs", accountStatusDesc);
					userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("BankAccTypeDs", accountTypeDesc);
				}
			}
		}catch (Exception e) {
			message = "001";
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
			userAccountsResponseObj.add("d", errorResponseObj);
			
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception-setStandingInstruction: "+e.getMessage()+"---> Full Stack Trace: "+buffer.toString());
			}
		}
		if(debug)
			response.getWriter().println("setStandingInstruction.userAccountsResponseObj: "+userAccountsResponseObj);
		
		return userAccountsResponseObj;
	
	}
	
	public Map<String, String> getODAUserAccountEntry(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String loginID, Map<String, String> pyeactEntries, String oDataURL, String aggregatorID, boolean debug){
		String userName="", passWord="", userPass="", executeURL="", acccountType="";
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			
			executeURL = oDataURL+"UserAccounts?$filter=LoginId%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getUserAccounts-executeURL: "+executeURL);
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getUserAccounts-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getUserAccounts-dresults: "+dresults);
			JsonObject userAccountsJsonObj = null;
			if(debug)
				response.getWriter().println("getUserAccounts-Size: "+dresults.size());
			
			if(dresults.size() == 0){
				userAccountsEntry.put("Error", "076");
			}else{
//				userAccountsEntry.put("Error", "076");
				boolean isValidAccType=false;
				for (int i = 0; i <= dresults.size() - 1; i++) {
					userAccountsJsonObj = (JsonObject) dresults.get(i);
					if(debug)
						response.getWriter().println("userAccountsJsonObj-get(i): "+userAccountsJsonObj);
					
					if(! userAccountsJsonObj.get("BankAccntType").isJsonNull()){
						acccountType = userAccountsJsonObj.get("BankAccntType").getAsString();
					}
					
					if(debug){
						response.getWriter().println("getUserAccounts-acccountType: "+acccountType);
					}
					
					if(null != acccountType && acccountType.equalsIgnoreCase("ODA")){
						isValidAccType=true;
						
						userAccountsEntry.put("Error", "");
						
						if(! userAccountsJsonObj.get("BankAccntType").isJsonNull())
							userAccountsEntry.put("BankAccntType", userAccountsJsonObj.get("BankAccntType").getAsString());
						else
							userAccountsEntry.put("BankAccntType", "");
						
						if(! userAccountsJsonObj.get("Corpid").isJsonNull())
							userAccountsEntry.put("Corpid", userAccountsJsonObj.get("Corpid").getAsString());
						else
							userAccountsEntry.put("Corpid", "");
						
						if(! userAccountsJsonObj.get("Userid").isJsonNull())
							userAccountsEntry.put("Userid", userAccountsJsonObj.get("Userid").getAsString());
						else
							userAccountsEntry.put("Userid", "");
						
						if(! userAccountsJsonObj.get("BankCountry").isJsonNull())
							userAccountsEntry.put("BankCountry", userAccountsJsonObj.get("BankCountry").getAsString());
						else
							userAccountsEntry.put("BankCountry", "");
						
						if(! userAccountsJsonObj.get("BankCountry").isJsonNull())
							userAccountsEntry.put("BankCountry", userAccountsJsonObj.get("BankCountry").getAsString());
						else
							userAccountsEntry.put("BankCountry", "");
						
						if(! userAccountsJsonObj.get("BankKey").isJsonNull())
							userAccountsEntry.put("BankKey", userAccountsJsonObj.get("BankKey").getAsString());
						else
							userAccountsEntry.put("BankKey", "");
						
						if(! userAccountsJsonObj.get("BankAccntNo").isJsonNull())
							userAccountsEntry.put("BankAccntNo", userAccountsJsonObj.get("BankAccntNo").getAsString());
						else
							userAccountsEntry.put("BankAccntNo", "");
						
						if(! userAccountsJsonObj.get("BankAccntSts").isJsonNull())
							userAccountsEntry.put("BankAccntSts", userAccountsJsonObj.get("BankAccntSts").getAsString());
						else
							userAccountsEntry.put("BankAccntSts", "");
						
						if(! userAccountsJsonObj.get("DDBActive").isJsonNull())
							userAccountsEntry.put("DDBActive", userAccountsJsonObj.get("DDBActive").getAsString());
						else
							userAccountsEntry.put("DDBActive", "");
						
						break;
					}
					
					if(isValidAccType){
						break;
					}
				}
				
				if(! isValidAccType){
					userAccountsEntry.put("Error", "999");
				}
			}
		}catch (Exception e) {
			userAccountsEntry.put("Error", "001");
		}
		return userAccountsEntry;
	}
	
	public int getResultsSize(HttpServletResponse response, JsonObject inputJsonObj, boolean debug) throws IOException{
		int dataSize=0;
		
		try{
			JsonObject results = inputJsonObj.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			dataSize=dresults.size();
			if(debug){
				response.getWriter().println("dataSize: "+dataSize);
			}
		}catch (Exception e) {
			dataSize=0;
		}
		return dataSize;
	}
	
	public String validateAccountCreateInput(HttpServletResponse response, JSONObject inputJsonObj, String aggregatorID, boolean debug) throws IOException{
		String returnMessage = "", accountGuid="", accountNo="";
		try{
			accountGuid = inputJsonObj.getString("UaccntGuid");
			accountNo = inputJsonObj.getString("BankAccntNo");
			if(debug){
				response.getWriter().println("validateAccountCreateInput.accountGuid: "+accountGuid);
				response.getWriter().println("validateAccountCreateInput.accountNo: "+accountNo);
			}
			
			if(accountGuid == null || accountGuid.trim().length() == 0){
				returnMessage = "Technical Error : Missing value for mandatory field : UaccntGuid";
			}
			if(debug){
				response.getWriter().println("validateAccountCreateInput.returnMessage1: "+returnMessage);
				response.getWriter().println("validateAccountCreateInput.returnMessage.trim().length(): "+returnMessage.trim().length());
				response.getWriter().println("validateAccountCreateInput.accountNo.trim().length(): "+accountNo.trim().length());
			}
				
			
			if(returnMessage.trim().length() == 0){
				if(accountNo == null || accountNo.trim().length() == 0){
					returnMessage = "Technical Error : Missing value for mandatory field : BankAccntNo";
				}
			}
			if(debug)
				response.getWriter().println("validateAccountCreateInput.returnMessage2: "+returnMessage);
			
			if(returnMessage.trim().length() == 0){
				returnMessage = checkUniqueIDInUserAccounts(response, accountGuid, aggregatorID, debug);
			}
		}catch (Exception e) {
			returnMessage = e.getMessage();
		}
		if(debug)
			response.getWriter().println("validateAccountCreateInput.returnMessageFinal: "+returnMessage);
		return returnMessage;
	}
	
	public String checkUniqueIDInUserAccounts(HttpServletResponse response, String accountGuid, String aggregatorID, boolean debug) throws IOException{
		String returnMessage = "", oDataUrl="", userName="", password="", userPass="", executeURL="";
		JsonObject scfJsonObject = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
//			executeURL = oDataUrl+"SCF?$filter=CP_GUID%20eq%20%27"+cpGuid+"%27%20and%20CP_TYPE%20eq%20%27"+cpType+"%27%20and%20AGGRID%20eq%20%27"+aggregatorID+"%27%20and%20STATUS_ID%20eq%20%27000003%27";
			executeURL = oDataUrl+"UserAccounts?$filter=UaccntGuid%20eq%20%27"+accountGuid+"%27";
			scfJsonObject = executeURL(executeURL, userPass, response);
			
			if(debug)
				response.getWriter().println("checkUniqueIDInUserAccounts.scfJsonObject: "+scfJsonObject);
//			scfJsonObject
			JsonObject results = scfJsonObject.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(dresults.size() > 0){
				returnMessage = "Given User Account Guid is already available";
			}
		}catch (Exception e) {
			returnMessage = e.getMessage();
		}
		
		return returnMessage;
	}
	
	public JsonObject getUserPartnersForLogin(HttpServletRequest request, HttpServletResponse response, String loginID, String aggregatorID, 
			Properties properties, boolean debug) throws IOException{
		JsonObject userPartnerEntriesJson = new JsonObject();
		String oDataURL="", userName="", password="", userPass="", executeURL="";
		CommonUtils commonUtils = new CommonUtils();
		try{
			oDataURL = commonUtils.getODataDestinationProperties("URL", "PUGWHANA");
			userName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("getUserPartnersForLogin-oDataURL: "+oDataURL);
				response.getWriter().println("getUserPartnersForLogin-userName: "+userName);
			}
			
			executeURL = oDataURL+"UserPartners?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27PD%27";
			if(debug)
				response.getWriter().println("getUserPartnersForLogin-executeURL: "+executeURL);
			
			userPartnerEntriesJson = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getUserPartnersForLogin-userPartnerEntriesJson: "+userPartnerEntriesJson);
			
			userPartnerEntriesJson.addProperty("ErrorCode", "");
			userPartnerEntriesJson.addProperty("ErrorMessage", "");
			
			if(debug)
				response.getWriter().println("getUserPartnersForLogin-userPartnerEntriesJson: "+userPartnerEntriesJson);
			
			return userPartnerEntriesJson;
		}catch (Exception e) {
			userPartnerEntriesJson.addProperty("ErrorCode", "001");
			userPartnerEntriesJson.addProperty("ErrorMessage", "");
			return userPartnerEntriesJson;
		}
	}
	
	public JsonObject userAccountsCreate(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, String loginID, 
			String aggregatorID, String oDataURL, Properties properties, boolean debug) throws IOException{
		JsonObject userAccCreateResponseToUI = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject bankAccountEntriesJson = new JsonObject();
		JsonObject bankAccountEntriesJsonWithSI = new JsonObject();
		Map<String, String> userRegMap = new HashMap<String, String>();
		Map<String,String> accountsWSResponseMap = new HashMap<String,String>();
		Map<String,String> scfEntryMapForUser = new HashMap<String,String>();
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		String message = "", testRun = "", accountTypeFromWS = "", isCFSOFFromWS="", accountNoFromUI = "", ddbActiveFromUI="";
		int userAccSize=0;
		boolean hasUserRegistered = true, validationSuccess = false, isOfflineODAccount = false;
		String setSIForResponse="";
		
		String successResponse = "{\"d\":{\"__metadata\":{\"id\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/UserAccounts(guid'USERACCOUNTGUID_VALUE')\",\"uri\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/UserAccounts(guid'USERACCOUNTGUID_VALUE')\",\"type\":\"ARTEC.PYGW.UserAccount\"}"
				+ ",\"UaccntGuid\":\"USERACCOUNTGUID_VALUE\""
				+ ",\"LoginId\":\"LOGINID_VALUE\""
				+ ",\"Corpid\":\"\""
				+ ",\"Userid\":\"\""
				+ ",\"BankCountry\":\"\""
				+ ",\"BankKey\":\"\""
				+ ",\"BankAccntNo\":\"BANKACCOUNTNO_VALUE\""
				+ ",\"BankAccntType\":\"BANKACCOUNTTYPE_VALUE\""
				+ ",\"BankAccntSts\":\"BANKACCOUNTSTATUS_VALUE\""
				+ ",\"CreatedOn\":null"
				+ ",\"CreatedBy\":\"\""
				+ ",\"CreatedAt\":\"PT00H00M00S\""
				+ ",\"ChangedOn\":null"
				+ ",\"ChangedBy\":\"\""
				+ ",\"ChangedAt\":\"PT00H00M00S\""
				+ ",\"BankAccStsDs\":\"\""
				+ ",\"BankAccTypeDs\":\"\""
				+ ",\"CustomerID\":\"\""
				+ ",\"CustomerTitle\":\"\""
				+ ",\"CustomerName\":\"\""
				+ ",\"CustomerShortName\":\"\""
				+ ",\"ModeOfOperation\":\"\""
				+ ",\"IsAccountClosed\":\"\""
				+ ",\"AccountClosedDate\":null"
				+ ",\"DDBActive\":\"DDBACTIVE_VALUE\""
				+ ",\"Testrun\":\"TESTRUN_VALUE\""
				+ ",\"SetSI\":\"SETSI_VALUE\""
				+ ",\"IsCFSODA\":\"ISCFSOD_VALUE\"}}";
		
		String errorResponse = "{\"error\":{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":{\"lang\":\"en\",\"value\":\"ERROR_MESSAGE\"}"
				+ ",\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PYGW\""
				+ ",\"service_version\":\"0001\"},\"transactionid\":\"8A50D8E98D62F127A8EC001372667F53\",\"timestamp\":null"
				+ ",\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\""
				+ ",\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\""
				+ ",\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"}"
				+ ",\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":\"ERROR_MESSAGE\",\"propertyref\":\"\""
				+ ",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\""
				+ ",\"message\":\"An application exception has occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
		
		try{
			
			if(debug)
				response.getWriter().println("userAccountsCreate-inputJsonObj: "+inputJsonObj);
			
			message = validateAccountCreateInput(response, inputJsonObj, aggregatorID, debug);
			if(debug)
				response.getWriter().println("userAccountsCreate-validateAccountCreateInput.message: "+message);
			
			if(message != null && message.trim().length() > 0){
				if(message.equalsIgnoreCase("Technical Error : Missing value for mandatory field : UaccntGuid")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "120");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else if(message.equalsIgnoreCase("Technical Error : Missing value for mandatory field : BankAccntNo")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "120");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else if(message.equalsIgnoreCase("Given User Account Guid is already available")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "160");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else{
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "001");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}
			}else{
				bankAccountEntriesJson = getUserAccountsInJson(request, response, loginID, oDataURL, aggregatorID, "", properties, debug);
				
				if(! bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").isJsonNull() 
						&& bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().length() > 0){
//					userAccCreateResponseToUI = bankAccountEntriesJson;
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString());
					errorResponseObj.addProperty("ErrorMessage", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorMessage").getAsString());
					userAccCreateResponseToUI.add("d", errorResponseObj);
//					return userAccCreateResponseToUI;
				}else{
					userAccSize = getResultsSize(response, bankAccountEntriesJson, debug);
					
					if(userAccSize > 0){
						message = validateAccount(response, inputJsonObj, bankAccountEntriesJson, loginID, aggregatorID, oDataURL, debug);
					}
					
					if(message != null && message.trim().length() > 0){
						if(message.equalsIgnoreCase("151")){
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
							userAccCreateResponseToUI.add("d", errorResponseObj);
						}else{
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", "001");
							errorResponseObj.addProperty("ErrorMessage", message);
							userAccCreateResponseToUI.add("d", errorResponseObj);
						}
					}else{
						//Proceed Further
						userRegMap = getUserRegDetails(request, response, loginID, aggregatorID, oDataURL, debug);
						
						for (String key : userRegMap.keySet()) {
							if(debug)
								response.getWriter().println("userAccountsCreate-userRegResponseMap: "+key + " - " + userRegMap.get(key));
							
							if(key.equalsIgnoreCase("Error")){
								if(userRegMap.get(key).equalsIgnoreCase("054") || userRegMap.get(key).equalsIgnoreCase("001")){
									hasUserRegistered = false;
									break;
								}else{
									if(! userRegMap.get("UserRegStatus").equalsIgnoreCase("000002")){
										hasUserRegistered = false;
										break;
									}
								}
							}
						}
						
						if(hasUserRegistered){
							if(debug){
								response.getWriter().println("userAccountsCreate.loginID"+loginID);
								response.getWriter().println("userAccountsCreate.oDataURL"+oDataURL);
								response.getWriter().println("userAccountsCreate.aggregatorID"+aggregatorID);
							}
							//Call Accounts WS
							accountsWSResponseMap = getAccountDetails(request, response, inputJsonObj, userRegMap, aggregatorID, debug);
							if(accountsWSResponseMap.get("Error").equalsIgnoreCase("059")){
								message = "059";
								errorResponseObj.addProperty("Status", "000000");
								errorResponseObj.addProperty("ErrorCode", message);
								errorResponseObj.addProperty("ErrorMessage", accountsWSResponseMap.get("Message"));
								userAccCreateResponseToUI.add("d", errorResponseObj);
							}else{
								bankAccountEntriesJsonWithSI = bankAccountEntriesJson;
								bankAccountEntriesJson = null;
								bankAccountEntriesJson = setStandingInstruction1(request, response, bankAccountEntriesJsonWithSI, properties, loginID, aggregatorID, oDataURL, debug);
								
								try{
									testRun = inputJsonObj.getString("Testrun");
								}catch (Exception e) {
									if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
										//When Testrun in ""
										testRun = "";
									}
								}
								
								
								accountNoFromUI = inputJsonObj.getString("BankAccntNo");
								ddbActiveFromUI = inputJsonObj.getString("DDBActive");
								accountTypeFromWS = accountsWSResponseMap.get("AccountType");
								isCFSOFFromWS = accountsWSResponseMap.get("IsCFSOD");
								if(debug){
									response.getWriter().println("userAccountsCreate.bankAccountEntriesJson: "+bankAccountEntriesJson);
									response.getWriter().println("userAccountsCreate.testRun: "+testRun);
									response.getWriter().println("userAccountsCreate.accountTypeFromWS: "+accountTypeFromWS);
									response.getWriter().println("userAccountsCreate.isCFSOFFromWS: "+isCFSOFFromWS);
								}
								
								String accountTypeFromUACTbl = "", setSIFromUACTbl = "";
								boolean isValidODA=true;
								if(testRun != null && testRun.trim().length() > 0){
									if(testRun.equalsIgnoreCase("X")){
										if(accountTypeFromWS != null && accountTypeFromWS.trim().length() > 0){
											if(accountTypeFromWS.equalsIgnoreCase("ODA") && isCFSOFFromWS.equalsIgnoreCase("Y")){
												JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
												JsonArray dresults = results.get("results").getAsJsonArray();
												for (int i = 0; i <= dresults.size() - 1; i++) {
													accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
													setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
													
													if(debug){
														response.getWriter().println("userAccountsCreate.ODA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
														response.getWriter().println("userAccountsCreate.ODA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
													}
													
													if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
														isValidODA=false;
														break;
													}
												}
												
												if(! isValidODA){
													message = "153";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//Get SCF Entries
													scfEntryMapForUser = getSCFEntryForTheUser(response, inputJsonObj, aggregatorID, loginID, debug);
													
													if(debug){
														/*for (String key : scfEntryMapForUser.keySet()) {
															response.getWriter().println("userAccCreate.scfEntryMapForUser: "+key + " - " + scfEntryMapForUser.get(key));
														}*/
														response.getWriter().println("userAccCreate.scfEntryMapForUser.ErrorCode: "+scfEntryMapForUser.get("ErrorCode"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive"));
														response.getWriter().println("userAccCreate.accountNoFromUI: "+accountNoFromUI);
													}
													
													if(scfEntryMapForUser.get("ErrorCode") != null && scfEntryMapForUser.get("ErrorCode").trim().length() == 0){
														if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000002")){
															if(! scfEntryMapForUser.get("AccountNo").equalsIgnoreCase(accountNoFromUI)){
																message = "185";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is already active. Please link the same account");
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}else{
																if(scfEntryMapForUser.get("DDBActive") != null && scfEntryMapForUser.get("DDBActive").equalsIgnoreCase("X")){
																	//setsi=""
																	setSIForResponse="";
																	validationSuccess = true;
																}else{
																	//setsi="X"
																	setSIForResponse="X";
																	validationSuccess = true;
																}
															}
														}else if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000001")){
															message = "185";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}else{
															//setsi = "X"
															setSIForResponse="X";
															validationSuccess = true;
														}
													}else{
														//Offline OD Account Scenario
														if(debug)
															response.getWriter().println("Offline ODA scenario.userAccCreateResponseToUI: "+userAccCreateResponseToUI);

														if (scfEntryMapForUser.get("ErrorCode").equalsIgnoreCase("000")) {
															setSIForResponse="X";
															isOfflineODAccount = true;
															validationSuccess = true;
														}else{
															message = "001";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", scfEntryMapForUser.get("ErrorMessage"));
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}
													}
												}
											}else if(accountTypeFromWS.equalsIgnoreCase("ODA") && isCFSOFFromWS.equalsIgnoreCase("N")){
												//setsi=""
												setSIForResponse="";
												validationSuccess = true;
											}else if(accountTypeFromWS.equalsIgnoreCase("CAA")){
												//If account type is CAA
												boolean doNothing = false;
												accountTypeFromUACTbl = ""; setSIFromUACTbl="";
												String ddbActive = "";
												JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
												JsonArray dresults = results.get("results").getAsJsonArray();
												for (int i = 0; i <= dresults.size() - 1; i++) {
													accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
													setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
													
													if(debug){
														response.getWriter().println("userAccountsCreate.ODA and SI is 'X'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
														response.getWriter().println("userAccountsCreate.ODA and SI is 'X'.setSIFromUACTbl: "+setSIFromUACTbl);
													}
													if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
														doNothing = true;
													}
												}
												
												if(! doNothing){
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull()){
															ddbActive = "";
														}else{
															ddbActive = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString();
														}
														
														if(debug){
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.setSIFromUACTbl: "+setSIFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.setSIFromUACTbl: "+ddbActive);
														}
														if(accountTypeFromUACTbl.equalsIgnoreCase("CAA") && setSIFromUACTbl.equalsIgnoreCase("O") && ddbActive.equalsIgnoreCase("X")){
															doNothing = true;
														}
													}
													
													if(! doNothing){
														//setSI = "O"
														setSIForResponse="O";
														validationSuccess = true;
													}else{
														//setSI = ""
														setSIForResponse="";
														validationSuccess = true;
													}
												}else{
													//setSI = ""
													setSIForResponse="";
													validationSuccess = true;
												}
											}else if(!accountTypeFromWS.equalsIgnoreCase("CAA") && !accountTypeFromWS.equalsIgnoreCase("ODA")){
												//setSI = ""
//												setSIForResponse="";
//												validationSuccess = true;
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "146";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//setsi = "";
													setSIForResponse="";
													validationSuccess = true;
												}
											}
										}
									}
								}else{
									//TestRun is Blank
									if(accountTypeFromWS != null && accountTypeFromWS.trim().length() > 0){
										if(accountTypeFromWS.equalsIgnoreCase("ODA")){
											if(isCFSOFFromWS.equalsIgnoreCase("Y")){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
													JsonArray dresults = results.get("results").getAsJsonArray();
													accountTypeFromUACTbl = ""; setSIFromUACTbl="";
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(debug){
															response.getWriter().println("userAccountsCreate.ODA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.ODA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
														}
														
														if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
															isValidODA=false;
															break;
														}
													}
													
													if(! isValidODA){
														message = "153";
														errorResponseObj.addProperty("Status", "000000");
														errorResponseObj.addProperty("ErrorCode", message);
														errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
														userAccCreateResponseToUI.add("d", errorResponseObj);
													}else{
														//Get SCF Entries
														scfEntryMapForUser = getSCFEntryForTheUser(response, inputJsonObj, aggregatorID, loginID, debug);
														
														if(debug){
															/*for (String key : scfEntryMapForUser.keySet()) {
																response.getWriter().println("userAccCreate.scfEntryMapForUser: "+key + " - " + scfEntryMapForUser.get(key));
															}*/
															response.getWriter().println("userAccCreate.scfEntryMapForUser.ErrorCode: "+scfEntryMapForUser.get("ErrorCode"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive"));
															response.getWriter().println("userAccCreate.accountNoFromUI: "+accountNoFromUI);
														}
														
														if(scfEntryMapForUser.get("ErrorCode") != null && scfEntryMapForUser.get("ErrorCode").trim().length() == 0){
															if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000002")){
																if(! scfEntryMapForUser.get("AccountNo").equalsIgnoreCase(accountNoFromUI)){
																	message = "185";
																	errorResponseObj.addProperty("Status", "000000");
																	errorResponseObj.addProperty("ErrorCode", message);
																	errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is already active. Please link the same account");
																	userAccCreateResponseToUI.add("d", errorResponseObj);
																}else{
																	if(scfEntryMapForUser.get("DDBActive") != null && scfEntryMapForUser.get("DDBActive").equalsIgnoreCase("X")){
																		//setsi=""
																		setSIForResponse="";
																		validationSuccess = true;
																	}else{
																		//setsi="X"
																		setSIForResponse="X";
																		validationSuccess = true;
																	}
																}
															}else if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000001")){
																message = "185";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}else{
																//setsi = "X"
																setSIForResponse="X";
																validationSuccess = true;
															}
														}else{
															//Offline OD Account scenario
															/*setSIForResponse="X";
															isOfflineODAccount = true;
															validationSuccess = true;*/
															if ( scfEntryMapForUser.get("ErrorCode").equalsIgnoreCase("000")) {

																setSIForResponse="X";
																validationSuccess = true;
																isOfflineODAccount = true;
																
															} else {
																message = "001";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", scfEntryMapForUser.get("ErrorMessage"));
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}
														}
													}
												}else if(ddbActiveFromUI == null || ddbActiveFromUI.trim().equalsIgnoreCase("")){
													message = "149";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}
											}else if(isCFSOFFromWS.equalsIgnoreCase("N")){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "146";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//setsi=""
													setSIForResponse="";
													validationSuccess = true;
												}
											}
										}else if(accountTypeFromWS.equalsIgnoreCase("CAA")){
											boolean isCAAAlreadyAvailable  = false;
											JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
											JsonArray dresults = results.get("results").getAsJsonArray();
											accountTypeFromUACTbl = ""; setSIFromUACTbl="";
											for (int i = 0; i <= dresults.size() - 1; i++) {
												accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
												setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
												
												if(debug){
													response.getWriter().println("userAccountsCreate.CAA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
													response.getWriter().println("userAccountsCreate.CAA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
												}
												
												if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
													isValidODA=false;
													break;
												}
											}
											
											if(! isValidODA){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "148";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													String ddbActiveFromUACTbl =  "";
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull()){
															ddbActiveFromUACTbl = "";
														}else{
															ddbActiveFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString();	
														}
														
														
														if(debug){
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.setSIFromUACTbl: "+setSIFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.ddbActiveFromUACTbl: "+ddbActiveFromUACTbl);
														}
														
														if(accountTypeFromUACTbl.equalsIgnoreCase("CAA") && setSIFromUACTbl.equalsIgnoreCase("O") && ddbActiveFromUACTbl.equalsIgnoreCase("X")){
															isCAAAlreadyAvailable  = true;
															break;
														}
													}
													
													if(isCAAAlreadyAvailable){
														if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
															message = "147";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}else{
															//setsi = "O";
															setSIForResponse="O";
															validationSuccess = true;
														}
													}else{
														//setsi = "O";
														setSIForResponse="O";
														validationSuccess = true;
													}
												}
											}else{
												//setsi = "";
												setSIForResponse="";
												validationSuccess = true;
											}
										}else if(!accountTypeFromWS.equalsIgnoreCase("CAA") && !accountTypeFromWS.equalsIgnoreCase("ODA")){
											if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
												message = "146";
												errorResponseObj.addProperty("Status", "000000");
												errorResponseObj.addProperty("ErrorCode", message);
												errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
												userAccCreateResponseToUI.add("d", errorResponseObj);
											}else{
												//setsi = "";
												setSIForResponse="";
												validationSuccess = true;
											}
										}
									}
								}
							}
						}else{
							message = "054";
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
							userAccCreateResponseToUI.add("d", errorResponseObj);
							
							accountsWSResponseMap.put("Error", "059");
							accountsWSResponseMap.put("Message", "User not registered");
							//set accounts ws response to error
						}
					}
					/*}else{
//						userAccCreateResponseToUI = bankAccountEntriesJson;
//						return userAccCreateResponseToUI;
					}*/
				}
			}
			
			if(debug){
				response.getWriter().println("userAccountsCreate.validationSuccess: "+validationSuccess);
				response.getWriter().println("userAccountsCreate.setSIForResponsefinal: "+setSIForResponse);
			}
				
			
			String responseUserAccGuid="", responseLoginID="", responseAccNo="", responseAccType="", responseAccStatus="", responseDDB="", responseTestRun="", responseIfCFSOD="";
			String responseErrorCode="", responseErrorMessage="";
			
			if(validationSuccess){
				//Success Response
				responseUserAccGuid = inputJsonObj.getString("UaccntGuid");
				responseLoginID = loginID;
				responseAccNo = inputJsonObj.getString("BankAccntNo");
				responseAccType = accountsWSResponseMap.get("AccountType");
				responseAccStatus = accountsWSResponseMap.get("AccountStatus"); //Have pass the status code
				responseDDB = inputJsonObj.getString("DDBActive");
				try{
					responseTestRun = inputJsonObj.getString("Testrun");
				}catch (Exception e) {
					if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
						//When Testrun in ""
						responseTestRun = "";
					}
				}
//				responseTestRun = inputJsonObj.getString("Testrun");
				responseIfCFSOD = accountsWSResponseMap.get("IsCFSOD");
				
				successResponse = successResponse.replaceAll("USERACCOUNTGUID_VALUE", responseUserAccGuid);
				successResponse = successResponse.replaceAll("LOGINID_VALUE", responseLoginID);
				successResponse = successResponse.replaceAll("BANKACCOUNTNO_VALUE", responseAccNo);
				successResponse = successResponse.replaceAll("BANKACCOUNTTYPE_VALUE", responseAccType);
				successResponse = successResponse.replaceAll("BANKACCOUNTSTATUS_VALUE", responseAccStatus);
				successResponse = successResponse.replaceAll("DDBACTIVE_VALUE", responseDDB);
				successResponse = successResponse.replaceAll("TESTRUN_VALUE", responseTestRun);
				successResponse = successResponse.replaceAll("SETSI_VALUE", setSIForResponse);
				successResponse = successResponse.replaceAll("ISCFSOD_VALUE", responseIfCFSOD);
				
				userAccCreateResponseToUI = new JsonParser().parse(successResponse).getAsJsonObject();
				
				testRun = "";
				try{
					testRun = inputJsonObj.getString("Testrun");
				}catch (Exception e) {
					if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
						//When Testrun in ""
						testRun = "";
					}
				}
				if(debug)
					response.getWriter().println("userAccountsCreate.finalTestRun: "+testRun);
				if(testRun != null && testRun.equalsIgnoreCase("X")){
					
					response.getWriter().println(userAccCreateResponseToUI);
					return userAccCreateResponseToUI;
				}else{
					message = "";
					
					if(debug){
						response.getWriter().println("userAccountsCreate.bankAccountEntriesJson: "+bankAccountEntriesJson);
					}
					
					if(responseIfCFSOD != null && responseIfCFSOD.equalsIgnoreCase("Y")){
						//Check for existing entries with DDBActive in bankAccountEntriesJson
						String ddbActiveForUpdate = "";
						boolean insertFlag = false;
						JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
						JsonArray dresults = results.get("results").getAsJsonArray();
						JsonObject entryToUpdate = new JsonObject();
						for (int i = 0; i <= dresults.size() - 1; i++) {
							entryToUpdate = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject();
							
							if(entryToUpdate.get("DDBActive").isJsonNull()){
								ddbActiveForUpdate = "";
							}else{
								ddbActiveForUpdate = entryToUpdate.get("DDBActive").getAsString();
							}
							
							if(debug)
								response.getWriter().println("userAccountsCreate.ddbActiveForUpdate: "+ddbActiveForUpdate);
							entryToUpdate.remove("DDBActive");
							entryToUpdate.addProperty("DDBActive", "");
							if(debug)
								response.getWriter().println("userAccountsCreate.entryToUpdate: "+entryToUpdate);
							
							if(ddbActiveForUpdate != null && ddbActiveForUpdate.equalsIgnoreCase("X")){
								//Call Update here
								message = updateUserAccounts(request, response, entryToUpdate, aggregatorID, debug);
							}
						}
						if(debug){
							response.getWriter().println("userAccountsCreate.update.message: "+message);
						}
						//Call Insert here
						if(message == null || (message != null && message.equalsIgnoreCase(""))){
							if(debug){
								response.getWriter().println("userAccountsCreate.CorpId: "+userRegMap.get("CorpId"));
								response.getWriter().println("userAccountsCreate.CorpId: "+userRegMap.get("CorpId"));
							}
							
							if(isOfflineODAccount){
								message = insertOfflineODAIntoSCF(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, debug);
							}
							if(debug){
								response.getWriter().println("userAccountsCreate.insertOfflineODAIntoSCF.message: "+message);
							}
							
							if(message == null || (message != null && message.equalsIgnoreCase(""))){
								message = insertIntoUserAccounts(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, debug);
								if(debug){
									response.getWriter().println("userAccountsCreate.insertafterupdate.message: "+message);
								}
							}else{
								
								if(message.equalsIgnoreCase("000") || message.equalsIgnoreCase("155")){
									responseErrorCode = "155";
									responseErrorMessage = "More than one partner is assigned for that login";
									
									errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
									errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
									response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
									userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
									
									response.getWriter().println(userAccCreateResponseToUI);
									return userAccCreateResponseToUI;
								}else{
									responseErrorCode = "001";
									responseErrorMessage = message;
									
									errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
									errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
									response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
									userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
									
									response.getWriter().println(userAccCreateResponseToUI);
									return userAccCreateResponseToUI;
								}
							}
						}else{
							responseErrorCode = "045";
							responseErrorMessage = "Account Linking Failed";
							
							errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
							errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
							response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
							userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
							
							response.getWriter().println(userAccCreateResponseToUI);
							return userAccCreateResponseToUI;
						}
					}else{
						
//						String successResponse = "sap-message: {\"code\":\"/ARTEC/PY/044\",\"message\":\"Account Linked Sucessfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
						message = insertIntoUserAccounts(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, debug);
						if(debug){
							response.getWriter().println("userAccountsCreate.directinsert.message: "+message);
						}
					}
					
					if(message == null || message.trim().equalsIgnoreCase("")){
						responseErrorCode = "045";
						responseErrorMessage = "Account Linking Failed";
						
						errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
						errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
						response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
						userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
						
						response.getWriter().println(userAccCreateResponseToUI);
						return userAccCreateResponseToUI;
					}else{
						userAccCreateResponseToUI.get("d").getAsJsonObject().addProperty("Code", "044");
						userAccCreateResponseToUI.get("d").getAsJsonObject().addProperty("Message", "Account Linked Sucessfully");
						response.getWriter().println(userAccCreateResponseToUI);
						return userAccCreateResponseToUI;
					}
				}
			}else{
				//Failure Response
				responseErrorCode = userAccCreateResponseToUI.get("d").getAsJsonObject().get("ErrorCode").getAsString();
				responseErrorMessage = userAccCreateResponseToUI.get("d").getAsJsonObject().get("ErrorMessage").getAsString();
				
				errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
				errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
				
				userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				response.getWriter().println(userAccCreateResponseToUI);
				if(debug)
					response.getWriter().println("userAccountsCreate.Failure Response.userAccCreateResponseToUI: "+userAccCreateResponseToUI);
				
				return userAccCreateResponseToUI;
			}
		}catch (Exception e) {
//			String responseErrorCode="", responseErrorMessage="";
			
			message = "001";
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug){
				response.getWriter().println("CommonUtils.userAccountsCreate --> "+e.getMessage()+". Full Stack Trace:"+buffer.toString());
			}
			
			if(debug){
				response.getWriter().println("CommonUtils.userAccountsCreate.userAccCreateResponseToUI: "+userAccCreateResponseToUI);
			}
			
			errorResponse = errorResponse.replaceAll("ERROR_CODE", message);
			errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", "CommonUtils.userAccountsCreate --> "+e.getMessage());
			
			userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			response.getWriter().println(userAccCreateResponseToUI);
			
			return userAccCreateResponseToUI;
		}
	}
	
	public String insertOfflineODAIntoSCF(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, Map<String, String> userRegMap, 
			String setSIForResponse, Map<String, String> accountsWSResponseMap, String aggregatorID, String loginID, boolean debug) throws IOException{
		String message = "", createdBy="", createdAt="", userName="", password="", userPass="", executeURL="", oDataUrl="", userPartnerTypes="";
		JsonObject userCustomersObj = new JsonObject();
		JsonObject scfInsertResponseObj = new JsonObject();
		JSONObject scfInsertPayLoad = new JSONObject();
		long createdOnInMillis=0;
		JsonObject userPartnerJsonResponse = new JsonObject();
		
		try{
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			
			userPartnerJsonResponse = getUserPartnerTypes(response, loginID, aggregatorID, debug);
			JsonArray userPartnerJsonArray = userPartnerJsonResponse.getAsJsonObject("d").getAsJsonArray("results");
			JsonObject childUserPartnerJsonObj = new JsonObject();

			if(userPartnerJsonArray.size() > 0)
				childUserPartnerJsonObj = userPartnerJsonArray.get(0).getAsJsonObject();
			
			if ( childUserPartnerJsonObj.has("PartnerTypeID") &&  ! childUserPartnerJsonObj.get("PartnerTypeID").isJsonNull() )
				userPartnerTypes = childUserPartnerJsonObj.get("PartnerTypeID").getAsString();
			else
				userPartnerTypes = "";
			
			if (userPartnerTypes.equalsIgnoreCase("000002"))
			{
				userCustomersObj = getVendors(response, loginID, aggregatorID, debug);
			}
			else if (userPartnerTypes.equalsIgnoreCase("000003"))
			{
				userCustomersObj = getUserCustomers(response, loginID, aggregatorID, debug);
			}
			else {
				message = "Invalid Partner type maintained";
			}
			if(debug){
				response.getWriter().println("insertOfflineODAIntoSCF.userCustomersObj: "+userCustomersObj);
			}
			
			if (message != null && message.trim().length() > 0) {
				return message; 
			}else{
				if(! userCustomersObj.get("d").getAsJsonObject().get("ErrorCode").isJsonNull() && userCustomersObj.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().length() > 0){
					message = "000";
					return message;
				}else{
					JsonObject userCustomersResults = userCustomersObj.get("d").getAsJsonObject();
					JsonArray userCustomersResultsArray = userCustomersResults.get("results").getAsJsonArray();
					JsonObject assignedCustomer = new JsonObject();
					if(userCustomersResultsArray.size() == 1){
						assignedCustomer = userCustomersResultsArray.get(0).getAsJsonObject();
						if(debug){
							response.getWriter().println("insertOfflineODAIntoSCF.assignedCustomer: "+assignedCustomer);
						}
						scfInsertPayLoad.accumulate("ID", ""+generateGUID(36));
						scfInsertPayLoad.accumulate("CPGUID", assignedCustomer.get("PartnerID").getAsString());
//						scfInsertPayLoad.accumulate("CPTypeID", );
						if(userPartnerTypes.equalsIgnoreCase("000002"))
							scfInsertPayLoad.accumulate("CPTypeID", "60");
						else if(userPartnerTypes.equalsIgnoreCase("000003"))
							scfInsertPayLoad.accumulate("CPTypeID", "01");
						scfInsertPayLoad.accumulate("AggregatorID", aggregatorID);
						scfInsertPayLoad.accumulate("AccountNo", inputJsonObj.getString("BankAccntNo"));
						scfInsertPayLoad.accumulate("DDBActive", inputJsonObj.getString("DDBActive"));
						scfInsertPayLoad.accumulate("StatusID", "000002");
						scfInsertPayLoad.accumulate("CallBackStatus", "000080");
						scfInsertPayLoad.accumulate("CreatedBy", createdBy);
						scfInsertPayLoad.accumulate("CreatedAt", createdAt);
						scfInsertPayLoad.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
						
						
						oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
						userName = getODataDestinationProperties("User", "PYGWHANA");
						password = getODataDestinationProperties("Password", "PYGWHANA");
						userPass = userName+":"+password;
						executeURL = oDataUrl+"SupplyChainFinances";
						
						if(debug){
							response.getWriter().println("insertOfflineODAIntoSCF.executeURL: "+executeURL);
							response.getWriter().println("insertOfflineODAIntoSCF.oDataUrl: "+oDataUrl);
							response.getWriter().println("insertOfflineODAIntoSCF.userName: "+userName);
							response.getWriter().println("insertOfflineODAIntoSCF.scfInsertPayLoad: "+scfInsertPayLoad.toString());
						}
						
						scfInsertResponseObj = executePostURL(executeURL, userPass, response, scfInsertPayLoad, request, debug, "PYGWHANA");
						
						if(scfInsertResponseObj.has("error")){
							message = scfInsertResponseObj.get("error").getAsJsonObject().get("message").getAsJsonObject().get("value").getAsString();
						}
						
						return message;
					}else{
//						More than one partner is assigned for that login
						message = "155";
						if(debug)
							response.getWriter().println("insertOfflineODAIntoSCF.message: "+message);
						return message;
					}
				}
			}
		}catch (Exception e) {
			
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug){	
				response.getWriter().print("Exception in insertOfflineODAIntoSCF: "+e.getLocalizedMessage()+"-"+buffer.toString());
			}
			
			message = e.getLocalizedMessage()+"-"+buffer.toString();
			return message;
		}
	}
	
	public JsonObject userAccountsChange(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, String loginID, 
			String aggregatorID, String oDataURL, Properties properties, boolean debug) throws IOException{
		JsonObject userAccChangeResponseToUI = new JsonObject();
		JsonObject bankAccountEntriesJson = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject bankAccountEntriesJsonWithSI = new JsonObject();
		
		int userAccSize = 0;
		String message = "", accountNoFromUI="", ddbActiveFromUI="", accountTypeFromWS="", isCFSOFFromWS="";
		boolean hasUserRegistered = true, updateEntryFlag = false, isUpdateSuccess = false;
		Map<String, String> userRegMap = new HashMap<String, String>();
		Map<String,String> accountsWSResponseMap = new HashMap<String,String>();
		
		String errorResponse = "{\"error\":{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":{\"lang\":\"en\",\"value\":\"ERROR_MESSAGE\"}"
				+ ",\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PYGW\""
				+ ",\"service_version\":\"0001\"},\"transactionid\":\"8A50D8E98D62F127A8EC001372667F53\",\"timestamp\":null"
				+ ",\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\""
				+ ",\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\""
				+ ",\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"}"
				+ ",\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":\"ERROR_MESSAGE\",\"propertyref\":\"\""
				+ ",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\""
				+ ",\"message\":\"An application exception has occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
		try{
			if(debug){
				response.getWriter().println("userAccountsChange.inputJsonObject: "+inputJsonObject);
			}
			
			bankAccountEntriesJson = getUserAccountsInJson(request, response, loginID, oDataURL, aggregatorID, "", properties, debug);
			if(debug){
				response.getWriter().println("userAccountsChange.bankAccountEntriesJson: "+bankAccountEntriesJson);
			}
			
			if(! bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").isJsonNull() 
					&& bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().length() > 0){
				/*errorResponseObj.addProperty("Status", "000000");
				errorResponseObj.addProperty("ErrorCode", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString());
				errorResponseObj.addProperty("ErrorMessage", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorMessage").getAsString());
				userAccChangeResponseToUI.add("d", errorResponseObj);*/
				String responseErrorCode = "", responseErrorMessage="";
				
				responseErrorCode = bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString();
				responseErrorMessage = bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorMessage").getAsString();
				
				errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
				errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
				
				userAccChangeResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				response.getWriter().println(userAccChangeResponseToUI);
				if(debug)
					response.getWriter().println("userAccountsChange.Failure Response.userAccChangeResponseToUI: "+userAccChangeResponseToUI);
				
				return userAccChangeResponseToUI;
//				return userAccChangeResponseToUI;
			}else{
				userAccSize = getResultsSize(response, bankAccountEntriesJson, debug);
				
				if(userAccSize > 0){
					message = validateAccountForChange(response, inputJsonObject, bankAccountEntriesJson, loginID, aggregatorID, oDataURL, debug);
				}
				
				if(message != null && message.trim().length() > 0){
					if(message.equalsIgnoreCase("151")){
						errorResponseObj.addProperty("Status", "000000");
						errorResponseObj.addProperty("ErrorCode", message);
						errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
						userAccChangeResponseToUI.add("d", errorResponseObj);
					}else{
						errorResponseObj.addProperty("Status", "000000");
						errorResponseObj.addProperty("ErrorCode", "001");
						errorResponseObj.addProperty("ErrorMessage", message);
						userAccChangeResponseToUI.add("d", errorResponseObj);
					}
				}else{
					userRegMap = getUserRegDetails(request, response, loginID, aggregatorID, oDataURL, debug);
					
					for (String key : userRegMap.keySet()) {
						if(debug)
							response.getWriter().println("userAccountsChange-userRegResponseMap: "+key + " - " + userRegMap.get(key));
						
						if(key.equalsIgnoreCase("Error")){
							if(userRegMap.get(key).equalsIgnoreCase("054") || userRegMap.get(key).equalsIgnoreCase("001")){
								hasUserRegistered = false;
								break;
							}else{
								if(! userRegMap.get("UserRegStatus").equalsIgnoreCase("000002")){
									hasUserRegistered = false;
									break;
								}
							}
						}
					}
					
					if(hasUserRegistered){
						if(debug){
							response.getWriter().println("userAccountsChange.loginID"+loginID);
							response.getWriter().println("userAccountsChange.oDataURL"+oDataURL);
							response.getWriter().println("userAccountsChange.aggregatorID"+aggregatorID);
						}
						//Call Accounts WS
						accountsWSResponseMap = getAccountDetails(request, response, inputJsonObject, userRegMap, aggregatorID, debug);
						
						if(debug){
							for (String key : accountsWSResponseMap.keySet()) {
								response.getWriter().println("userAccountsChange-accountsWSResponseMap: "+key + " - " + accountsWSResponseMap.get(key));
							}
						}
						
						if(accountsWSResponseMap.get("Error").equalsIgnoreCase("059")){
							message = "059";
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", accountsWSResponseMap.get("Message"));
							userAccChangeResponseToUI.add("d", errorResponseObj);
						}else{
							bankAccountEntriesJsonWithSI = bankAccountEntriesJson;
							bankAccountEntriesJson = null;
							bankAccountEntriesJson = setStandingInstruction1(request, response, bankAccountEntriesJsonWithSI, properties, loginID, aggregatorID, oDataURL, debug);
							if(debug)
								response.getWriter().println("userAccountsChange.bankAccountEntriesJsonWithSI: "+bankAccountEntriesJson);
							
							accountNoFromUI = inputJsonObject.getString("BankAccntNo");
							ddbActiveFromUI = inputJsonObject.getString("DDBActive");
							accountTypeFromWS = accountsWSResponseMap.get("AccountType");
							isCFSOFFromWS = accountsWSResponseMap.get("IsCFSOD");
							if(debug){
								response.getWriter().println("userAccountsChange.bankAccountEntriesJson: "+bankAccountEntriesJson);
								response.getWriter().println("userAccountsChange.accountTypeFromWS: "+accountTypeFromWS);
								response.getWriter().println("userAccountsChange.isCFSOFFromWS: "+isCFSOFFromWS);
							}
							
							if(accountTypeFromWS != null && accountTypeFromWS.trim().equalsIgnoreCase("ODA")){
								//When the Account Type is ODA
								if(isCFSOFFromWS != null && isCFSOFFromWS.trim().equalsIgnoreCase("Y")){
									//When the Account Type is ODA and ISCFSOD is 'Y'
									if(inputJsonObject.getString("DDBActive") != null && inputJsonObject.getString("DDBActive").trim().equalsIgnoreCase("")){
										message = "149";
										errorResponseObj.addProperty("Status", "000000");
										errorResponseObj.addProperty("ErrorCode", message);
										errorResponseObj.addProperty("ErrorMessage", accountsWSResponseMap.get("Message"));
										userAccChangeResponseToUI.add("d", errorResponseObj);
									}else{
										//Proceed to update
										if(debug)
											response.getWriter().println("update1");
										updateEntryFlag = true;
									}
								}else{
									//When the Account Type is ODA and ISCFSOD is 'N'
									if(inputJsonObject.getString("DDBActive") != null && inputJsonObject.getString("DDBActive").trim().equalsIgnoreCase("X")){
										message = "146";
										errorResponseObj.addProperty("Status", "000000");
										errorResponseObj.addProperty("ErrorCode", message);
										errorResponseObj.addProperty("ErrorMessage", accountsWSResponseMap.get("Message"));
										userAccChangeResponseToUI.add("d", errorResponseObj);
									}else{
										//Proceed to update
										if(debug)
											response.getWriter().println("update2");
										updateEntryFlag = true;
									}
								}
							}else if(accountTypeFromWS != null && accountTypeFromWS.trim().equalsIgnoreCase("CAA")){
								//When the Account Type is CAA
								JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
								JsonArray dresults = results.get("results").getAsJsonArray();
								accountNoFromUI = inputJsonObject.getString("BankAccntNo");
								ddbActiveFromUI = inputJsonObject.getString("DDBActive");
								boolean caaUpdValidation = true;
								for (int i = 0; i <= dresults.size() - 1; i++) {
									if(accountNoFromUI.equalsIgnoreCase(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntNo").getAsString())){
										if(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString().equalsIgnoreCase("O")){
											//Proceed to update
											if(debug)
												response.getWriter().println("update3");
											updateEntryFlag = true;
										}else{
											if(debug)
												response.getWriter().println("caaUpdValidation: "+caaUpdValidation);
											caaUpdValidation = false;
										}
									}
								}
								
								if(! caaUpdValidation){
									for (int i = 0; i <= dresults.size() - 1; i++) {
										if((bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA"))
											&& (bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString().equalsIgnoreCase("X"))){
											if(ddbActiveFromUI.equalsIgnoreCase("X")){
												message = "148";
												errorResponseObj.addProperty("Status", "000000");
												errorResponseObj.addProperty("ErrorCode", message);
												errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
												userAccChangeResponseToUI.add("d", errorResponseObj);
											}
										}else{
											if((bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA"))
											&& (!bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))
											&& (! accountNoFromUI.equalsIgnoreCase(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntNo").getAsString()))){
												if(ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "147";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccChangeResponseToUI.add("d", errorResponseObj);
												}else{
													//Proceed to update
													if(debug)
														response.getWriter().println("update4");
													updateEntryFlag = true;
												}
											}else{
												//Proceed to update
												if(debug)
													response.getWriter().println("update5");
												updateEntryFlag = true;
											}
										}
									}
								}
							}else{
								//When the Account Type is other than ODA and CAA
								message = "146";
								errorResponseObj.addProperty("Status", "000000");
								errorResponseObj.addProperty("ErrorCode", message);
								errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
								userAccChangeResponseToUI.add("d", errorResponseObj);
							}
						}
					}
				}
				if(debug){
					response.getWriter().println("userAccountsChange.inputJsonObject: "+inputJsonObject);
					response.getWriter().println("userAccountsChange.bankAccountEntriesJson: "+bankAccountEntriesJson);
				}
				
				String responseErrorCode = "", responseErrorMessage="";
				if(updateEntryFlag){
					//Call Update
					userAccChangeResponseToUI = updateUserAccounts(request, response, inputJsonObject, bankAccountEntriesJson, debug);
					if(debug)
						response.getWriter().println("userAccountsChange.userAccChangeResponseToUI: "+userAccChangeResponseToUI);
					
					if(! userAccChangeResponseToUI.get("d").getAsJsonObject().isJsonNull()){
						if(! userAccChangeResponseToUI.get("d").getAsJsonObject().get("ErrorCode").isJsonNull()
							&& userAccChangeResponseToUI.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().equalsIgnoreCase("001")){
							//Update Failure
							responseErrorCode = "156";
							responseErrorMessage = properties.getProperty(responseErrorCode);
							
							errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
							errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
							
							userAccChangeResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
							response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
							response.getWriter().println(userAccChangeResponseToUI);
							if(debug)
								response.getWriter().println("userAccountsChange.Failure Response.userAccChangeResponseToUI: "+userAccChangeResponseToUI);
							
							return userAccChangeResponseToUI;
						}else{
							//Update Success
							userAccChangeResponseToUI = new JsonObject();
							response.setStatus(HttpServletResponse.SC_NO_CONTENT);
							response.getWriter().println(userAccChangeResponseToUI);
							return userAccChangeResponseToUI;
						}
					}else{
						//Update Success
						userAccChangeResponseToUI = new JsonObject();
						response.setStatus(HttpServletResponse.SC_NO_CONTENT);
						response.getWriter().println(userAccChangeResponseToUI);
						return userAccChangeResponseToUI;
					}
				}else{
					//Error Response
					/*errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccChangeResponseToUI.add("d", errorResponseObj);*/
					
					responseErrorCode = message;
					responseErrorMessage = properties.getProperty(message);
					
					errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
					errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
					
					userAccChangeResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
					response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					response.getWriter().println(userAccChangeResponseToUI);
					if(debug)
						response.getWriter().println("userAccountsChange.Failure Response.userAccChangeResponseToUI: "+userAccChangeResponseToUI);
					
					return userAccChangeResponseToUI;
				}
			}
		}catch (Exception e) {
			String responseErrorCode = "", responseErrorMessage="";
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in updateUserAccounts.message: "+buffer.toString());
			}
			
			/*message = "001";
			errorResponseObj.addProperty("Status", "000000");
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", e.getMessage());
			userAccChangeResponseToUI.add("d", errorResponseObj);*/
			
			
			responseErrorCode = message;
			responseErrorMessage = "Error in userAccountsChange: "+e.getMessage();
			
			errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
			errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
			
			userAccChangeResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			response.getWriter().println(userAccChangeResponseToUI);
			if(debug)
				response.getWriter().println("userAccountsChange.Failure Response.userAccChangeResponseToUI: "+userAccChangeResponseToUI);
			
			return userAccChangeResponseToUI;
		}
		
//		return userAccChangeResponseToUI;
	}
	
	public JsonObject updateUserAccounts(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			JsonObject bankAccountEntriesJson, boolean debug) throws IOException{
		JsonObject updateReturnObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject entryToUpdate = new JsonObject();
		String message = "", accountGuidFromUI = "", changedBy="", changedAt="", oDataUrl="", userName="", password="", userPass="", executeURL="";
		long changedOnInMillis = 0;
		try{
			accountGuidFromUI = inputJsonObject.getString("UaccntGuid");
			entryToUpdate = getUserAccountEntryForUpdate(response, accountGuidFromUI, debug);
			if(debug)
				response.getWriter().println("updateUserAccounts.entryToUpdate: "+entryToUpdate);
			if(entryToUpdate.get("ErrorCode").getAsString().equalsIgnoreCase("")){
				changedBy = getUserPrincipal(request, "name", response);
				changedOnInMillis = getCreatedOnDate();
				changedAt = getCreatedAtTime();
				
				JSONObject entryPayload = new JSONObject();
				
				if(debug){
					response.getWriter().println("updateUserAccounts.entryToUpdate: "+entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject());
					response.getWriter().println("updateUserAccounts.accountGuidFromUI: "+accountGuidFromUI);
					response.getWriter().println("updateUserAccounts.changedBy: "+changedBy);
					response.getWriter().println("updateUserAccounts.changedOnInMillis: "+changedOnInMillis);
					response.getWriter().println("updateUserAccounts.changedAt: "+changedAt);
				}
				
				entryPayload.accumulate("UaccntGuid", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("UaccntGuid").getAsString());
				entryPayload.accumulate("AggregatorID", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("AggregatorID").getAsString());
				entryPayload.accumulate("LoginId", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("LoginId").getAsString());
				entryPayload.accumulate("Corpid", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("Corpid").getAsString());
				entryPayload.accumulate("Userid", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("Userid").getAsString());
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankCountry").isJsonNull())
					entryPayload.accumulate("BankCountry", "");
				else
					entryPayload.accumulate("BankCountry", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankCountry").getAsString());
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankKey").isJsonNull())
					entryPayload.accumulate("BankKey", "");
				else
					entryPayload.accumulate("BankKey", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankKey").getAsString());
				
				entryPayload.accumulate("BankAccntNo", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankAccntNo").getAsString());
				entryPayload.accumulate("BankAccntType", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankAccntType").getAsString());
				entryPayload.accumulate("BankAccntSts", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("BankAccntSts").getAsString());
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedBy").isJsonNull()){
					entryPayload.accumulate("CreatedBy", "");
				}else{
					entryPayload.accumulate("CreatedBy", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedBy").getAsString());	
				}
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedAt").isJsonNull()){
					entryPayload.accumulate("CreatedAt", JSONObject.NULL);
				}else{
					entryPayload.accumulate("CreatedAt", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedAt").getAsString());
				}
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedOn").isJsonNull()){
					entryPayload.accumulate("CreatedOn", JSONObject.NULL);
				}else{
					entryPayload.accumulate("CreatedOn", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("CreatedOn").getAsString());	
				}
				
				entryPayload.accumulate("ChangedBy", changedBy);
				entryPayload.accumulate("ChangedAt", changedAt);
				entryPayload.accumulate("ChangedOn", "/Date("+changedOnInMillis+")/");
				
				if(entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("Source").isJsonNull())
					entryPayload.accumulate("Source", "");
				else
					entryPayload.accumulate("Source", entryToUpdate.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("Source").getAsString());
			
				entryPayload.accumulate("DDBActive", inputJsonObject.getString("DDBActive"));
				
				oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
				userName = getODataDestinationProperties("User", "PYGWHANA");
				password = getODataDestinationProperties("Password", "PYGWHANA");
				userPass = userName+":"+password;
				
				executeURL = oDataUrl+"UserAccounts('"+accountGuidFromUI+"')";
				if(debug)
					response.getWriter().println("updateUserAccounts.executeURL: "+executeURL);
				
				updateReturnObj = executeUpdate(executeURL, userPass, response, entryPayload, request, debug, "PYGWHANA");
				if(debug){
					response.getWriter().println("updateUserAccounts.updateReturnObjBefore: "+updateReturnObj);
				}
				
				if(! updateReturnObj.get("ErrorCode").isJsonNull() && updateReturnObj.get("ErrorCode").getAsString().trim().length() > 0){
					message = "001";
					errorResponseObj.addProperty("Status", "000001");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", updateReturnObj.toString());
					updateReturnObj = new JsonObject();
					updateReturnObj.add("d", errorResponseObj);
				}else{
					message = "000";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", "Update Success");
					updateReturnObj = new JsonObject();
					updateReturnObj.add("d", errorResponseObj);
				}
				if(debug){
					response.getWriter().println("updateUserAccounts.updateReturnObj: "+updateReturnObj);
				}
			}else{
				message = entryToUpdate.get("d").getAsJsonObject().get("ErrorCode").getAsString();
				errorResponseObj.addProperty("Status", "000000");
				errorResponseObj.addProperty("ErrorCode", message);
				errorResponseObj.addProperty("ErrorMessage", entryToUpdate.get("d").getAsJsonObject().get("ErrorMessage").getAsString());
				updateReturnObj.add("d", errorResponseObj);
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in updateUserAccounts.message: "+buffer.toString());
			}
			message = "001";
			errorResponseObj.addProperty("Status", "000000");
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", e.getMessage());
			updateReturnObj.add("d", errorResponseObj);
		}
		
		return updateReturnObj;
	}
	
	public JsonObject deleteAccount(HttpServletRequest request, HttpServletResponse response, String accountGuid, String loginID, 
			String aggregatorID, String oDataURL, Properties properties, boolean debug) throws IOException{
		JsonObject userAccDeleteResponseToUI = new JsonObject();
		String accountGuidFromUI="", oDataUrl="", userName="", password="", userPass="", executeURL="";
		String responseErrorCode = "", responseErrorMessage="";
		String errorResponse = "{\"error\":{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":{\"lang\":\"en\",\"value\":\"ERROR_MESSAGE\"}"
				+ ",\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PYGW\""
				+ ",\"service_version\":\"0001\"},\"transactionid\":\"8A50D8E98D62F127A8EC001372667F53\",\"timestamp\":null"
				+ ",\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\""
				+ ",\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\""
				+ ",\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"}"
				+ ",\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":\"ERROR_MESSAGE\",\"propertyref\":\"\""
				+ ",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\""
				+ ",\"message\":\"An application exception has occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
		
		try{
			accountGuidFromUI = accountGuid;
			
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserAccounts('"+accountGuidFromUI+"')";
			if(debug)
				response.getWriter().println("deleteAccount.executeURL: "+executeURL);
			
			userAccDeleteResponseToUI = executeDelete(executeURL, userPass, response, request, debug, "PYGWHANA");
			
			if(debug){
				response.getWriter().println("deleteAccount.userAccDeleteResponseToUI: "+userAccDeleteResponseToUI);
			}
			
			if(! userAccDeleteResponseToUI.get("ErrorCode").isJsonNull() 
					&& userAccDeleteResponseToUI.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")){
				//Update Success
				String successResponse = "{\"code\":\"/ARTEC/PY/046\",\"message\":\"Account Deleted Sucessfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
				userAccDeleteResponseToUI = new JsonParser().parse(successResponse).getAsJsonObject();
//				if(! debug)
//					response.setStatus(HttpServletResponse.SC_ACCEPTED);
//					response.setStatus(HttpServletResponse.SC_NO_CONTENT);
//				response.getWriter().println(userAccDeleteResponseToUI);
				
				return userAccDeleteResponseToUI;
			}else{
				//Update Failure
				responseErrorCode = "047";
				responseErrorMessage = properties.getProperty(responseErrorCode);
				
				errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
				errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
				
				userAccDeleteResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
//				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				
				if(debug)
					response.getWriter().println("deleteAccount.Failure Response.userAccChangeResponseToUI: "+userAccDeleteResponseToUI);
				
//				response.getWriter().println(userAccDeleteResponseToUI);
				return userAccDeleteResponseToUI;
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in deleteAccount.message: "+buffer.toString());
			}
			responseErrorCode = "047";
			responseErrorMessage = properties.getProperty(responseErrorCode);
			
			errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
			errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
			
			userAccDeleteResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			
			if(debug)
				response.getWriter().println("deleteAccount.Failure Response.userAccChangeResponseToUI: "+userAccDeleteResponseToUI);
			
			response.getWriter().println(userAccDeleteResponseToUI);
			
			return userAccDeleteResponseToUI;
		}
	}
	
	public JsonObject executeDelete(String executeURL, String userPass, HttpServletResponse response, HttpServletRequest request, boolean debug, String destination) throws IOException{
		
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		
		/*DataOutputStream dataOut = null;
		BufferedReader in =null;
		JsonObject jsonObj = new JsonObject();
		HttpEntity countEntity = null;
		String Data = "";*/
		try{
			if(debug){
				response.getWriter().println("executeDelete-executeURL: "+executeURL);
//				response.getWriter().println("scfInsrPayLoad: "+scfInsrPayLoad.toString());
			}
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration("PYGWHANA");
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			
			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", "PYGWHANA"));
            }
			
			// String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			byte[] encodedByte = Base64.getEncoder().encode(authParam.getBytes());
			String encodedStr = new String(encodedByte);
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeDelete.executeURL: "+ executeURL);
		        // response.getWriter().println("executeDelete.proxyType: "+ proxyType);
		        response.getWriter().println("executeDelete.userName: "+ userName);
		        response.getWriter().println("executeDelete.password: "+ password);
		        response.getWriter().println("executeDelete.authParam: "+ authParam);
		        response.getWriter().println("executeDelete.basicAuth: "+ basicAuth);
			}
			
			/*String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
	        int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
	        HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);*/
	        
	        /* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
//	        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
	        httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build(); */
	        /*HttpPost deleteRequest = new HttpPost(executeURL);
	        deleteRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        deleteRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        deleteRequest.setHeader("Content-Type", "application/json");
	        deleteRequest.setHeader("Accept", "application/json");
	        deleteRequest.setHeader("Accept", "application/json");
	        deleteRequest.setHeader("X-HTTP-Method", "DELETE");*/
	        HttpDelete deleteRequest = new HttpDelete(executeURL);
//	        deleteRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        deleteRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        deleteRequest.setHeader("Content-Type", "application/json");
	        deleteRequest.setHeader("Accept", "application/json");
//	        deleteRequest.setHeader("Accept", "application/json");
	        deleteRequest.setHeader("X-HTTP-Method", "DELETE");
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
//	        connection.setRequestMethod("GET");
//	        http
			// HttpResponse httpResponse = httpClient.execute(deleteRequest);
			HttpResponse httpResponse = client.execute(deleteRequest);
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println(" httpResponse response "+httpResponse.toString());
				response.getWriter().println("Http Response status Code "+statusCode);
			}
			if (statusCode != 204) {
				if (httpResponse != null && httpResponse.getEntity() != null) {
					responseEntity = httpResponse.getEntity();
				}
			}
			
			if (debug) {
				if (statusCode != 204) {
					String retSrc = EntityUtils.toString(responseEntity);
					response.getWriter().println("executeDelete.retSrc: " + retSrc);
				}
				response.getWriter()
						.println("executeDelete.getStatusCode: " + httpResponse.getStatusLine().getStatusCode());
				response.getWriter().println("executeDelete.responseEntity: " + responseEntity);
			}
				
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
			
			
//			String authParam = userName+":"+password;
			/*HttpDestination destination = getHTTPDestination(request, response, "PYGWHANA");
			HttpClient httpClient = destination.createHttpClient();

			HttpPost postRequest = new HttpPost(executeURL);
			postRequest.setHeader("Content-Type", "application/json");
			postRequest.setHeader("Accept", "application/json");
			postRequest.setHeader("X-HTTP-Method", "DELETE");
//			postRequest.setHeader("X-CSRF-Token", csrfToken);
			
			HttpResponse httpPostResponse = httpClient.execute(postRequest);
			countEntity = httpPostResponse.getEntity();
			
			if(debug)
				response.getWriter().println("executeUpdate.countEntity: "+countEntity);

			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");*/
		}catch (Exception e) {
//			response.getWriter().println("Data: "+Data);
			response.getWriter().println("Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("executeUpdate-Exception Stack Trace: "+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}/* finally{
			httpClient.close();
		} */
		
		return jsonObj;
	}
	
	public JsonObject getUserAccountEntryForUpdate(HttpServletResponse response, String accountGuid, boolean debug) throws IOException{
		JsonObject accountsEntry = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		String oDataURL="", aggregatorID="", userName="", password="", userPass="", executeURL="";
		try{
			oDataURL = getODataDestinationProperties("URL", "PYGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataURL+"UserAccounts?$filter=UaccntGuid%20eq%20%27"+accountGuid+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getUserAccountEntryForUpdate-executeURL: "+executeURL);
			
			accountsEntry = executeURL(executeURL, userPass, response);
			
			accountsEntry.addProperty("ErrorCode", "");
			accountsEntry.addProperty("ErrorMessage", "");
			
			if(debug)
				response.getWriter().println("getUserAccountEntryForUpdate-accountsEntry: "+accountsEntry);
			
			return accountsEntry;
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			accountsEntry.addProperty("ErrorCode", "001");
			accountsEntry.addProperty("ErrorMessage", e.getMessage()+".CommonUtils.getUserAccountEntryForUpdate --> "+buffer.toString());
//			accountsEntry.add("d", errorResponseObj);
			
			return accountsEntry;
		}
	}
	
	public String updateUserAccounts(HttpServletRequest request, HttpServletResponse response, JsonObject entryToUpdate, 
			String aggregatorID, boolean debug) throws IOException{
		String message = "", executeURL="", oDataUrl="", userName="", password="", userPass="", accountGuid="", changedBy="", changedAt="";
		long changedOnInMillis=0;
		JsonObject updateResponse = new JsonObject();
		try{
			changedBy = getUserPrincipal(request, "name", response);
			changedOnInMillis = getCreatedOnDate();
			changedAt = getCreatedAtTime();
			
			JSONObject entryPayload = new JSONObject();
			
			accountGuid = entryToUpdate.get("UaccntGuid").getAsString();
			if(debug){
				response.getWriter().println("updateUserAccounts.entryToUpdate: "+entryToUpdate);
				response.getWriter().println("updateUserAccounts.accountGuid: "+accountGuid);
				response.getWriter().println("updateUserAccounts.entryPayload: "+entryPayload);
				response.getWriter().println("updateUserAccounts.changedBy: "+changedBy);
				response.getWriter().println("updateUserAccounts.changedOnInMillis: "+changedOnInMillis);
				response.getWriter().println("updateUserAccounts.changedAt: "+changedAt);
			}
			
			entryPayload.accumulate("UaccntGuid", entryToUpdate.get("UaccntGuid").getAsString());
			entryPayload.accumulate("AggregatorID", entryToUpdate.get("AggregatorID").getAsString());
			entryPayload.accumulate("LoginId", entryToUpdate.get("LoginId").getAsString());
			entryPayload.accumulate("Corpid", entryToUpdate.get("Corpid").getAsString());
			entryPayload.accumulate("Userid", entryToUpdate.get("Userid").getAsString());
			
			if(entryToUpdate.get("BankCountry").isJsonNull())
				entryPayload.accumulate("BankCountry", "");
			else
				entryPayload.accumulate("BankCountry", entryToUpdate.get("BankCountry").getAsString());
			
			if(entryToUpdate.get("BankKey").isJsonNull())
				entryPayload.accumulate("BankKey", "");
			else
				entryPayload.accumulate("BankKey", entryToUpdate.get("BankKey").getAsString());
			
			entryPayload.accumulate("BankAccntNo", entryToUpdate.get("BankAccntNo").getAsString());
			entryPayload.accumulate("BankAccntType", entryToUpdate.get("BankAccntType").getAsString());
			entryPayload.accumulate("BankAccntSts", entryToUpdate.get("BankAccntSts").getAsString());
			entryPayload.accumulate("CreatedBy", entryToUpdate.get("CreatedBy").getAsString());
			entryPayload.accumulate("CreatedAt", entryToUpdate.get("CreatedAt").getAsString());
			entryPayload.accumulate("CreatedOn", entryToUpdate.get("CreatedOn").getAsString());
			entryPayload.accumulate("ChangedBy", changedBy);
			entryPayload.accumulate("ChangedAt", changedAt);
			entryPayload.accumulate("ChangedOn", "/Date("+changedOnInMillis+")/");
			
			if(entryToUpdate.get("Source").isJsonNull())
				entryPayload.accumulate("Source", "");
			else
				entryPayload.accumulate("Source", entryToUpdate.get("Source").getAsString());
			entryPayload.accumulate("DDBActive", "");
			
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserAccounts('"+accountGuid+"')";
			if(debug)
				response.getWriter().println("updateUserAccounts.executeURL: "+executeURL);
			
			updateResponse = executeUpdate(executeURL, userPass, response, entryPayload, request, debug, "PYGWHANA");
			
			if(! updateResponse.get("ErrorCode").isJsonNull() && updateResponse.get("ErrorCode").getAsString().trim().length() > 0){
				message = updateResponse.toString();
			}
			if(debug){
				response.getWriter().println("updateUserAccounts.updateResponse: "+updateResponse);
			}
				
//			return message;
		}catch (Exception e) {
			message = e.getMessage();
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in updateUserAccounts.message: "+buffer.toString());
			}
//			return message;
		}
		if(debug){
			response.getWriter().println("updateUserAccounts.message: "+message);
		}
		return message;
	}
	
	public String insertIntoUserAccounts(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, Map<String, String> userRegMap, 
			String setSIForResponse, Map<String, String> accountsWSResponseMap, String aggregatorID, String loginID, boolean debug) throws IOException{
		String message = "", executeURL="", oDataUrl="", userName="", password="", userPass="", accountGuid="", createdBy="", createdAt="", accountStatusCode="";
		long createdOnInMillis=0;
		JsonObject insertResponse = new JsonObject();
		try{
			accountStatusCode = getAccountStatusCode(request, response, aggregatorID, accountsWSResponseMap.get("AccountStatus"), debug);
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			
			JSONObject entryPayload = new JSONObject();
			
//			accountGuid = inputJsonObj.getString("UaccntGuid");
			if(debug){
				response.getWriter().println("insertIntoUserAccounts.inputJsonObj: "+inputJsonObj);
				response.getWriter().println("insertIntoUserAccounts.accountGuid: "+accountGuid);
				response.getWriter().println("insertIntoUserAccounts.entryPayload: "+entryPayload);
				response.getWriter().println("insertIntoUserAccounts.changedBy: "+createdBy);
				response.getWriter().println("insertIntoUserAccounts.changedOnInMillis: "+createdOnInMillis);
				response.getWriter().println("insertIntoUserAccounts.changedAt: "+createdAt);
			}
			
			entryPayload.accumulate("UaccntGuid", inputJsonObj.getString("UaccntGuid"));
			entryPayload.accumulate("AggregatorID", aggregatorID);
			entryPayload.accumulate("LoginId", loginID);
			entryPayload.accumulate("Corpid", userRegMap.get("CorpId"));
			entryPayload.accumulate("Userid", userRegMap.get("UserId"));
			entryPayload.accumulate("BankCountry", "");
			entryPayload.accumulate("BankKey", "");
			entryPayload.accumulate("BankAccntNo", inputJsonObj.getString("BankAccntNo"));
			entryPayload.accumulate("BankAccntType", accountsWSResponseMap.get("AccountType"));
//			entryPayload.accumulate("BankAccntSts", accountsWSResponseMap.get("AccountStatus"));
			entryPayload.accumulate("BankAccntSts", accountStatusCode);
			entryPayload.accumulate("DDBActive", inputJsonObj.getString("DDBActive"));
			entryPayload.accumulate("CreatedBy", createdBy);
			entryPayload.accumulate("CreatedAt", createdAt);
			entryPayload.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			entryPayload.accumulate("ChangedBy", null);
			entryPayload.accumulate("ChangedAt", null);
			entryPayload.accumulate("ChangedOn", null);
			entryPayload.accumulate("Source", "");
			
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserAccounts";
			if(debug)
				response.getWriter().println("insertIntoUserAccounts.executeURL: "+executeURL);
			
			insertResponse = executePostURL(executeURL, userPass, response, entryPayload, request, debug, "PYGWHANA");
			
			if(debug)
				response.getWriter().println("insertIntoUserAccounts.insertResponse: "+insertResponse);
			
			message = insertResponse.toString();
			
			return message;
		}catch (Exception e) {
//			message = e.getLocalizedMessage();
			message = "";
			return message;
		}
	}
	
	public JsonObject getUserCustomers(HttpServletResponse response, String loginID, String aggregatorID, boolean debug) throws IOException{
		JsonObject userCustomerObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		String oDataUrl="", userName="", password="", userPass="", executeURL="";
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserCustomers?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			userCustomerObj = executeURL(executeURL, userPass, response);
			
			JsonObject results = userCustomerObj.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(dresults.size() > 0){
				userCustomerObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
				userCustomerObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
			}else{
				userCustomerObj.get("d").getAsJsonObject().addProperty("ErrorCode", "000");
				userCustomerObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "No Records Found in Entity UserCustomers for the Login ID");
			}
			
			if(debug){
				response.getWriter().println("getUserCustomers.userCustomerObj: "+userCustomerObj);
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			errorResponseObj.addProperty("ErrorCode", "001");
			errorResponseObj.addProperty("ErrorMessage", e.getMessage()+".CommonUtils.getUserCustomers --> "+buffer.toString());
			userCustomerObj.add("d", errorResponseObj);
		}
		
		return userCustomerObj;
	}
	
	public Map<String, String> getSCFEntryForTheUser(HttpServletResponse response, JSONObject inputJsonObj, String aggregatorID, String loginID, boolean debug) throws IOException{
		Map<String, String> scfEntryMap = new HashMap<String, String>();
		String oDataUrl="", userName="", password="", userPass="", accountNo="", executeURL="", userPartnerTypes="";
		JsonObject scfJsonObject = new JsonObject();
		JsonObject userCustomerObj = new JsonObject();
		JsonObject userPartnerJsonResponse = new JsonObject();
		boolean isError = false;
		try{
			
			userPartnerJsonResponse = getUserPartnerTypes(response, loginID, aggregatorID, debug);
			JsonArray userPartnerJsonArray = userPartnerJsonResponse.getAsJsonObject("d").getAsJsonArray("results");
			JsonObject childUserPartnerJsonObj = new JsonObject();
			if(userPartnerJsonArray.size() > 0)
				childUserPartnerJsonObj = userPartnerJsonArray.get(0).getAsJsonObject();
			
			if ( childUserPartnerJsonObj.has("PartnerTypeID") &&  ! childUserPartnerJsonObj.get("PartnerTypeID").isJsonNull() )
				userPartnerTypes = childUserPartnerJsonObj.get("PartnerTypeID").getAsString();
			else
				userPartnerTypes = "";
			
			if (userPartnerTypes.equalsIgnoreCase("000002"))
			{
				userCustomerObj = getVendors(response, loginID, aggregatorID, debug);
			}
			else if (userPartnerTypes.equalsIgnoreCase("000003"))
			{
				userCustomerObj = getUserCustomers(response, loginID, aggregatorID, debug);
			}
			else {
				isError = true;
			}
			
			if(isError) {
				scfEntryMap.put("ErrorCode", "001");
				scfEntryMap.put("ErrorMessage", "Invalid Partner type maintained");
				
			}else{
				JsonObject userResults = userCustomerObj.get("d").getAsJsonObject();
				if(! userResults.get("ErrorCode").isJsonNull() && userResults.get("ErrorCode").getAsString().trim().length() > 0){
					scfEntryMap.put("ErrorCode", userResults.get("ErrorCode").getAsString());
					scfEntryMap.put("ErrorMessage", userResults.get("ErrorMessage").getAsString());
				}else{
					JsonArray userDResults = userResults.get("results").getAsJsonArray();
					String appendUrl = "";
					for(int i=0 ; i<userDResults.size() ; i++){
						if(i != userDResults.size()-1)
							appendUrl = appendUrl+"CPGUID%20eq%20%27"+userDResults.getAsJsonArray().get(i).getAsJsonObject().get("PartnerID").getAsString()+"%27%20or%20";
						else
							appendUrl = appendUrl+"CPGUID%20eq%20%27"+userDResults.getAsJsonArray().get(i).getAsJsonObject().get("PartnerID").getAsString()+"%27";
					}
					
					if(debug)
						response.getWriter().println("getSCFEntryForTheUser.appendUrl: "+appendUrl);
					
					oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
					userName = getODataDestinationProperties("User", "PYGWHANA");
					password = getODataDestinationProperties("Password", "PYGWHANA");
					userPass = userName+":"+password;
					accountNo = inputJsonObj.getString("BankAccntNo");
					
//					executeURL = oDataUrl+"SCF?$filter=CP_GUID%20eq%20%27"+cpGuid+"%27%20and%20CP_TYPE%20eq%20%27"+cpType+"%27%20and%20AGGRID%20eq%20%27"+aggregatorID+"%27%20and%20STATUS_ID%20eq%20%27000003%27";
					executeURL = oDataUrl+"SupplyChainFinances?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20"+appendUrl;
					if(debug)
						response.getWriter().println("getSCFEntryForTheUser.executeURL: "+executeURL);
					
					scfJsonObject = executeURL(executeURL, userPass, response);
					
					if(debug)
						response.getWriter().println("getSCFEntryForTheUser.scfJsonObject: "+scfJsonObject);
//					scfJsonObject
					JsonObject results = scfJsonObject.get("d").getAsJsonObject();
					JsonArray dresults = results.get("results").getAsJsonArray();
					
					if(dresults.size() > 0){
						for (int i = 0; i <= dresults.size() - 1; i++) {
							JsonObject scfEntriesJsonObj = (JsonObject) dresults.get(i);
//							statusID = scfEntriesJsonObj.get("STATUS_ID").getAsString();
							scfEntryMap.put("ErrorCode", "");
							scfEntryMap.put("ErrorMessage", "");
							if(!scfEntriesJsonObj.get("CPGUID").isJsonNull())
								scfEntryMap.put("CPGUID", scfEntriesJsonObj.get("CPGUID").getAsString());
							else
								scfEntryMap.put("CPGUID", "");
							
							if(!scfEntriesJsonObj.get("CPTypeID").isJsonNull())
								scfEntryMap.put("CPTypeID", scfEntriesJsonObj.get("CPTypeID").getAsString());
							else
								scfEntryMap.put("CPTypeID", "");
							
							if(!scfEntriesJsonObj.get("OfferAmt").isJsonNull())
								scfEntryMap.put("OfferAmt", scfEntriesJsonObj.get("OfferAmt").getAsString());
							else
								scfEntryMap.put("OfferAmt", "");
							
							if(!scfEntriesJsonObj.get("OfferTenure").isJsonNull())
								scfEntryMap.put("OfferTenure", scfEntriesJsonObj.get("OfferTenure").getAsString());
							else
								scfEntryMap.put("OfferTenure", "");
							
							if(!scfEntriesJsonObj.get("Rate").isJsonNull())
								scfEntryMap.put("Rate", scfEntriesJsonObj.get("Rate").getAsString());
							else
								scfEntryMap.put("Rate", "");
							
							if(!scfEntriesJsonObj.get("AccountNo").isJsonNull())
								scfEntryMap.put("AccountNo", scfEntriesJsonObj.get("AccountNo").getAsString());
							else
								scfEntryMap.put("AccountNo", "");
							
							if(!scfEntriesJsonObj.get("NoOfChequeReturns").isJsonNull())
								scfEntryMap.put("NoOfChequeReturns", scfEntriesJsonObj.get("NoOfChequeReturns").getAsString());
							else
								scfEntryMap.put("NoOfChequeReturns", "");
							
							if(!scfEntriesJsonObj.get("PaymentDelayDays12Months").isJsonNull())
								scfEntryMap.put("PaymentDelayDays12Months", scfEntriesJsonObj.get("PaymentDelayDays12Months").getAsString());
							else
								scfEntryMap.put("PaymentDelayDays12Months", "");
							
							if(!scfEntriesJsonObj.get("BusinessVintageOfDealer").isJsonNull())
								scfEntryMap.put("BusinessVintageOfDealer", scfEntriesJsonObj.get("BusinessVintageOfDealer").getAsString());
							else
								scfEntryMap.put("BusinessVintageOfDealer", "");
							
							if(!scfEntriesJsonObj.get("PurchasesOf12Months").isJsonNull())
								scfEntryMap.put("PurchasesOf12Months", scfEntriesJsonObj.get("PurchasesOf12Months").getAsString());
							else
								scfEntryMap.put("PurchasesOf12Months", "");
							
							if(!scfEntriesJsonObj.get("DealersOverallScoreByCorp").isJsonNull())
								scfEntryMap.put("DealersOverallScoreByCorp", scfEntriesJsonObj.get("DealersOverallScoreByCorp").getAsString());
							else
								scfEntryMap.put("DealersOverallScoreByCorp", "");
							
							if(!scfEntriesJsonObj.get("CorpRating").isJsonNull())
								scfEntryMap.put("CorpRating", scfEntriesJsonObj.get("CorpRating").getAsString());
							else
								scfEntryMap.put("CorpRating", "");
							
							if(!scfEntriesJsonObj.get("DealerVendorFlag").isJsonNull())
								scfEntryMap.put("DealerVendorFlag", scfEntriesJsonObj.get("DealerVendorFlag").getAsString());
							else
								scfEntryMap.put("DealerVendorFlag", "");
							
							if(!scfEntriesJsonObj.get("ConstitutionType").isJsonNull())
								scfEntryMap.put("ConstitutionType", scfEntriesJsonObj.get("ConstitutionType").getAsString());
							else
								scfEntryMap.put("ConstitutionType", "");
							
							
							scfEntryMap.put("MaxLimitPerCorp", "");
							scfEntryMap.put("salesOf12Months", "");
							scfEntryMap.put("Currency", "");
							
							if(!scfEntriesJsonObj.get("StatusID").isJsonNull())
								scfEntryMap.put("StatusID", scfEntriesJsonObj.get("StatusID").getAsString());
							else
								scfEntryMap.put("StatusID", "");
							
							scfEntryMap.put("MCLR6Rate", "");
							scfEntryMap.put("InterestRateSpread", "");
							scfEntryMap.put("TenorOfPayment", "");
							scfEntryMap.put("ADDLNPRDINTRateSP", "");
							scfEntryMap.put("AddlnTenorOfPymt", "");
							scfEntryMap.put("DefIntSpread", "");
							scfEntryMap.put("ProcessingFee", "");
							
							if(!scfEntriesJsonObj.get("EContractID").isJsonNull())
								scfEntryMap.put("EContractID", scfEntriesJsonObj.get("EContractID").getAsString());
							else
								scfEntryMap.put("EContractID", "");
							
							if(!scfEntriesJsonObj.get("ECustomerID").isJsonNull())
								scfEntryMap.put("ECustomerID", scfEntriesJsonObj.get("ECustomerID").getAsString());
							else
								scfEntryMap.put("ECustomerID", "");
							
							if(!scfEntriesJsonObj.get("ApplicationNo").isJsonNull())
								scfEntryMap.put("ApplicationNo", scfEntriesJsonObj.get("ApplicationNo").getAsString());
							else
								scfEntryMap.put("ApplicationNo", "");
							
							if(!scfEntriesJsonObj.get("CallBackStatus").isJsonNull())
								scfEntryMap.put("CallBackStatus", scfEntriesJsonObj.get("CallBackStatus").getAsString());
							else
								scfEntryMap.put("CallBackStatus", "");
							
							scfEntryMap.put("ECompleteTime", "");
							scfEntryMap.put("ECompleteDate", "");
							
							if(!scfEntriesJsonObj.get("ApplicantID").isJsonNull())
								scfEntryMap.put("ApplicantID", scfEntriesJsonObj.get("ApplicantID").getAsString());
							else
								scfEntryMap.put("ApplicantID", "");
							
							scfEntryMap.put("LimitPrefix", "");
							scfEntryMap.put("InterestSpread", "");
							
							if(!scfEntriesJsonObj.get("DDBActive").isJsonNull())
								scfEntryMap.put("DDBActive", scfEntriesJsonObj.get("DDBActive").getAsString());
							else
								scfEntryMap.put("DDBActive", "");
							
							scfEntryMap.put("ProcessFeePerc", "");
							
							if(!scfEntriesJsonObj.get("ValidTo").isJsonNull())
								scfEntryMap.put("ValidTo", scfEntriesJsonObj.get("ValidTo").getAsString());
							else
								scfEntryMap.put("ValidTo", "");
						}
					}else{
						scfEntryMap.put("ErrorCode", "000");
						scfEntryMap.put("ErrorMessage", "No data found");
					}
				}
			}
		}catch (Exception e) {
			scfEntryMap.put("ErrorCode", "001");
			scfEntryMap.put("ErrorMessage", e.getMessage());
		}
		
		return scfEntryMap;
	}
	
	public Map<String, String> getAccountDetails(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, 
			Map<String, String> userRegMap, String aggregatorID, boolean debug) throws IOException{
		Map<String, String> accountsWSResponseMap = new HashMap<String, String>();
		Map<String, String> userAccountsEntry = new HashMap<String, String>();
		AccountClient accountClient = new AccountClient();
		
		try{
			userAccountsEntry.put("BankAccntNo", inputJsonObj.getString("BankAccntNo"));
			
			accountsWSResponseMap = accountClient.callAccountsWebservice(request, response, userAccountsEntry, userRegMap, aggregatorID, debug);
			if(debug){
				for (String key : accountsWSResponseMap.keySet()) {
					response.getWriter().println("getAccountDetails-accountsWSResponseMap: "+key + " - " + accountsWSResponseMap.get(key));
				}
			}
			
		}catch (Exception e) {
			accountsWSResponseMap.put("Error", "059");
			accountsWSResponseMap.put("Message", e.getMessage());
		}
		
		return accountsWSResponseMap;
	}
	
	public String validateAccountForChange(HttpServletResponse response, JSONObject inputJsonObj, JsonObject bankAccountEntriesJson, String loginID, 
			String aggregatorID, String oDataURL, boolean debug) throws IOException{

		String message = "", accountNoFromUI= "", accountNo = "", oDataUrl="", userName = "", password="", userPass="", executeURL="";
		boolean isAccountAvailable = false;
//		JsonObject httpJsonResult = new JsonObject();
		try{
			accountNoFromUI = inputJsonObj.getString("BankAccntNo");
			if(null != accountNoFromUI && accountNoFromUI.trim().length() > 0){
				JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
//				message = "119";
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject userAccJsonObj = (JsonObject) dresults.get(i);
					accountNo = userAccJsonObj.get("BankAccntNo").getAsString();
					if(debug)
						response.getWriter().println("validateAccount-accountNo: "+accountNo);
					if(accountNo.equalsIgnoreCase(accountNoFromUI)){
						isAccountAvailable = true;
						break;
					}
//					response.getWriter().println("value: "+legalStatusFromTSet);
				}
				
				if(! isAccountAvailable){
					message = "068";
				}else{
					message = "";
				}
			}
		}catch (Exception e) {
			message = e.getLocalizedMessage();
		}
		if(debug)
			response.getWriter().println("validateAccount-message: "+message);
		
		return message;
	
	}
	
	public String validateAccount(HttpServletResponse response, JSONObject inputJsonObj, JsonObject bankAccountEntriesJson, String loginID, 
			String aggregatorID, String oDataURL, boolean debug) throws IOException{
		String message = "", accountNoFromUI= "", accountNo = "", oDataUrl="", userName = "", password="", userPass="", executeURL="";
		boolean isAccountAvailable = false;
//		JsonObject httpJsonResult = new JsonObject();
		try{
			accountNoFromUI = inputJsonObj.getString("BankAccntNo");
			if(null != accountNoFromUI && accountNoFromUI.trim().length() > 0){
				JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
//				message = "119";
				for (int i = 0; i <= dresults.size() - 1; i++) {
					JsonObject userAccJsonObj = (JsonObject) dresults.get(i);
					accountNo = userAccJsonObj.get("BankAccntNo").getAsString();
					if(debug)
						response.getWriter().println("validateAccount-accountNo: "+accountNo);
					if(accountNo.equalsIgnoreCase(accountNoFromUI)){
						isAccountAvailable = true;
						break;
					}
//					response.getWriter().println("value: "+legalStatusFromTSet);
				}
				
				if(isAccountAvailable){
					message = "151";
				}else{
					message = "";
				}
			}
		}catch (Exception e) {
			message = e.getLocalizedMessage();
		}
		if(debug)
			response.getWriter().println("validateAccount-message: "+message);
		
		return message;
	}
	
	public  JsonObject getPeakLimitEligibility(HttpServletRequest request, HttpServletResponse response, String aggregatorID, boolean debug) throws IOException 
	{
		String message="", userName="", passWord="", userPass="", executeURL="", oDataUrl ="", enhancementType = "02", corpName="" ;
		JsonObject inputJsonResponce = new JsonObject();
		JsonObject scfPayloadJson =new JsonObject();
		JsonObject userCustomerPayloadJson = new JsonObject();
		JsonObject enhancementLimitsJson = new JsonObject();
		String appendUrl = "";
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			
			executeURL = oDataUrl+"SupplyChainFinances?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.SupplyChainFinances.executeURL:"+ executeURL);
			scfPayloadJson = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.scfPayloadJson:"+ scfPayloadJson);
			
			int scfResultSize =scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.scfResultSize:"+ scfResultSize);
			
			for(int i=0 ; i< scfResultSize ; i++){				
				if(i != scfResultSize-1)
					appendUrl = appendUrl+"PartnerID%20eq%20%27"+scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString()+"%27%20or%20";
				else
					appendUrl = appendUrl+"PartnerID%20eq%20%27"+scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString()+"%27";
			}
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.appendUrl:"+ appendUrl);
			
			executeURL = "";
			executeURL = oDataUrl+"UserCustomers?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20"+appendUrl;
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.UserCustomers.executeURL:"+ executeURL);
			
			userCustomerPayloadJson = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.userCustomerPayloadJson:"+ userCustomerPayloadJson);
			
			int userCustomerPayloadJsonSize = userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.userCustomerPayloadJsonSize:"+ userCustomerPayloadJsonSize);
			
			String nameStr="";
			for (int i = 0; i < scfResultSize; i++){
				for (int j = 0; j < userCustomerPayloadJsonSize; j++){
					if (scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString().equalsIgnoreCase(
							userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("PartnerID").getAsString())){
						if(userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("Name2").isJsonNull()){
							nameStr = userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("Name").getAsString();
						}else{
							nameStr = userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("Name").getAsString()+" "+userCustomerPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("Name2").getAsString();	
						}
						
						scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("CPName",nameStr);
					}
				}
			}
			
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.scfPayloadJson with CPName:"+ scfPayloadJson);
			appendUrl="";
			
			for (int i = 0; i <scfResultSize ; i++){
				if(i != scfResultSize-1)
					appendUrl = appendUrl+"CPGuid%20eq%20%27"+scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString()+"%27%20or%20";
				else
					appendUrl = appendUrl+"CPGuid%20eq%20%27"+scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString()+"%27";
			}
			executeURL = "";
			executeURL = oDataUrl+"EnhancementLimits?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20"+appendUrl;
			enhancementLimitsJson = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.enhancementLimitsJson:"+ enhancementLimitsJson);
			
			int enhancementLimitsJsonSize = enhancementLimitsJson.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			corpName = getCorporateName(request, response, debug);
			if(debug){
				response.getWriter().println("getPeakLimitEligibility.enhancementLimitsJsonSize:"+ enhancementLimitsJsonSize);
				response.getWriter().println("getPeakLimitEligibility.corpName:"+ corpName);
			}
				
			
			for (int i = 0; i < scfResultSize; i++) 
			{
				scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("PeakLimitEligibility", "000002");
				scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("CorporateName", corpName);
				for (int j = 0; j < enhancementLimitsJsonSize; j++) 
				{
					if (scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("CPGUID").getAsString().equalsIgnoreCase(
							enhancementLimitsJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(j).getAsJsonObject().get("CPGuid").getAsString())) 
					{
						scfPayloadJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("PeakLimitEligibility", "000001");
					} 
				}
			}
			if(debug)
				response.getWriter().println("getPeakLimitEligibility.final.scfPayloadJson:"+ scfPayloadJson);
			
			return scfPayloadJson;
		}catch (Exception e) {
			scfPayloadJson = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeUpdate-Exception Stack Trace: "+buffer.toString());
			JsonObject errorObject = new JsonObject();
			
			errorObject.addProperty("ErrorCode", "001");
			errorObject.addProperty("ErrorMessage", buffer.toString());
			scfPayloadJson.add("d", errorObject);
			if(debug)
				response.getWriter().println("Exception.returnObject: "+scfPayloadJson);
			
			return scfPayloadJson;
		}
	}
	
	public JsonObject getPrimaryLimitDetail(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String queryString, boolean debug) throws IOException{
		String message="", userName="", passWord="", userPass="", executeEnhanceURL="",executeSCFURL = "", oDataUrl = "", cpGUID1 = "", enhancementType="";
		JsonObject enhanceLimitObj = new JsonObject();
		JsonObject primaryLimitSCFObj = new JsonObject();
		JsonObject calculationObj = new JsonObject();
		JsonObject returnObject = new JsonObject();
		JsonObject errorObject = new JsonObject();
		try
		{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			enhancementType = "000010";
			
			executeEnhanceURL =  oDataUrl+"EnhancementLimits?"+queryString+"%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20EnhancementType%20eq%20%27"+enhancementType+"%27";
			if(debug)
				response.getWriter().println("getPrimaryLimitDetail.executeEnhanceURL: "+executeEnhanceURL);
			
			enhanceLimitObj = executeURL(executeEnhanceURL, userPass, response);
			
			if(debug)
				response.getWriter().println("getPrimaryLimitDetail.primaryLimitELimitObj: "+enhanceLimitObj);
			
			int enhanceLimitObjSize = enhanceLimitObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			if(debug)
				response.getWriter().println("getPrimaryLimitDetail.primaryLimitELimitObjSize: "+enhanceLimitObjSize);
		
			if(enhanceLimitObjSize > 0){
				executeSCFURL =  oDataUrl+"SupplyChainFinances?"+queryString+"%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.executeSCFURL: "+executeSCFURL);
				
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.If.executeSCFURL: "+executeSCFURL);
				primaryLimitSCFObj = executeURL(executeSCFURL, userPass, response);
				
//				if(debug)
//					response.getWriter().println("getPrimaryLimitDetail.primaryLimitSCFObj: "+primaryLimitSCFObj);
				
				JsonArray jsonArray =  primaryLimitSCFObj.get("d").getAsJsonObject().get("results").getAsJsonArray();
				int scfSize = primaryLimitSCFObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
				if(debug){
					response.getWriter().println("getPrimaryLimitDetail.getPrimaryLimitDetail.SCFSize: "+scfSize);
				}
					
				
				for(int i=0 ; i<enhanceLimitObjSize ; i++){
					JsonObject childELimitObject = enhanceLimitObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject();
					if(debug){
						response.getWriter().println("getPrimaryLimitDetail.childELimitObject.CPGuid: "+childELimitObject.get("CPGuid").getAsString());
					}
					
					for (int j = 0; j < scfSize; j++){
						
						JsonObject childScfObject = jsonArray.get(i).getAsJsonObject();
						/*if(debug){
							response.getWriter().println(i+".getPrimaryLimitDetail.getPrimaryLimitDetail.childScfObject.CPGUID: "+childScfObject.get("CPGUID").getAsString());
						}*/
						
						if(childScfObject.get("CPGUID").getAsString().equalsIgnoreCase(childELimitObject.get("CPGuid").getAsString())){
							if(debug){
								response.getWriter().println("getPrimaryLimitDetail.getPrimaryLimitDetail.CP Guid matches");
							}
							
							if(childELimitObject.get("AcceptedLimit").isJsonNull())
								childScfObject.addProperty("AcceptedLimit", "");
							else
								childScfObject.addProperty("AcceptedLimit", childELimitObject.get("AcceptedLimit").getAsString());
						
							if(childELimitObject.get("ProposedLimit").isJsonNull())
								childScfObject.addProperty("ProposedLimit", "");
							else
								childScfObject.addProperty("ProposedLimit", childELimitObject.get("ProposedLimit").getAsString());
							
							if(childELimitObject.get("PartnerNames").isJsonNull())
								childScfObject.addProperty("PartnerNames", "");
							else
								childScfObject.addProperty("PartnerNames", childELimitObject.get("PartnerNames").getAsString());
							
							if(childELimitObject.get("Address1").isJsonNull())
								childScfObject.addProperty("Address1", "");
							else
								childScfObject.addProperty("Address1", childELimitObject.get("Address1").getAsString());
							
							if(childELimitObject.get("Address2").isJsonNull())
								childScfObject.addProperty("Address2", "");
							else
								childScfObject.addProperty("Address2", childELimitObject.get("Address2").getAsString());
							
							if(childELimitObject.get("Address3").isJsonNull())
								childScfObject.addProperty("Address3", "");
							else
								childScfObject.addProperty("Address3", childELimitObject.get("Address3").getAsString());
							
							if(childELimitObject.get("Address4").isJsonNull())
								childScfObject.addProperty("Address4", "");
							else
								childScfObject.addProperty("Address4", childELimitObject.get("Address4").getAsString());
							
							if(childELimitObject.get("City").isJsonNull())
								childScfObject.addProperty("City", "");
							else
								childScfObject.addProperty("City", childELimitObject.get("City").getAsString());
							
							if(childELimitObject.get("State").isJsonNull())
								childScfObject.addProperty("State", "");
							else
								childScfObject.addProperty("State", childELimitObject.get("State").getAsString());
							
							if(childELimitObject.get("Pincode").isJsonNull())
								childScfObject.addProperty("Pincode", "");
							else
								childScfObject.addProperty("Pincode", childELimitObject.get("Pincode").getAsString());
							
							if(childELimitObject.get("StatusID").isJsonNull())
								childScfObject.addProperty("StatusID", "");
							else
								childScfObject.addProperty("StatusID", childELimitObject.get("StatusID").getAsString());
							
							if(childELimitObject.get("IPAddres").isJsonNull())
								childScfObject.addProperty("IPAddres", "");
							else
								childScfObject.addProperty("IPAddres", childELimitObject.get("IPAddres").getAsString());
							
							if(childELimitObject.get("CAAAccountNo").isJsonNull())
								childScfObject.addProperty("CAAAccountNo", "");
							else
								childScfObject.addProperty("CAAAccountNo", childELimitObject.get("CAAAccountNo").getAsString());
							
							if(childELimitObject.get("ODAAccountNo").isJsonNull())
								childScfObject.addProperty("ODAAccountNo", "");
							else
								childScfObject.addProperty("ODAAccountNo", childELimitObject.get("ODAAccountNo").getAsString());
							
							if(childELimitObject.get("SanctionLimit").isJsonNull())
								childScfObject.addProperty("SanctionLimit", "");
							else
								childScfObject.addProperty("SanctionLimit", childELimitObject.get("SanctionLimit").getAsString());
							
							if(childELimitObject.get("PAN").isJsonNull())
								childScfObject.addProperty("PAN", "");
							else
								childScfObject.addProperty("PAN", childELimitObject.get("PAN").getAsString());
							
							if(childELimitObject.get("LegalStatusID").isJsonNull())
								childScfObject.addProperty("LegalStatusID", "");
							else
								childScfObject.addProperty("LegalStatusID", childELimitObject.get("LegalStatusID").getAsString());
							
							if(childELimitObject.get("ProcessingFee").isJsonNull())
								childScfObject.addProperty("ProcessingFee", "");
							else
								childScfObject.addProperty("ProcessingFee", childELimitObject.get("ProcessingFee").getAsString());
							
							if(childELimitObject.get("ValidFrom").isJsonNull())
								childScfObject.addProperty("ValidFrom", "");
							else
								childScfObject.addProperty("ValidFrom", childELimitObject.get("ValidFrom").getAsString());
							
							if(childELimitObject.get("ValidTo").isJsonNull())
								childScfObject.addProperty("ValidTo", "");
							else
								childScfObject.addProperty("ValidTo", childELimitObject.get("ValidTo").getAsString());
							
							if(childELimitObject.get("EnhancementType").isJsonNull())
								childScfObject.addProperty("EnhancementType", "");
							else
								childScfObject.addProperty("EnhancementType", childELimitObject.get("EnhancementType").getAsString());
							
							if(childELimitObject.get("Currency").isJsonNull())
								childScfObject.addProperty("Currency", "");
							else
								childScfObject.addProperty("Currency", childELimitObject.get("Currency").getAsString());
							
							if(childELimitObject.get("EnhancementPeriod").isJsonNull())
								childScfObject.addProperty("EnhancementPeriod", "");
							else
								childScfObject.addProperty("EnhancementPeriod", childELimitObject.get("EnhancementPeriod").getAsString());
						
							if(debug)
								response.getWriter().println("getPrimaryLimitDetail.childScfObject: "+childScfObject);
							
							calculationObj = calculationLimit(response, childScfObject, debug);
							
							calculationObj.addProperty("LimitStatus", "000001");
							if(debug)
								response.getWriter().println("getPrimaryLimitDetail.CalculationObj: "+calculationObj);
						}
					}
				}
				
				returnObject.add("d", calculationObj);
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.returnObject: "+returnObject);
				return returnObject;
			}else{
				executeSCFURL =  oDataUrl+"SupplyChainFinances?"+queryString+"%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
				if(debug)
					response.getWriter().println("else.getPrimaryLimitDetail.executeSCFURL: "+executeSCFURL);

				primaryLimitSCFObj = executeURL(executeSCFURL, userPass, response);
		
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.primaryLimitSCFObj: "+primaryLimitSCFObj);
				
				JsonArray jsonArray =  primaryLimitSCFObj.get("d").getAsJsonObject().get("results").getAsJsonArray();
				int scfSize = primaryLimitSCFObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.scfSize: "+scfSize);
				for (int i = 0; i < scfSize; i++) 
				{
					JsonObject childObject = jsonArray.get(i).getAsJsonObject();
					childObject.addProperty("AcceptedLimit", "");
					childObject.addProperty("ProposedLimit", "");
					childObject.addProperty("PartnerNames", "");
					childObject.addProperty("Address1", "");
					childObject.addProperty("Address2", "");
					childObject.addProperty("Address3", "");
					childObject.addProperty("Address4", "");
					childObject.addProperty("City", "");
					childObject.addProperty("State", "");
					childObject.addProperty("Pincode", "");
					childObject.addProperty("StatusID", "");
					childObject.addProperty("IPAddress", "");
					childObject.addProperty("CAAAccountNo", "");
					childObject.addProperty("ODAAccountNo", "");
					childObject.addProperty("SanctionLimit", "");
					childObject.addProperty("PAN", "");
					childObject.addProperty("LegalStatusID", "");
					childObject.addProperty("ProcessingFee", "");
					childObject.addProperty("ValidFrom", "");
					childObject.addProperty("ValidTo", "");
					childObject.addProperty("Currency", "");
					childObject.addProperty("EnhancementPeriod", "");
					if(debug)
						response.getWriter().println("getPrimaryLimitDetail.childObject: "+childObject);
					
					calculationObj = calculationLimit(response, childObject, debug);
					calculationObj.addProperty("LimitStatus", "000002");
					
					if(debug)
						response.getWriter().println("getPrimaryLimitDetail.CalculationObj: "+calculationObj);
					
				}
				
				returnObject.add("d", calculationObj);
				if(debug)
					response.getWriter().println("getPrimaryLimitDetail.returnObject: "+returnObject);
				return returnObject;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("getPrimaryLimitDetail.Exception Stack Trace: "+buffer.toString());
			
			errorObject.addProperty("ErrorCode", "001");
			errorObject.addProperty("ErrorMessage", buffer.toString());
			returnObject.add("d", errorObject);
			if(debug)
				response.getWriter().println("getPrimaryLimitDetail.Exception.returnObject: "+returnObject);
			
			return returnObject;
		}
	}
	
	public JsonObject calculationLimit(HttpServletResponse response, JsonObject childObject, boolean debug) throws IOException{
		String processingFee = "", sanctionLimit = "",primaryLimit = "",peakLimit = "";
		int sanctionLimitAmt = 0, primaryLimitAmt = 0, peakLimitAmt = 0,processingFeeAmt = 0, bufferAmt = 0, availableLimit = 0, actualBal = 0,availableBal = 0;
		JsonObject errorObject = new JsonObject();
		try
		{
			processingFee = childObject.get("ProcessingFee").getAsString();
			sanctionLimit =  childObject.get("OfferAmt").getAsString();
			primaryLimit =  childObject.get("ProposedLimit").getAsString();
			
			sanctionLimitAmt = Integer.parseInt(sanctionLimit);
			
			if(debug){
				response.getWriter().println("calculationLimit.processingFee: "+processingFee);
				response.getWriter().println("calculationLimit.sanctionLimit: "+sanctionLimit);
				response.getWriter().println("calculationLimit.primaryLimit: "+primaryLimit);
				response.getWriter().println("calculationLimit.sanctionLimitAmt: "+sanctionLimitAmt);
			}
				
	
			try
			{
			    if(primaryLimit != null)
			    	primaryLimitAmt = Integer.parseInt(primaryLimit);
			}
			catch (NumberFormatException e)
			{
				primaryLimitAmt = 0;
			}
			try
			{
			    if(peakLimit != null)
			    	peakLimitAmt = Integer.parseInt(peakLimit);
			}
			catch (NumberFormatException e)
			{
				peakLimitAmt = 0;
			}
			try
			{
			    if(processingFee != null)
			    	processingFeeAmt = Integer.parseInt(processingFee);
			}
			catch (NumberFormatException e)
			{
				processingFeeAmt = 0;
			}
			if((sanctionLimitAmt > primaryLimitAmt ) && (primaryLimitAmt >= peakLimitAmt)){
				
				bufferAmt = (sanctionLimitAmt-primaryLimitAmt)-peakLimitAmt;
				availableLimit = (primaryLimitAmt+peakLimitAmt);
				actualBal = (sanctionLimitAmt -processingFeeAmt);
				availableBal = (actualBal)-(bufferAmt);
				
				childObject.addProperty("ProcessingFee", Integer.toString(processingFeeAmt));
				childObject.addProperty("SanctionLimit",Integer.toString(sanctionLimitAmt));
				childObject.addProperty("PrimaryLimit",Integer.toString(primaryLimitAmt));
				childObject.addProperty("PeakLimit", Integer.toString(peakLimitAmt));
				childObject.addProperty("BufferAmount", Integer.toString(bufferAmt));
				childObject.addProperty("AvailableLimit", Integer.toString(availableLimit));
				childObject.addProperty("ActualBalance",Integer.toString(actualBal));
				childObject.addProperty("AvailableBalance", Integer.toString(availableBal));
			
			}
			if(debug)
				response.getWriter().println("calculationLimit.childObject: "+childObject);
		
		}
		catch (Exception e) {
//			e.printStackTrace();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("calculationLimit.Exception Stack Trace: "+buffer.toString());
			
			errorObject.addProperty("ErrorCode", "001");
			errorObject.addProperty("ErrorMessage", buffer.toString());
			childObject.add("d", errorObject);
			if(debug)
				response.getWriter().println("calculationLimit.Exception.childObject: "+childObject);
			
//			return childObject;
		}
		return childObject;
		
	}
	
	public JsonObject modifyEnhancementLimits(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObject, 
			String aggregatorID, String oDataUrl, boolean debug) throws IOException{
		JsonObject enhancementOpsResponseObj = new JsonObject();
		JsonObject enhancementOpsHdrObj = new JsonObject();
		JsonArray enhancementOpsItmObj = new JsonArray();
		try{
			JsonParser jsonParser = new JsonParser();
		    JsonObject limitSetInputJson = (JsonObject)jsonParser.parse(inputJsonObject.toString());
//		    enhancementOpsResponseObj = limitSetInputJson;
		    
		    enhancementOpsHdrObj.addProperty("ID", limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("ID").getAsString());
		    enhancementOpsHdrObj.addProperty("AccountNo", limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("AccountNo").getAsString());
		    
//		    enhancementOpsHdrObj.addProperty("Currency", limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Currency").getAsString());
		    if(limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().has("Currency") && !limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Currency").isJsonNull()){
		    	enhancementOpsHdrObj.addProperty("Currency", limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Currency").getAsString());
		    }else{
		    	enhancementOpsHdrObj.addProperty("Currency", "INR");
		    }
		    
		    enhancementOpsResponseObj.add("PeakLimitByCP", enhancementOpsHdrObj);
		    
		    int inputItemsSize = limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Items").getAsJsonArray().size();
		    
		    if(debug){
		    	response.getWriter().println("modifyEnhancementLimits.limitSetInputJson: "+limitSetInputJson);
		    	response.getWriter().println("modifyEnhancementLimits.inputItemsSize: "+inputItemsSize);
		    	response.getWriter().println("modifyEnhancementLimits.enhancementOpsResponseObj: "+enhancementOpsResponseObj);
		    }
		    
		    if(inputItemsSize == 0){
		    	response.getWriter().println("No items received in the request");
			}else{
				JsonArray enhLimitsArray = new JsonArray();
				enhLimitsArray = limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Items").getAsJsonArray();
				
				String operation = "", currency="", scfGuid="";
				currency = limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("Currency").getAsString();
				scfGuid = limitSetInputJson.get("PeakLimitByCP").getAsJsonObject().get("ID").getAsString();
				
				if(debug){
					response.getWriter().println("modifyEnhancementLimits.enhLimitsArray: "+enhLimitsArray);
					response.getWriter().println("modifyEnhancementLimits.currency: "+currency);
					response.getWriter().println("modifyEnhancementLimits.scfGuid: "+scfGuid);
					response.getWriter().println("modifyEnhancementLimits.aggregatorID: "+aggregatorID);
				}
				String returnMessage = "", enhancementType="";
				boolean isPrimarySuccess = false;
				for(int i=0 ; i<inputItemsSize ; i++){
					operation = enhLimitsArray.get(i).getAsJsonObject().get("Operation").getAsString();
					enhancementType = enhLimitsArray.get(i).getAsJsonObject().get("EnhancementType").getAsString();
					returnMessage = "";
					if(debug)
						response.getWriter().println("operation: "+operation);
					switch(operation){
					case "C":
						//Create scenario
						if(debug)
							response.getWriter().println("enhLimitsArray.get(i): "+enhLimitsArray.get(i).getAsJsonObject());
						
						returnMessage = insertIntoEnhancementLimits(request, response, enhLimitsArray.get(i).getAsJsonObject(), aggregatorID, currency, scfGuid, oDataUrl, debug);
						
						if(returnMessage.equalsIgnoreCase("Success")){
							if(enhLimitsArray.get(i).getAsJsonObject().get("EnhancementType").getAsString().trim().equalsIgnoreCase("000010")){
								isPrimarySuccess = true;
							}
							
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000001");
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Success");
						}else{
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000002");
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Failed");
						}
						enhancementOpsItmObj.add(enhLimitsArray.get(i).getAsJsonObject());
						break;
					
					case "U":
						//Update scenario
						if(enhancementType.equalsIgnoreCase("000020")){
							returnMessage = "";
						}
						
						if(returnMessage.equalsIgnoreCase("Success") || returnMessage.equalsIgnoreCase("")){
							returnMessage = "";
							returnMessage = updateEnhancementLimits(request, response, enhLimitsArray.get(i).getAsJsonObject(), aggregatorID, currency, scfGuid, oDataUrl, debug);
							
							if(returnMessage.equalsIgnoreCase("Success")){
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000001");
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Success");
							}else{
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000002");
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Failed");
							}
						}else{
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000002");
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Failed");
						}
						enhancementOpsItmObj.add(enhLimitsArray.get(i).getAsJsonObject());
						break;
					
					case "D":
						//Delete scenario
						if(enhancementType.equalsIgnoreCase("000020")){
							returnMessage = "";
						}
						
						if(returnMessage.equalsIgnoreCase("Success") || returnMessage.equalsIgnoreCase("")){
							returnMessage = "";
							returnMessage = deleteFromEnhancementLimits(request, response, enhLimitsArray.get(i).getAsJsonObject(), aggregatorID, currency, scfGuid, oDataUrl, debug);
							
							if(returnMessage.equalsIgnoreCase("Success")){
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000001");
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Success");
							}else{
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000002");
								enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Failed");
							}
						}else{
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "000002");
							enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "Failed");
						}
						enhancementOpsItmObj.add(enhLimitsArray.get(i).getAsJsonObject());
						break;
						
					default:
						//Do nothing
						enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusCode", "");
						enhLimitsArray.get(i).getAsJsonObject().addProperty("StatusDesc", "");
						enhancementOpsItmObj.add(enhLimitsArray.get(i).getAsJsonObject());
						break;
					}
				}
				enhancementOpsResponseObj.get("PeakLimitByCP").getAsJsonObject().add("Items", enhancementOpsItmObj);
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug){
				response.getWriter().println("modifyEnhancementLimits-Exception Stack Trace: "+buffer.toString());
			}
			
			JsonObject errorObj = new JsonObject();
			errorObj.addProperty("ErrorCode", "001");
			errorObj.addProperty("ErrorMessage", buffer.toString());
			enhancementOpsResponseObj = new JsonObject();
			enhancementOpsResponseObj.add("Error", errorObj);
		}
		
		return enhancementOpsResponseObj;
	}
	
	public String deleteFromEnhancementLimits(HttpServletRequest request, HttpServletResponse response, JsonObject deleteObject, 
			String aggregatorID, String currency, String scfGuid, String oDataUrl, boolean debug) throws IOException{
		String returnMessage="", tableName="", userName="", password="", userPass="", uniqueID="";
		boolean deleteFlag  = false;
		try{
			
			if(deleteObject.has("ID")){
				uniqueID = deleteObject.get("ID").getAsString();
				
				if(uniqueID.trim().length() > 0){
					tableName = "EnhancementLimits";
					userName = getODataDestinationProperties("User", "PYGWHANA");
					password = getODataDestinationProperties("Password", "PYGWHANA");
					userPass = userName+":"+password;
					
					deleteFlag = deleteEntry(request, response, uniqueID, tableName, oDataUrl, userPass, aggregatorID, debug);
					
					if(deleteFlag){
						returnMessage = "Success";
					}else{
						returnMessage = "Deletion Failed";
					}
					return returnMessage;
				}else{
					returnMessage = "GUID not received in the request for updating";
					
					return returnMessage;
				}
			}else{
				returnMessage = "GUID not received in the request for updating";
				return returnMessage;
			}
			
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("modifyEnhancementLimits-Exception Stack Trace: "+buffer.toString());
			}
			returnMessage = e.getLocalizedMessage();
			return returnMessage;
		}
	}
	
	public String updateEnhancementLimits(HttpServletRequest request, HttpServletResponse response, JsonObject updateObject, 
			String aggregatorID, String currency, String scfGuid, String oDataUrl, boolean debug) throws IOException{
		String returnMessage = "", uniqueID = "", changedBy="", changedAt="", userName="", password="", userPass="", executeURL="";
		long changedOnInMillis = 0;
		CommonUtils commonUtils = new CommonUtils();
		JsonObject updateResponseObj = new JsonObject();
		try{
			changedBy = commonUtils.getUserPrincipal(request, "name", response);
			changedOnInMillis = commonUtils.getCreatedOnDate();
			changedAt = commonUtils.getCreatedAtTime();
			
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			if(debug){
				response.getWriter().println("updateEnhancementLimits.userName: "+userName);
				response.getWriter().println("updateEnhancementLimits.createdBy: "+changedBy);
				response.getWriter().println("updateEnhancementLimits.createdOnInMillis: "+changedOnInMillis);
				response.getWriter().println("updateEnhancementLimits.createdAt: "+changedAt);
			}
			
			if(updateObject.has("ID")){
				uniqueID = updateObject.get("ID").getAsString();
				if(debug)
					response.getWriter().println("updateEnhancementLimits.uniqueID: "+uniqueID);
				if(uniqueID.trim().length() > 0){
					JSONObject entryPayload = new JSONObject();
					
					entryPayload.accumulate("ID", uniqueID);
					entryPayload.accumulate("CPGuid", updateObject.get("CPGuid").getAsString());
					entryPayload.accumulate("CPType", updateObject.get("CPType").getAsString());
					
					if(updateObject.has("CPName")){
						if(! updateObject.get("CPName").isJsonNull()){
							entryPayload.accumulate("CPName", updateObject.get("CPName").getAsString());
						}else{
							entryPayload.accumulate("CPName", "");
						}
					}else{
						entryPayload.accumulate("CPName", "");
					}
					
					entryPayload.accumulate("AggregatorID", aggregatorID);
					entryPayload.accumulate("ProposedLimit", updateObject.get("ProposedLimit").getAsString());
					if(! updateObject.get("EnhancementType").getAsString().equalsIgnoreCase("000010")){
						entryPayload.accumulate("ValidFrom", updateObject.get("ValidFrom").getAsString());
						entryPayload.accumulate("ValidTo", updateObject.get("ValidTo").getAsString());
					}
					entryPayload.accumulate("EnhancementType", updateObject.get("EnhancementType").getAsString());
					entryPayload.accumulate("Currency", currency);
					entryPayload.accumulate("SCFID", scfGuid);
					entryPayload.accumulate("ChangedBy", changedBy);
					entryPayload.accumulate("ChangedAt", changedAt);
					entryPayload.accumulate("ChangedOn", "/Date("+changedOnInMillis+")/");
					
					executeURL = oDataUrl+"EnhancementLimits('"+uniqueID+"')";
					
					if(debug){
						response.getWriter().println("updateEnhancementLimits.upd: "+executeURL);
						response.getWriter().println("updateEnhancementLimits.entryPayload: "+entryPayload.toString());
					}
					
					updateResponseObj = executeMergeUpdate(executeURL, userPass, response, entryPayload, request, debug, "PYGWHANA");
					if(! updateResponseObj.get("ErrorCode").isJsonNull() && updateResponseObj.get("ErrorCode").getAsString().trim().length() > 0){
						returnMessage = updateResponseObj.get("ErrorMessage").getAsString();
						
						return returnMessage;
					}else{
						returnMessage = "Success";
						
						return returnMessage;
					}
				}else{
					returnMessage = "GUID not received in the request for updating";
					return returnMessage;
				}
			}else{
				returnMessage = "GUID not received in the request for updating";
				
				return returnMessage;
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("modifyEnhancementLimits-Exception Stack Trace: "+buffer.toString());
			}
			returnMessage = e.getLocalizedMessage();
			return returnMessage;
		}
	}
	
	public String insertIntoEnhancementLimits(HttpServletRequest request, HttpServletResponse response, JsonObject createObject, 
			String aggregatorID, String currency, String scfGuid, String oDataUrl, boolean debug) throws IOException{
		String returnMessage = "", uniqueID = "", createdAt="", createdBy="", userName="", password="", userPass="", executeURL="";
		long createdOnInMillis = 0;
		JSONObject enhlmtInsertPayLoad = new JSONObject();
		JsonObject insertResponseObj = new JsonObject();
		CommonUtils commonUtils = new CommonUtils();
		try{
			uniqueID = commonUtils.generateGUID(36);
			
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			createdBy = commonUtils.getUserPrincipal(request, "name", response);
			createdOnInMillis = commonUtils.getCreatedOnDate();
			createdAt = commonUtils.getCreatedAtTime();
			
			if(debug){
				response.getWriter().println("insertIntoEnhancementLimits.uniqueID: "+uniqueID);
				response.getWriter().println("insertIntoEnhancementLimits.userName: "+userName);
				response.getWriter().println("insertIntoEnhancementLimits.createdBy: "+createdBy);
				response.getWriter().println("insertIntoEnhancementLimits.createdOnInMillis: "+createdOnInMillis);
				response.getWriter().println("insertIntoEnhancementLimits.createdAt: "+createdAt);
				response.getWriter().println("insertIntoEnhancementLimits.amountGrtZero: "+amountGrtZero(createObject.get("ProposedLimit").getAsString(), debug));
			}
			
			if(amountGrtZero(createObject.get("ProposedLimit").getAsString(), debug)){
				enhlmtInsertPayLoad.accumulate("ID", uniqueID);
				enhlmtInsertPayLoad.accumulate("CPGuid", createObject.get("CPGuid").getAsString());
				enhlmtInsertPayLoad.accumulate("CPType", createObject.get("CPType").getAsString());
				
				if(createObject.has("CPName")){
					if(! createObject.get("CPName").isJsonNull()){
						enhlmtInsertPayLoad.accumulate("CPName", createObject.get("CPName").getAsString());
					}else{
						enhlmtInsertPayLoad.accumulate("CPName", "");
					}
				}else{
					enhlmtInsertPayLoad.accumulate("CPName", "");
				}
				
				enhlmtInsertPayLoad.accumulate("AggregatorID", aggregatorID);
				enhlmtInsertPayLoad.accumulate("ProposedLimit", createObject.get("ProposedLimit").getAsString());
				if(! createObject.get("EnhancementType").getAsString().equalsIgnoreCase("000010")){
					enhlmtInsertPayLoad.accumulate("ValidFrom", createObject.get("ValidFrom").getAsString());
					enhlmtInsertPayLoad.accumulate("ValidTo", createObject.get("ValidTo").getAsString());
				}
				enhlmtInsertPayLoad.accumulate("EnhancementType", createObject.get("EnhancementType").getAsString());
				enhlmtInsertPayLoad.accumulate("Currency", currency);
				enhlmtInsertPayLoad.accumulate("SCFID", scfGuid);
				enhlmtInsertPayLoad.accumulate("CreatedBy", createdBy);
				enhlmtInsertPayLoad.accumulate("CreatedAt", createdAt);
				enhlmtInsertPayLoad.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
				
				executeURL = oDataUrl+"EnhancementLimits";
				if(debug){
					response.getWriter().println("insertIntoEnhancementLimits.enhlmtInsertPayLoad: "+enhlmtInsertPayLoad.toString());
					response.getWriter().println("insertIntoEnhancementLimits.executeURL: "+executeURL);
				}
					
				insertResponseObj = executePostURL(executeURL, userPass, response, enhlmtInsertPayLoad, request, debug, "PYGWHANA");
				
				if(insertResponseObj.has("error")){
					returnMessage = insertResponseObj.get("error").getAsJsonObject().get("message").getAsJsonObject().get("value").getAsString();
				}else{
					returnMessage = "Success";
				}
			}else{
				if(createObject.get("EnhancementType").getAsString().equalsIgnoreCase("000010")){
					returnMessage = "Invalid Limit value received for Primary Limit";
				}else{
					returnMessage = "Invalid Limit value received for Peak Limit";
				}
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("modifyEnhancementLimits-Exception Stack Trace: "+buffer.toString());
			}
			
			returnMessage = e.getLocalizedMessage();
		}
		if(debug)
			response.getWriter().println("returnMessage: "+returnMessage);
		return returnMessage;
	}
	
	public static boolean amountGrtZero(String amountValue, boolean debug){
		boolean isGrtThanZero = false;
		String proposedLimit = "";
		BigDecimal proposedLmtDec = new BigDecimal(0.00);
		BigDecimal zeroValue = new BigDecimal(0.00);
		try{
			proposedLmtDec = new BigDecimal(amountValue);
			
			if(proposedLmtDec.compareTo(zeroValue) > 0){
				isGrtThanZero = true;
			}else{
				isGrtThanZero = false;
			}
		}catch (NumberFormatException  e) {
			isGrtThanZero = false;
		}catch (Exception e) {
			isGrtThanZero = false;
		}
		
		return isGrtThanZero;
	}
	
	public JsonObject calculateAmount(HttpServletResponse response, String scfSanctionLimit, String enhPrimaryLimit, String enhPeakLimit,
			String amount, boolean debug) throws IOException{
		String message ="";
		JsonObject calculateAmountResponse= new JsonObject();
		BigDecimal sanctionLimitAmt = new BigDecimal(0), primaryLimitAmt = new BigDecimal(0), peakLimitAmt=new BigDecimal(0), 
				bufferAmt= new BigDecimal(0), availableBalanceAmt= new BigDecimal(0), actualBalAmt=new BigDecimal(0), availableLimit = new BigDecimal(0);
		try {
			sanctionLimitAmt= new BigDecimal(scfSanctionLimit);
			primaryLimitAmt = new BigDecimal(enhPrimaryLimit);
			peakLimitAmt = new BigDecimal(enhPeakLimit);
	
			bufferAmt = sanctionLimitAmt.subtract(primaryLimitAmt).subtract(peakLimitAmt);
			actualBalAmt = new BigDecimal(amount);
			availableLimit = primaryLimitAmt.add(peakLimitAmt);
			availableBalanceAmt = actualBalAmt.subtract(bufferAmt);	
			if(debug){
				response.getWriter().println("calculateAmount.bufferAmt: "+bufferAmt);
				response.getWriter().println("calculateAmount.actualBalAmt: "+actualBalAmt);
				response.getWriter().println("calculateAmount.calculateAmountResponse: "+availableBalanceAmt);
				response.getWriter().println("calculateAmount.availableBalanceAmt: "+availableBalanceAmt);
			}
			
			calculateAmountResponse.addProperty("Message", message);
			calculateAmountResponse.addProperty("SanctionLimit", sanctionLimitAmt.toString());
			calculateAmountResponse.addProperty("PrimaryLimit", primaryLimitAmt.toString());
			calculateAmountResponse.addProperty("PeakLimit", peakLimitAmt.toString());
			calculateAmountResponse.addProperty("BufferAmount", bufferAmt.toString());
			calculateAmountResponse.addProperty("AvailableLimit", availableLimit.toString());
			calculateAmountResponse.addProperty("ActualBalance", actualBalAmt.toString());
			calculateAmountResponse.addProperty("AvailableBalance", availableBalanceAmt.toString());
			
		} catch (NumberFormatException e) {
			calculateAmountResponse.addProperty("Message", "Invalid Amount found in either or all Sanction Limit / Primary Limit / Peak Limit / Amount values");
			calculateAmountResponse.addProperty("AvailableBalance", 0);
		} catch (Exception e) {
			calculateAmountResponse.addProperty("Message", e.getMessage());
			calculateAmountResponse.addProperty("AvailableBalance", 0);
		}
		if(debug){
			response.getWriter().println("calculateAmount.calculateAmountResponse: "+calculateAmountResponse);
		}
		return calculateAmountResponse;	
	}
	
	public boolean getCustomers(HttpServletRequest request, HttpServletResponse response, 
				String loginSessionID, String customerNo, boolean debug) throws IOException, URISyntaxException{
		String destURL="", errorCode="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth="";
		boolean isValidCustomer = false;
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		try{
			customerFilter = "LoginID eq '"+loginSessionID+"' and CustomerNo eq '"+customerNo+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			if (debug){
				response.getWriter().println("customerFilter: "+customerFilter);
				response.getWriter().println("customerNo: "+customerNo);
				response.getWriter().println("loginSessionID: "+loginSessionID);
			}
			
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			HttpDestination destConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(destConfiguration);
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				//basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			String service = null;
			if(destConfiguration.get("service")!=null && !destConfiguration.get("service").isEmpty()){
				service=destConfiguration.get("service").get().toString();
			}
			
			
			if(sapclient != null)
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
			}
			else
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
			}

			if(null != service && service.equalsIgnoreCase("SFGW")){
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
				}
			}else{
				if(sapclient != null)
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?$filter="+ customerFilter;
				}
			}
			if (debug){
				response.getWriter().println("CustomerService: "+customerService);
				response.getWriter().println("destURL: "+destURL);
			}
			
	        userCustomersGet = new HttpGet(customerService);
	        userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        userCustomersGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader("Authorization", "Bearer "+ authParam);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        HttpResponse httpResponse = client.execute(userCustomersGet);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("validateCustomer.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			if(customerEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		        
				String retSrc = EntityUtils.toString(customerEntity);
				
				if (debug)
					response.getWriter().println("retSrc: "+retSrc);
//				if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
//					response.getWriter().println("retSrc: "+retSrc);
				docBuilder = docBuilderFactory.newDocumentBuilder();
				inputSource = new InputSource(new StringReader(retSrc));
	            Document document = docBuilder.parse(inputSource);
	            NodeList nodeList = document.getElementsByTagName("d:CustomerNo");
	            for(int i=0 ; i<nodeList.getLength() ; i++)
	            {
	            	if (debug)
	            		response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
//	            	response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
	            	if(customerNo.equalsIgnoreCase(nodeList.item(i).getTextContent()))
        			{
	            		isValidCustomer = true;
	            		break;
        			}
	            }
	            if(! isValidCustomer)
	            {
	            	errorCode = "E105";
	            }
			}
			return isValidCustomer;
		}catch (RuntimeException e) {
			if(debug)
				response.getWriter().println("RuntimeException in getCustomers: "+e.getMessage());
			return isValidCustomer;
		}catch (ParserConfigurationException e) {
			if(debug)
				response.getWriter().println("RuntimeException in getCustomers: "+e.getMessage());
			return isValidCustomer;
		} catch (SAXException e) {
			if(debug)
				response.getWriter().println("RuntimeException in getCustomers: "+e.getMessage());
			return isValidCustomer;
		}
	}
	
	public JsonObject getUserCustomersFromCloud(HttpServletRequest request, HttpServletResponse response, String customerNo, boolean debug) throws IOException, URISyntaxException{
		String aggregatorID="", oDataUrl="", userName="", passWord="", userPass="", executeUrl="";
		JsonObject userCustomerJson = new JsonObject();
		
		try{
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			if(debug){
				response.getWriter().println("getUserCustomersFromCloud-aggregatorID: "+aggregatorID);
				response.getWriter().println("getUserCustomersFromCloud-oDataUrl: "+oDataUrl);
				response.getWriter().println("getUserCustomersFromCloud-userName: "+userName);
			}
			
			executeUrl = oDataUrl+"UserCustomers?$filter=PartnerID%20eq%20%27"+customerNo+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
		
			if(debug)
				response.getWriter().println("getUserCustomersFromCloud-executeURL: "+executeUrl);
			
			userCustomerJson = executeURL(executeUrl, userPass, response);
			if(debug)
				response.getWriter().println("getUserCustomersFromCloud-userCustomerJson: "+userCustomerJson);
			
			return userCustomerJson;
		}catch (Exception e) {
//			userCustomerJson.addProperty("d", );
			if(debug){
				response.getWriter().println("getUserCustomersFromCloud: "+e.getMessage());
				
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			
			return userCustomerJson;
		}
	}
	
	
	public JsonObject getUserCustomersFromERP(HttpServletRequest request, HttpServletResponse response, String loginSessionID, String customerNo, boolean debug) 
			throws IOException, URISyntaxException{
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth="",message="" ; 
//		boolean isValidCustomer = false, debug = false;
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
	// added
		JsonObject userCustomerEntriesJson = new JsonObject();
		JsonObject userCustomerResponse = new JsonObject();
		try{
			
			if(null != request.getParameter("PGID"))
				pgID = request.getParameter("PGID");
			
			/*if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				debug = true;*/
			
			customerFilter = "LoginID eq '"+loginSessionID+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(PCGW_UTIL_DEST_NAME);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			// String service = destConfiguration.get("service").get().toString();
			
			if(pgID.equalsIgnoreCase("AXISPG")){
				if(sapclient != null)
				{
//						CustomerService = destination.getURI().getPath()+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ CustomerFilter;
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
				}
			}else{
				/* if(null != service && service.equalsIgnoreCase("SFGW")){
					if(sapclient != null)
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
					}
					else
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
					}
				}else{ */
					if(sapclient != null)
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
					}
					else
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/UserCustomers?$filter="+ customerFilter;
					}
				// }
			}
			
			if (debug){
				response.getWriter().println("CustomerService: "+customerService);
				response.getWriter().println("destURL: "+destURL);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("validateCustomer.proxyType: "+proxyType);
			    response.getWriter().println("validateCustomer.proxyHost: "+proxyHost);
			    response.getWriter().println("validateCustomer.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        userCustomersGet = new HttpGet(customerService);
//	        userCustomersGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        userCustomersGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(userCustomersGet);
			HttpResponse httpResponse = client.execute(userCustomersGet);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("validateCustomer.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		        
				String retSrc = EntityUtils.toString(customerEntity);
				
				if(debug)
					response.getWriter().println("retSrc: "+retSrc);
				
				docBuilder = docBuilderFactory.newDocumentBuilder();
				inputSource = new InputSource(new StringReader(retSrc));
	            Document document = docBuilder.parse(inputSource);
	            document.getChildNodes().getLength();
	            NodeList customerNoList = document.getElementsByTagName("d:CustomerNo");
	            NodeList address1List = document.getElementsByTagName("d:Address1");
	            NodeList address2List = document.getElementsByTagName("d:Address2");
	            NodeList address3List = document.getElementsByTagName("d:Address3");
	            NodeList address4List = document.getElementsByTagName("d:Address4");
	            NodeList cityList = document.getElementsByTagName("d:City");
	            NodeList countryDescList = document.getElementsByTagName("d:CountryDesc");
	            NodeList countryIDList = document.getElementsByTagName("d:CountryID");
	            NodeList dateOfIncorporationList = document.getElementsByTagName("d:DateOfIncorporation");
	            NodeList districtList = document.getElementsByTagName("d:District");
	            NodeList emailIDList = document.getElementsByTagName("d:EmailID");
	            NodeList faxList = document.getElementsByTagName("d:Fax");
	            NodeList gSTINList = document.getElementsByTagName("d:GSTIN");
	            NodeList mobile1List = document.getElementsByTagName("d:Mobile1");
	            NodeList nameList = document.getElementsByTagName("d:Name");
	            NodeList legalStatusList = document.getElementsByTagName("d:LegalStatus");
	            NodeList landlineList = document.getElementsByTagName("d:Landline");
	            NodeList pANList = document.getElementsByTagName("d:PAN");
	            NodeList postalCodeList = document.getElementsByTagName("d:PostalCode");
	            NodeList regionList = document.getElementsByTagName("d:Region");
	            NodeList regionDescList = document.getElementsByTagName("d:RegionDesc");
	            
//	            NodeList entryList = document.getElementsByTagName("entry");
	            for(int i=0 ; i<customerNoList.getLength() ; i++)
	            {
	            	if(customerNo.equalsIgnoreCase(customerNoList.item(i).getTextContent()))
        			{
	            		userCustomerEntriesJson.addProperty("Address1", address1List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address2", address2List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address3", address3List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address4", address4List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("City", cityList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CountryDesc", countryDescList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CountryID", countryIDList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("DateOfIncorporation", dateOfIncorporationList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("District", districtList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("EmailID", emailIDList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Fax", faxList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("GSTIN", gSTINList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Mobile1", mobile1List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Name", nameList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("LegalStatus", legalStatusList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Landline", landlineList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("PAN", pANList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("PostalCode", postalCodeList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CustomerNo", customerNoList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Region", regionList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("RegionDesc", regionDescList.item(i).getTextContent());
						
						message="Success";
						userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
						userCustomerResponse.addProperty("Status", "000001");
						userCustomerResponse.addProperty("Message", message);
						
//	      	      		isValidCustomer = true;
						if(debug)
						{
	            			response.getWriter().println("customerNo: "+customerNo);
	            			response.getWriter().println("customerNoList.item(i).getTextContent(): "+customerNoList.item(i).getTextContent());
	            			response.getWriter().println("address1List.item(i).getTextContent(): "+address1List.item(i).getTextContent());
	            			response.getWriter().println("address2List.item(i).getTextContent(): "+address2List.item(i).getTextContent());
	            			response.getWriter().println("address3List.item(i).getTextContent(): "+address3List.item(i).getTextContent());
	            			response.getWriter().println("address4List.item(i).getTextContent(): "+address4List.item(i).getTextContent());
	            			response.getWriter().println("cityList.item(i).getTextContent(): "+cityList.item(i).getTextContent());
	            			response.getWriter().println("countryDescList.item(i).getTextContent(): "+countryDescList.item(i).getTextContent());
	            			response.getWriter().println("countryIDList.item(i).getTextContent(): "+countryIDList.item(i).getTextContent());
	            			response.getWriter().println("dateOfIncorporationList.item(i).getTextContent(): "+dateOfIncorporationList.item(i).getTextContent());
	            			response.getWriter().println("districtList.item(i).getTextContent(): "+districtList.item(i).getTextContent());
	            			response.getWriter().println("emailIDList.item(i).getTextContent(): "+emailIDList.item(i).getTextContent());
	            			response.getWriter().println("faxList.item(i).getTextContent(): "+faxList.item(i).getTextContent());
	            			response.getWriter().println("gSTINList.item(i).getTextContent(): "+gSTINList.item(i).getTextContent());
	            			response.getWriter().println("mobile1List.item(i).getTextContent(): "+mobile1List.item(i).getTextContent());
	            			response.getWriter().println("nameList.item(i).getTextContent(): "+nameList.item(i).getTextContent());
	            			response.getWriter().println("legalStatusList.item(i).getTextContent(): "+legalStatusList.item(i).getTextContent());
	            			response.getWriter().println("landlineList.item(i).getTextContent(): "+landlineList.item(i).getTextContent());
	            			response.getWriter().println("pANList.item(i).getTextContent(): "+pANList.item(i).getTextContent());
	            			response.getWriter().println("postalCodeList.item(i).getTextContent(): "+postalCodeList.item(i).getTextContent());
	            			response.getWriter().println("regionList.item(i).getTextContent(): "+regionList.item(i).getTextContent());
	            			response.getWriter().println("regionDescList.item(i).getTextContent(): "+regionDescList.item(i).getTextContent());
	            			response.getWriter().println("true");
	            		}
						break;
        			}
	            	//added
	            }
	            if (message.equalsIgnoreCase("")) {
	            	userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
	            	userCustomerResponse.addProperty("Status", "000002");
	    			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
				}
	            if (debug){
					response.getWriter().println("getUserCustomersFromERP()-message: "+message);
					response.getWriter().println("getUserCustomersFromERP()-userCustomerResponse: "+userCustomerResponse);
				}
			}
			EntityUtils.consume(customerEntity);
			return userCustomerResponse;
		}catch (RuntimeException e) {
//			customerRequest.abort();
			if(debug){
				response.getWriter().println("RuntimeException in getUserCustomersFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
			return userCustomerResponse;
		}catch (ParserConfigurationException e) {
			if(debug){
				response.getWriter().println("ParserConfigurationException in getUserCustomersFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
			return userCustomerResponse;
		} catch (SAXException e) {
			if(debug){
				response.getWriter().println("SAXException in getUserCustomersFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
			return userCustomerResponse;
		}
		/* finally
		{
			// closableHttpClient.close();
		} */
	}
	
	public JsonObject getVendorsFromERP(HttpServletRequest request, HttpServletResponse response, String loginSessionID, String customerNo, boolean debug) throws IOException, URISyntaxException{

		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth="",message="" ; 
//		boolean isValidCustomer = false, debug = false;
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
	// added
		JsonObject userCustomerEntriesJson = new JsonObject();
		JsonObject userCustomerResponse = new JsonObject();
		try{
			
			if(null != request.getParameter("PGID"))
				pgID = request.getParameter("PGID");
			
			/*if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				debug = true;*/
			
			customerFilter = "LoginID eq '"+loginSessionID+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(PCGW_UTIL_DEST_NAME);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			// String service = destConfiguration.get("service").get().toString();
			
			/*if(pgID.equalsIgnoreCase("AXISPG")){
				if(sapclient != null)
				{
//						CustomerService = destination.getURI().getPath()+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ CustomerFilter;
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
				}
				else
				{
					customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
				}
			}else{*/
				/*if(null != service && service.equalsIgnoreCase("SFGW")){
					if(sapclient != null)
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?sap-client="+ sapclient +"&$filter="+ customerFilter;
					}
					else
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/SFGW_MST/UserCustomers?$filter="+ customerFilter;
					}
				}else{*/
					if(sapclient != null)
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/Vendors?sap-client="+ sapclient +"&$filter="+ customerFilter;
					}
					else
					{
						customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/Vendors?$filter="+ customerFilter;
					}
//				}
//			}
			
			if (debug){
				response.getWriter().println("getVendorsFromERPService: "+customerService);
				response.getWriter().println("destURL: "+destURL);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("getVendorsFromERP.proxyType: "+proxyType);
			    response.getWriter().println("getVendorsFromERP.proxyHost: "+proxyHost);
			    response.getWriter().println("getVendorsFromERP.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        userCustomersGet = new HttpGet(customerService);
//	        userCustomersGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        userCustomersGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(userCustomersGet);
	        HttpResponse httpResponse = client.execute(userCustomersGet);
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("getVendorsFromERP.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		        
				String retSrc = EntityUtils.toString(customerEntity);
				
				if(debug)
					response.getWriter().println("retSrc: "+retSrc);
				
				docBuilder = docBuilderFactory.newDocumentBuilder();
				inputSource = new InputSource(new StringReader(retSrc));
	            Document document = docBuilder.parse(inputSource);
	            document.getChildNodes().getLength();
	            NodeList customerNoList = document.getElementsByTagName("d:VendorNo");
	            NodeList address1List = document.getElementsByTagName("d:Address1");
	            NodeList address2List = document.getElementsByTagName("d:Address2");
	            NodeList address3List = document.getElementsByTagName("d:Address3");
	            NodeList address4List = document.getElementsByTagName("d:Address4");
	            NodeList cityList = document.getElementsByTagName("d:City");
	            NodeList countryDescList = document.getElementsByTagName("d:CountryDesc");
	            NodeList countryIDList = document.getElementsByTagName("d:Country");
//	            NodeList dateOfIncorporationList = document.getElementsByTagName("d:DateOfIncorporation");
	            NodeList districtList = document.getElementsByTagName("d:District");
	            NodeList emailIDList = document.getElementsByTagName("d:EmailID");
	            NodeList faxList = document.getElementsByTagName("d:Fax");
	            NodeList gSTINList = document.getElementsByTagName("d:GSTIN");
	            NodeList mobile1List = document.getElementsByTagName("d:Mobile1");
	            NodeList nameList = document.getElementsByTagName("d:VendorName1");
	            NodeList legalStatusList = document.getElementsByTagName("d:LegalStatus");
	            NodeList landlineList = document.getElementsByTagName("d:Landline");
	            NodeList pANList = document.getElementsByTagName("d:PAN");
	            NodeList postalCodeList = document.getElementsByTagName("d:PostalCode");
	            NodeList regionList = document.getElementsByTagName("d:Region");
	            NodeList regionDescList = document.getElementsByTagName("d:RegionDesc");
	            
//	            NodeList entryList = document.getElementsByTagName("entry");
	            for(int i=0 ; i<customerNoList.getLength() ; i++)
	            {
	            	if(customerNo.equalsIgnoreCase(customerNoList.item(i).getTextContent()))
        			{
	            		userCustomerEntriesJson.addProperty("Address1", address1List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address2", address2List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address3", address3List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Address4", address4List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("City", cityList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CountryDesc", countryDescList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CountryID", countryIDList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("DateOfIncorporation", "");
						userCustomerEntriesJson.addProperty("District", districtList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("EmailID", emailIDList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Fax", faxList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("GSTIN", gSTINList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Mobile1", mobile1List.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Name", nameList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("LegalStatus", legalStatusList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Landline", landlineList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("PAN", pANList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("PostalCode", postalCodeList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("CustomerNo", customerNoList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("Region", regionList.item(i).getTextContent());
						userCustomerEntriesJson.addProperty("RegionDesc", regionDescList.item(i).getTextContent());
						
						message="Success";
						userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
						userCustomerResponse.addProperty("Status", "000001");
						userCustomerResponse.addProperty("Message", message);
						
//	      	      		isValidCustomer = true;
						if(debug)
						{
	            			response.getWriter().println("vendorNo: "+customerNo);
	            			response.getWriter().println("vendorNoList.item(i).getTextContent(): "+customerNoList.item(i).getTextContent());
	            			response.getWriter().println("address1List.item(i).getTextContent(): "+address1List.item(i).getTextContent());
	            			response.getWriter().println("address2List.item(i).getTextContent(): "+address2List.item(i).getTextContent());
	            			response.getWriter().println("address3List.item(i).getTextContent(): "+address3List.item(i).getTextContent());
	            			response.getWriter().println("address4List.item(i).getTextContent(): "+address4List.item(i).getTextContent());
	            			response.getWriter().println("cityList.item(i).getTextContent(): "+cityList.item(i).getTextContent());
	            			response.getWriter().println("countryDescList.item(i).getTextContent(): "+countryDescList.item(i).getTextContent());
	            			response.getWriter().println("countryIDList.item(i).getTextContent(): "+countryIDList.item(i).getTextContent());
//	            			response.getWriter().println("dateOfIncorporationList.item(i).getTextContent(): "+dateOfIncorporationList.item(i).getTextContent());
	            			response.getWriter().println("districtList.item(i).getTextContent(): "+districtList.item(i).getTextContent());
	            			response.getWriter().println("emailIDList.item(i).getTextContent(): "+emailIDList.item(i).getTextContent());
	            			response.getWriter().println("faxList.item(i).getTextContent(): "+faxList.item(i).getTextContent());
	            			response.getWriter().println("gSTINList.item(i).getTextContent(): "+gSTINList.item(i).getTextContent());
	            			response.getWriter().println("mobile1List.item(i).getTextContent(): "+mobile1List.item(i).getTextContent());
	            			response.getWriter().println("nameList.item(i).getTextContent(): "+nameList.item(i).getTextContent());
	            			response.getWriter().println("legalStatusList.item(i).getTextContent(): "+legalStatusList.item(i).getTextContent());
	            			response.getWriter().println("landlineList.item(i).getTextContent(): "+landlineList.item(i).getTextContent());
	            			response.getWriter().println("pANList.item(i).getTextContent(): "+pANList.item(i).getTextContent());
	            			response.getWriter().println("postalCodeList.item(i).getTextContent(): "+postalCodeList.item(i).getTextContent());
	            			response.getWriter().println("regionList.item(i).getTextContent(): "+regionList.item(i).getTextContent());
	            			response.getWriter().println("regionDescList.item(i).getTextContent(): "+regionDescList.item(i).getTextContent());
	            			response.getWriter().println("true");
	            		}
						break;
        			}
	            	//added
	            }
	            if (message.equalsIgnoreCase("")) {
	            	userCustomerResponse.add("vendorMaster", userCustomerEntriesJson);
	            	userCustomerResponse.addProperty("Status", "000002");
	    			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
				}
	            if (debug){
					response.getWriter().println("getVendorsFromERP()-message: "+message);
					response.getWriter().println("getVendorsFromERP()-vendorsResponse: "+userCustomerResponse);
				}
			}
			EntityUtils.consume(customerEntity);
			return userCustomerResponse;
		}catch (RuntimeException e) {
//			customerRequest.abort();
			if(debug){
				response.getWriter().println("RuntimeException in getVendorsFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Vendor Master");
			return userCustomerResponse;
		}catch (ParserConfigurationException e) {
			if(debug){
				response.getWriter().println("ParserConfigurationException in getVendorsFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Vendor Master");
			return userCustomerResponse;
		} catch (SAXException e) {
			if(debug){
				response.getWriter().println("SAXException in getUserCustomersFromERP: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			//added
			userCustomerResponse.add("CustomerMaster", userCustomerEntriesJson);
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("Message", "Issue in retrieving Customer Master");
			return userCustomerResponse;
		}
		/* finally
		{
			// closableHttpClient.close();
		} */
	
	}
	
	public String createSupplyChainPartner(HttpServletRequest request ,HttpServletResponse response, String aggregatorID, JSONObject inputJsonObject, JsonObject userCustomerEntriesJson,boolean debug) throws IOException
	{
		String customerNo="",oDataUrl="",uniqueID = "", message ="",executeURL="", changedBy="", changedAt="", userName="" ,passWord="",userPass="";
		String createdBy ="", createdAt="", errorCode ="", sessionID="", errorMsg="", executeSCPUrl="", status="";
		int scpIntriesSize=0;
		long changedOnInMillis=0, createdOnInMillis=0;
		JsonObject scpEntriesJson = new JsonObject();
		JSONObject entryPayload = new JSONObject();
		JsonObject updateInsertJSONResponse = new JsonObject();
		try {
			
			customerNo = inputJsonObject.getString("CustomerNo");
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			
			String formattedStr = "";
			try{
				int number = Integer.parseInt(customerNo);
				formattedStr = ("0000000000" + customerNo).substring(customerNo.length());
				customerNo = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
		
			if (debug){
			response.getWriter().println("customerNo: " + customerNo);
			response.getWriter().println("oDataUrl: " + oDataUrl);
			response.getWriter().println("userName: " + userName);
			response.getWriter().println("passWord: " + passWord);
			}
	
			if (debug){
				response.getWriter().println("createSupplyChainPartner()-userCustomerEntriesJson: " + userCustomerEntriesJson);
				response.getWriter().println("createSupplyChainPartner()-userCustomerEntriesJson.Status: " + status);
			}
			JsonObject userCustomerChildObj = userCustomerEntriesJson.get("CustomerMaster").getAsJsonObject();
				if (debug)
					response.getWriter().println("createSupplyChainPartner()-userCustomerChildObj: " + userCustomerChildObj);
				
				executeSCPUrl =oDataUrl+"SupplyChainPartners";
				if (debug)
					response.getWriter().println("createSupplyChainPartner()-executeSCPUrl: " + executeSCPUrl);

				entryPayload.accumulate("AggregatorId", aggregatorID);
				
				if(inputJsonObject.getString("CPType").equalsIgnoreCase("01"))
					entryPayload.accumulate("SCPType", "000003");
				else if(inputJsonObject.getString("CPType").equalsIgnoreCase("60"))
					entryPayload.accumulate("SCPType", "000002");
				else
					entryPayload.accumulate("SCPType", "");
	
				if(!userCustomerChildObj.get("CustomerNo").isJsonNull()) 
					entryPayload.accumulate("SCPGuid", customerNo);
//					entryPayload.accumulate("SCPGuid", userCustomerChildObj.get("CustomerNo").getAsString());
				else
					entryPayload.accumulate("SCPGuid", "");
				
				if(!userCustomerChildObj.get("Name").isJsonNull())
					entryPayload.accumulate("Name1", userCustomerChildObj.get("Name").getAsString());
				else
					entryPayload.accumulate("Name1", "");
				
				entryPayload.accumulate("Name2", "");
				entryPayload.accumulate("Name3", "");
				entryPayload.accumulate("Name4", "");
				entryPayload.accumulate("TelephoneExtn", "");
				entryPayload.accumulate("FaxExtn", "");
				entryPayload.accumulate("Source", "");
				
				if(!userCustomerChildObj.get("PAN").isJsonNull())
					entryPayload.accumulate("PANNo", userCustomerChildObj.get("PAN").getAsString());
				else
					entryPayload.accumulate("PANNo", "");
				
				if(!userCustomerChildObj.get("LegalStatus").isJsonNull())
					entryPayload.accumulate("LegalStatusID", userCustomerChildObj.get("LegalStatus").getAsString());
				else
					entryPayload.accumulate("LegalStatusID", "");
				
				if(!userCustomerChildObj.get("Address1").isJsonNull())
					entryPayload.accumulate("Address1", userCustomerChildObj.get("Address1").getAsString());
				else
					entryPayload.accumulate("Address1", "");
				
				if(!userCustomerChildObj.get("Address2").isJsonNull())
					entryPayload.accumulate("Address2", userCustomerChildObj.get("Address2").getAsString());
				else
					entryPayload.accumulate("Address2", "");
				
				if(!userCustomerChildObj.get("Address3").isJsonNull())
					entryPayload.accumulate("Address3", userCustomerChildObj.get("Address3").getAsString());
				else
					entryPayload.accumulate("Address3", "");
				
				if(!userCustomerChildObj.get("Address4").isJsonNull())
					entryPayload.accumulate("Address4", userCustomerChildObj.get("Address4").getAsString());
				else
					entryPayload.accumulate("Address4", "");
				
				if(!userCustomerChildObj.get("District").isJsonNull())
					entryPayload.accumulate("District", userCustomerChildObj.get("District").getAsString());
				else
					entryPayload.accumulate("District", "");
				
				if(!userCustomerChildObj.get("City").isJsonNull())
					entryPayload.accumulate("City", userCustomerChildObj.get("City").getAsString());
				else
					entryPayload.accumulate("City", "");
				
				if(!userCustomerChildObj.get("PostalCode").isJsonNull())
					entryPayload.accumulate("PostalCode", userCustomerChildObj.get("PostalCode").getAsString());
				else
					entryPayload.accumulate("PostalCode", "");
				
				if(!userCustomerChildObj.get("Region").isJsonNull())
					entryPayload.accumulate("StateID", userCustomerChildObj.get("Region").getAsString());
				else
					entryPayload.accumulate("StateID", "");
				
				if(!userCustomerChildObj.get("RegionDesc").isJsonNull())
					entryPayload.accumulate("StateDesc", userCustomerChildObj.get("RegionDesc").getAsString());
				else
					entryPayload.accumulate("StateDesc", "");
				
				if(!userCustomerChildObj.get("CountryID").isJsonNull())
					entryPayload.accumulate("CountryID", userCustomerChildObj.get("CountryID").getAsString());
				else
					entryPayload.accumulate("CountryID", "");
				
				if(!userCustomerChildObj.get("CountryDesc").isJsonNull())
					entryPayload.accumulate("CountryDesc", userCustomerChildObj.get("CountryDesc").getAsString());
				else
					entryPayload.accumulate("CountryDesc", "");
				
				if(!userCustomerChildObj.get("Landline").isJsonNull())
					entryPayload.accumulate("TelephoneNo", userCustomerChildObj.get("Landline").getAsString());
				else
					entryPayload.accumulate("TelephoneNo", "");
				
				if(!userCustomerChildObj.get("Fax").isJsonNull())
					entryPayload.accumulate("FaxNumber", userCustomerChildObj.get("Fax").getAsString());
				else
					entryPayload.accumulate("FaxNumber", "");
				
				if(!userCustomerChildObj.get("Mobile1").isJsonNull())
					entryPayload.accumulate("MobileNo", userCustomerChildObj.get("Mobile1").getAsString());
				else
					entryPayload.accumulate("MobileNo", "");
				
				if(!userCustomerChildObj.get("EmailID").isJsonNull())
					entryPayload.accumulate("EmailID", userCustomerChildObj.get("EmailID").getAsString());
				else
					entryPayload.accumulate("EmailID", "");
				
				if(!userCustomerChildObj.get("DateOfIncorporation").isJsonNull() && userCustomerChildObj.get("DateOfIncorporation").getAsString().trim().length()>0){
					String dateOfIncorporation = userCustomerChildObj.get("DateOfIncorporation").getAsString();
					long dateOfIncorporationMillis = convertToMillis(dateOfIncorporation);
					entryPayload.accumulate("DateofIncorporation", "/Date("+dateOfIncorporationMillis+")/");
				}
				else
					entryPayload.accumulate("DateofIncorporation", JSONObject.NULL);
				
				if(!userCustomerChildObj.get("GSTIN").isJsonNull())
					entryPayload.accumulate("GSTIN", userCustomerChildObj.get("GSTIN").getAsString());
				else
					entryPayload.accumulate("GSTIN", "");
				
			//	4.	Now filter SCP table by using CustomerNo and AggregatorID
				executeURL= executeSCPUrl+"?$filter=AggregatorId%20eq%20%27"+aggregatorID+"%27%20and%20SCPGuid%20eq%20%27"+customerNo+"%27";
				if (debug)
				response.getWriter().println("createSupplyChainPartner()-executeURL: " + executeURL);
				
				scpEntriesJson = executeURL(executeURL, userPass, response);
				scpIntriesSize = scpEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
				
				if (debug){
					response.getWriter().println("createSupplyChainPartner()-scpIntriesSize-: " + scpIntriesSize);
					response.getWriter().println("createSupplyChainPartner()-scpEntriesJson-: " + scpEntriesJson);
				}
				if (scpIntriesSize > 0) {
					JsonObject scfEntryToPut = scpEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
					
					message= "";
					changedBy =  getUserPrincipal(request, "name", response);
					changedAt = getCreatedAtTime();
					changedOnInMillis = getCreatedOnDate();
					uniqueID = scpEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("ID").getAsString();
					if(scfEntryToPut.get("Name2").isJsonNull())
						entryPayload.accumulate("Name2", JSONObject.NULL);
					else
						entryPayload.accumulate("Name2", scfEntryToPut.get("Name2").getAsString());
					
					if(scfEntryToPut.get("Name3").isJsonNull())
						entryPayload.accumulate("Name3", JSONObject.NULL);
					else
						entryPayload.accumulate("Name3", scfEntryToPut.get("Name3").getAsString());

					if(scfEntryToPut.get("Name4").isJsonNull())
						entryPayload.accumulate("Name4", JSONObject.NULL);
					else
						entryPayload.accumulate("Name4", scfEntryToPut.get("Name4").getAsString());

					if(scfEntryToPut.get("TelephoneExtn").isJsonNull())
						entryPayload.accumulate("TelephoneExtn", JSONObject.NULL);
					else
						entryPayload.accumulate("TelephoneExtn", scfEntryToPut.get("TelephoneExtn").getAsString());
					
					if(scfEntryToPut.get("FaxExtn").isJsonNull())
						entryPayload.accumulate("FaxExtn", JSONObject.NULL);
					else
						entryPayload.accumulate("FaxExtn", scfEntryToPut.get("FaxExtn").getAsString());
					
					if(scfEntryToPut.get("LoginID").isJsonNull())
						entryPayload.accumulate("LoginID", JSONObject.NULL);
					else
						entryPayload.accumulate("LoginID", scfEntryToPut.get("LoginID").getAsString());
					
					if(scfEntryToPut.get("LoginStatus").isJsonNull())
						entryPayload.accumulate("LoginStatus", JSONObject.NULL);
					else
						entryPayload.accumulate("LoginStatus", scfEntryToPut.get("LoginStatus").getAsString());

					if(scfEntryToPut.get("LoginCompletedDate").isJsonNull())
						entryPayload.accumulate("LoginCompletedDate", JSONObject.NULL);
					else
						entryPayload.accumulate("LoginCompletedDate", scfEntryToPut.get("LoginCompletedDate").getAsString());
					
					if(scfEntryToPut.get("LoginCompletedTime").isJsonNull())
						entryPayload.accumulate("LoginCompletedTime", JSONObject.NULL);
					else
						entryPayload.accumulate("LoginCompletedTime", scfEntryToPut.get("LoginCompletedTime").getAsString());

					if(scfEntryToPut.get("DefaultPassword").isJsonNull())
						entryPayload.accumulate("DefaultPassword", JSONObject.NULL);
					else
						entryPayload.accumulate("DefaultPassword", scfEntryToPut.get("DefaultPassword").getAsString());

					if(scfEntryToPut.get("RealTimeCINData").isJsonNull())
						entryPayload.accumulate("RealTimeCINData", JSONObject.NULL);
					else
						entryPayload.accumulate("RealTimeCINData", scfEntryToPut.get("RealTimeCINData").getAsString());
					
					if(scfEntryToPut.get("AggregatorDivision").isJsonNull())
						entryPayload.accumulate("AggregatorDivision", JSONObject.NULL);
					else
						entryPayload.accumulate("AggregatorDivision", scfEntryToPut.get("AggregatorDivision").getAsString());
					
					if(scfEntryToPut.get("Source").isJsonNull())
						entryPayload.accumulate("Source", JSONObject.NULL);
					else
						entryPayload.accumulate("Source", scfEntryToPut.get("Source").getAsString());
					
					if(scfEntryToPut.get("SourceReferenceID").isJsonNull())
						entryPayload.accumulate("SourceReferenceID", JSONObject.NULL);
					else
						entryPayload.accumulate("SourceReferenceID", scfEntryToPut.get("SourceReferenceID").getAsString());
					
					if(scfEntryToPut.get("CreatedBy").isJsonNull())
						entryPayload.accumulate("CreatedBy", JSONObject.NULL);
					else
						entryPayload.accumulate("CreatedBy", scfEntryToPut.get("CreatedBy").getAsString());

					if(scfEntryToPut.get("CreatedAt").isJsonNull())
						entryPayload.accumulate("CreatedAt", JSONObject.NULL);
					else
						entryPayload.accumulate("CreatedAt", scfEntryToPut.get("CreatedAt").getAsString());
					
					if(scfEntryToPut.get("CreatedOn").isJsonNull())
						entryPayload.accumulate("CreatedOn", JSONObject.NULL);
					else
						entryPayload.accumulate("CreatedOn", scfEntryToPut.get("CreatedOn").getAsString());

					if (debug){
						response.getWriter().println("createSupplyChainPartner()-changedBy: " + changedBy);
						response.getWriter().println("createSupplyChainPartner()-changedAt: " + changedAt);
						response.getWriter().println("createSupplyChainPartner()-changedOnInMillis: " + changedOnInMillis);
						response.getWriter().println("createSupplyChainPartner()-uniqueID: " + uniqueID);
					}
					entryPayload.accumulate("ChangedBy", changedBy);
					entryPayload.accumulate("ChangedAt", changedAt);
					entryPayload.accumulate("ChangedOn", "/Date("+changedOnInMillis+")/");
					
					executeSCPUrl = executeSCPUrl+"('"+uniqueID+"')";
					if (debug){
						response.getWriter().println("createSupplyChainPartner-executeUpdate.entryPayload: "+entryPayload);
						response.getWriter().println("executeUpdate.executeSCPUrl: "+ executeSCPUrl);
					}
			// 		calling executeUpdate() to update the Existing Entry
					/*stepNo++;
					odatalogs.insertMessageForAppLogs(request, response, logID,  "I", "/ARTEC/PY", entryPayload+"", stepNo, "BPRenewal:SupplyChainPartner Updated Payload ", oDataURL, userPass, destAggrID, debug);*/
					updateInsertJSONResponse = executeUpdate(executeSCPUrl, userPass, response, entryPayload, request, debug, "PYGWHANA");
					
					if (debug)
						response.getWriter().println("createSupplyChainPartner-updateInsertJSONResponse: "+updateInsertJSONResponse);

					if (!updateInsertJSONResponse.isJsonNull()) {
						if (updateInsertJSONResponse.has("error") && !updateInsertJSONResponse.get("ErrorCode").getAsString().equalsIgnoreCase("")) {
							message="E199";
//							return message;
						}
					}
					if (debug)
						response.getWriter().println("createSupplyChainPartner-executeUpdate.message: "+ message);
				} else {
					message="";
					createdBy= getUserPrincipal(request, "name", response);
					createdAt= getCreatedAtTime();
					createdOnInMillis= getCreatedOnDate();
					uniqueID = generateGUID(36);
					
					if (debug){
						response.getWriter().println("createSupplyChainPartner()-createdBy: " + createdBy);
						response.getWriter().println("createSupplyChainPartner()-createdAt: " + createdAt);
						response.getWriter().println("createSupplyChainPartner()-createdOnInMillis: " + createdOnInMillis);
						response.getWriter().println("createSupplyChainPartner()-uniqueID: " + uniqueID);
					}
					
					entryPayload.accumulate("ID", uniqueID);
					entryPayload.accumulate("CreatedBy", createdBy);
					entryPayload.accumulate("CreatedAt", createdAt);
					entryPayload.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
					
					if (debug){
						response.getWriter().println("createSupplyChainPartner-executePostURL.entryPayload: "+entryPayload);
						response.getWriter().println("executePostURL.executeSCPUrl: "+ executeSCPUrl);
					}
			// 		calling executePostURL() to create new Entry
					
					/*stepNo++;
					odatalogs.insertMessageForAppLogs(request, response, logID,  "I", "/ARTEC/PY", entryPayload+"", stepNo, "BPRenewal:Inserting new  Records to SupplyChainPartner ", oDataURL, userPass, destAggrID, debug);*/
					
					updateInsertJSONResponse = executePostURL(executeSCPUrl, userPass, response, entryPayload, request, debug, "PYGWHANA");
					if(debug)
					response.getWriter().println("createSupplyChainPartner-updateCreateJSONResponse: "+updateInsertJSONResponse);
					
					if (!updateInsertJSONResponse.isJsonNull()) {
						if (updateInsertJSONResponse.has("error")) {
							message="E199";
						}
					}
					if (debug)
						response.getWriter().println("createSupplyChainPartner-executePostURL.message: "+ message);
				}
				return message;
		}catch (NullPointerException e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug){
				response.getWriter().println("NullPointerException in getCustomers: "+e.getMessage());
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			/*stepNo++;
			odatalogs.insertMessageForAppLogs(request, response, logID,  "E", "/ARTEC/PY",buffer.toString(), stepNo, "BPRenewal:Exception Occurred While Inserting SupplyChainPartner Record", oDataURL, userPass, destAggrID, debug);*/
			message="E199";
			return message;
		}
		catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if (debug) {
				response.getWriter().println("Exception-createSupplyChainPartner: "+ e.getMessage());
				response.getWriter().println("Full Stack Trace: "+ buffer.toString());
			}
			/*stepNo++;
			odatalogs.insertMessageForAppLogs(request, response, logID,  "E", "/ARTEC/PY",buffer.toString(), stepNo, "BPRenewal:Exception Occurred While Inserting SupplyChainPartner Record", oDataURL, userPass, destAggrID, debug);*/
			message ="E199";
			return message;
		}
		
	}
	
	public JsonObject getOnbBPDataFromCloud(String customerNo, HttpServletRequest request, HttpServletResponse response, String cpType, 
			boolean debug) throws IOException{
		String aggregatorID="", oDataUrl="", userName="", passWord="", userPass="", executeUrl="";
		JsonObject onbBPDataObj = new JsonObject();
		try{
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			if(debug){
				response.getWriter().println("getOnbBPDataFromCloud-aggregatorID: "+aggregatorID);
				response.getWriter().println("getOnbBPDataFromCloud-oDataUrl: "+oDataUrl);
				response.getWriter().println("getOnbBPDataFromCloud-userName: "+userName);
			}
			
//			executeUrl = oDataUrl+"UserCustomers?$filter=PartnerID%20eq%20%27"+customerNo+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			executeUrl = oDataUrl+"BPHeaders?$expand=BPContactPersons&$filter=CPGuid%20eq%20%27"+customerNo+"%27%20and%20CPType%20eq%20%27"+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20StatusID%20eq%20%27%27";
			if(debug)
				response.getWriter().println("getOnbBPDataFromCloud-executeURL: "+executeUrl);
			
			onbBPDataObj = executeURL(executeUrl, userPass, response);
			if(debug)
				response.getWriter().println("getOnbBPDataFromCloud-onbBPDataObj: "+onbBPDataObj);
			
			return onbBPDataObj;
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("getOnbBPDataFromCloud.Exception: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			return onbBPDataObj;
		}
	}
	
	public String insertCurrentCloudBPData(String aggregatorID, JSONObject inputJsonObject, JsonObject userCustomerJson, HttpServletRequest request, HttpServletResponse response, 
			boolean debug) throws IOException{
		String tableName="", userName="", passWord="", userPass="",cpGuid ="", cpType="", status="", oDataUrl="", executeURL="", message="", bpFromERPStatus1="",bpGuid="",
				errorCode="", sessionID="", errorMsg="", bpCNTPExecuteUrl="", iD="", customerNo="";
		int bpDataObjSize=0;
		boolean isDeletionSuccess=false;
		JsonObject bpDataObj = new JsonObject();
		JsonObject bpHeaderObj = new JsonObject();
		JsonObject bpContactPersonObj = new JsonObject();
		JsonObject bpFromERPObj = new JsonObject();
		JsonObject bpFromERPChildObj = new JsonObject();
//		JsonObject scpDataObj = new JsonObject();
		JsonObject bpCNTPResObj = new JsonObject();
		try{
			aggregatorID = "";
			aggregatorID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			cpGuid = inputJsonObject.getString("CustomerNo");
			customerNo=inputJsonObject.getString("CustomerNo");
			cpType = inputJsonObject.getString("CPType");
			status = "000001";
			String formattedStr = "";
			try{
				int number = Integer.parseInt(cpGuid);
				formattedStr = ("0000000000" + cpGuid).substring(cpGuid.length());
				cpGuid = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
			
			if(debug){
				response.getWriter().println("insertCurrentCloudBPData.aggregatorID: "+aggregatorID);
				response.getWriter().println("insertCurrentCloudBPData.oDataUrl: "+oDataUrl);
				response.getWriter().println("insertCurrentCloudBPData.userName: "+userName);
				response.getWriter().println("insertCurrentCloudBPData.passWord: "+passWord);
				response.getWriter().println("insertCurrentCloudBPData.userPass: "+userPass);
				response.getWriter().println("insertCurrentCloudBPData.cpGuid: "+cpGuid);
				response.getWriter().println("insertCurrentCloudBPData.cpType: "+cpType);
			}
			
			executeURL = oDataUrl+"BPHeaders?$expand=BPContactPersons&$filter=CPGuid%20eq%20%27"+cpGuid+"%27%20and%20CPType%20eq%20%27"
							+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20StatusID%20eq%20%27"+status+"%27";
			
			if(debug)
				response.getWriter().println("insertCurrentCloudBPData.BPHeaders-ExecuteURL: "+executeURL);
			
			bpDataObj = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("insertCurrentCloudBPData.bpDataObj: "+bpDataObj);
			
			bpDataObjSize = bpDataObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			if(debug)
				response.getWriter().println("insertCurrentCloudBPData.bpDataObjSize: "+bpDataObjSize);
			
			if(bpDataObjSize > 0){
				message = "";
				return message;
			}else{
				String loginID = getLoginID(request, response, debug);	
				// Generation of sessoinID from createUserSession()
				if (loginID != null) {
					
					/*if (loginID == null) {
						errorCode = "E125";
					} else {
						String authMethod = getDestinationURL(request, response, "Authentication");
						if (debug)
							response.getWriter().println("insertCurrentBPData.authMethod:" + authMethod);
						if(authMethod.equalsIgnoreCase("BasicAuthentication")){
							String url = getDestinationURL(request, response, "URL");
							if (debug)
								response.getWriter().println("url:" + url);
							sessionID = createUserSession(request, response, url, loginID, debug);
							if (debug)
								response.getWriter().println("insertCurrentBPData.Generating sessionID:" + sessionID);
							if (sessionID.contains(" ")) {
								errorCode = "S001";
								errorMsg = sessionID;
								if (debug)
									response.getWriter().println("insertCurrentBPData.Generating sessionID - contains errorCode:" + errorCode + " : " + errorMsg);
							}
						} else{
							sessionID ="";
						}
					}*/
				}else {
					errorCode = "E125";
					if (debug)
						response.getWriter().println("insertCurrentCloudBPData.Getting LoginID - errorCode:" + errorCode);
				}
				
				if (errorCode != null & errorCode.trim().length() == 0) {
					bpFromERPObj = getOnbBPDataFromCloud(customerNo, request, response, cpType, debug);
					if(debug)
						response.getWriter().println("insertCurrentCloudBPData.bpFromERPObj: "+bpFromERPObj);
//					change the below logic
					if(debug)
						response.getWriter().println("insertCurrentCloudBPData.bpFromERPObj - childObj:"+bpFromERPChildObj);
//					if(bpFromERPObj.has("StatusID"))
					/*bpFromERPStatus = bpFromERPObj.get("Status").getAsString();
					if(debug)
						response.getWriter().println("insertCurrentCloudBPData.Status: "+ bpFromERPStatus);*/
					
					if(bpFromERPObj.has("d")){
						if(bpFromERPObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
							bpFromERPChildObj = bpFromERPObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
//							scpDataObj = getUserCustomersFromERP(request, response, sessionID, cpGuid, debug);
							if(debug)
								response.getWriter().println("insertCurrentCloudBPData.userCustomerJson: "+ userCustomerJson);
//							Change below method
							bpHeaderObj = insertCloudBPHeaderData(aggregatorID, userPass, userCustomerJson, bpFromERPObj, inputJsonObject, request, response, debug);
							if(debug)
								response.getWriter().println("insertCurrentCloudBPData.BPHeaderObj: "+bpHeaderObj);
			
							if(bpHeaderObj.get("ErrorCode").getAsString().equalsIgnoreCase("")){
								if(debug)
									response.getWriter().println("insertCurrentCloudBPData.BPHeader Insertion  Success");
								bpContactPersonObj = insertCloudBPContactPersonData(userPass, bpFromERPChildObj, bpHeaderObj, request, response, debug);
								if(debug)
									response.getWriter().println("BPContactPersonObj: "+bpContactPersonObj);
								if(bpContactPersonObj.get("ErrorCode").getAsString().equalsIgnoreCase("")){
									message = "";
									if(debug)
										response.getWriter().println("insertCurrentCloudBPData.BPContactPerson Insertion Success");
									return message;
								}else{
									message = "BPContactPerson Insertion failed";
									bpGuid = bpHeaderObj.get("d").getAsJsonObject().get("ID").getAsString();
									tableName = "BPHeader";
									isDeletionSuccess = deleteEntry(request, response, bpGuid, tableName, oDataUrl, userPass, aggregatorID, debug);
									bpCNTPExecuteUrl = oDataUrl+"BPContactPerson?$filter=%20BPID%20eq%20%27"+bpGuid+"%27";
									bpCNTPResObj = executeURL(bpCNTPExecuteUrl, userPass, response);
									int bpCNTPResObjSize = bpCNTPResObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
									for(int i=0; i < bpCNTPResObjSize; i++){
										iD = bpCNTPResObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("ID").getAsString();
										tableName = "BPContactPerson";
										isDeletionSuccess = deleteEntry(request, response, iD, tableName, oDataUrl, userPass, aggregatorID, debug);
									}
									return message;
								}
							}else{
								message = "BPHeader Insertion failed";
								return message;
							}
						}else{
							message = "E198";
							return message;
						}
					}else{
						message = "E198";
						return message;
					}
				}else{
					message = errorCode;
					return message;
				}
			}
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("insertCurrentBPData.Exception: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				message ="001 -"+buffer;
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			return message;
		}
//		return message;
	}
	
	public String insertCurrentBPData(String aggregatorID, JSONObject inputJsonObject, JsonObject userCustomerJson, HttpServletRequest request, HttpServletResponse response, 
			boolean debug) throws IOException{
		String tableName="", userName="", passWord="", userPass="",cpGuid ="", cpType="", status="", oDataUrl="", executeURL="", message="", bpFromERPStatus="",bpGuid="",
				errorCode="", sessionID="", errorMsg="", bpCNTPExecuteUrl="", iD="", customerNo="";
		int bpDataObjSize=0;
		boolean isDeletionSuccess=false;
		JsonObject bpDataObj = new JsonObject();
		JsonObject bpHeaderObj = new JsonObject();
		JsonObject bpContactPersonObj = new JsonObject();
		JsonObject bpFromERPObj = new JsonObject();
		JsonObject bpFromERPChildObj = new JsonObject();
//		JsonObject scpDataObj = new JsonObject();
		JsonObject bpCNTPResObj = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			passWord = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+passWord;
			cpGuid = inputJsonObject.getString("CustomerNo");
			customerNo=inputJsonObject.getString("CustomerNo");
			cpType = inputJsonObject.getString("CPType");
			status = "000001";
			String formattedStr = "";
			try{
				int number = Integer.parseInt(cpGuid);
				formattedStr = ("0000000000" + cpGuid).substring(cpGuid.length());
				cpGuid = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
			
			if(debug){
				response.getWriter().println("insertCurrentBPData.oDataUrl: "+oDataUrl);
				response.getWriter().println("insertCurrentBPData.userName: "+userName);
				response.getWriter().println("insertCurrentBPData.passWord: "+passWord);
				response.getWriter().println("insertCurrentBPData.userPass: "+userPass);
				response.getWriter().println("insertCurrentBPData.cpGuid: "+cpGuid);
				response.getWriter().println("insertCurrentBPData.cpType: "+cpType);
			}
			
			executeURL = oDataUrl+"BPHeaders?$expand=BPContactPersons&$filter=CPGuid%20eq%20%27"+cpGuid+"%27%20and%20CPType%20eq%20%27"
							+cpType+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20StatusID%20eq%20%27"+status+"%27";
			
			if(debug)
				response.getWriter().println("insertCurrentBPData.BPHeaders-ExecuteURL: "+executeURL);
			
			bpDataObj = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("insertCurrentBPData.bpDataObj: "+bpDataObj);
			
			bpDataObjSize = bpDataObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
			if(debug)
				response.getWriter().println("insertCurrentBPData.bpDataObjSize: "+bpDataObjSize);
			
			if(bpDataObjSize > 0){
				message = "";
				return message;
			}else{				
				// Generation of sessionID from createUserSession()
				String loginID = getLoginID(request, response, debug);
				// if (request.getUserPrincipal() != null) {
				if (loginID != null) {
					if (loginID == null) {
						errorCode = "E125";
					} else {
						String authMethod = getDestinationURL(request, response, "Authentication");
						if (debug)
							response.getWriter().println("insertCurrentBPData.authMethod:" + authMethod);
						if(authMethod.equalsIgnoreCase("BasicAuthentication")){
							String url = getDestinationURL(request, response, "URL");
							if (debug)
								response.getWriter().println("url:" + url);
							sessionID = createUserSession(request, response, url, loginID, debug);
							if (debug)
								response.getWriter().println("insertCurrentBPData.Generating sessionID:" + sessionID);
							if (sessionID.contains(" ")) {
								errorCode = "S001";
								errorMsg = sessionID;
								if (debug)
									response.getWriter().println("insertCurrentBPData.Generating sessionID - contains errorCode:" + errorCode + " : " + errorMsg);
							}
						} else{
							sessionID ="";
						}
					}
				}else {
					errorCode = "E125";
					if (debug)
						response.getWriter().println("insertCurrentBPData.Generating sessionID - errorCode:" + errorCode);
					}
				if (errorCode != null & errorCode.trim().length() == 0) {
					bpFromERPObj = getCurrentBPDataFromERP(customerNo, sessionID, request, response, cpType, debug);
					if(debug)
						response.getWriter().println("insertCurrentBPData.bpFromERPObj: "+bpFromERPObj);
					bpFromERPChildObj = bpFromERPObj.get("BPData").getAsJsonObject().get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
					if(debug)
						response.getWriter().println("insertCurrentBPData.bpFromERPObj - childObj:"+bpFromERPChildObj);
					bpFromERPStatus = bpFromERPObj.get("Status").getAsString();
					if(debug)
						response.getWriter().println("insertCurrentBPData.Status: "+ bpFromERPStatus);
					
					if(bpFromERPStatus.equalsIgnoreCase("000001")){
//						scpDataObj = getUserCustomersFromERP(request, response, sessionID, cpGuid, debug);
						if(debug)
							response.getWriter().println("insertCurrentBPData.scpDataObj: "+ userCustomerJson);
						
						bpHeaderObj = insertBPHeaderData(aggregatorID, userPass, userCustomerJson, bpFromERPObj, inputJsonObject, request, response, debug);
						if(debug)
							response.getWriter().println("insertCurrentBPData.BPHeaderObj: "+bpHeaderObj);
		
						if(bpHeaderObj.get("ErrorCode").getAsString().equalsIgnoreCase("")){
							if(debug)
								response.getWriter().println("insertCurrentBPData.BPHeader Insertion  Success");
							bpContactPersonObj = insertBPContactPersonData(userPass, bpFromERPChildObj, bpHeaderObj, request, response,inputJsonObject, debug);
							if(debug)
								response.getWriter().println("BPContactPersonObj: "+bpContactPersonObj);
							if(bpContactPersonObj.get("ErrorCode").getAsString().equalsIgnoreCase("")){
								message = "";
								if(debug)
									response.getWriter().println("insertCurrentBPData.BPContactPerson Insertion Success");
								return message;
							}else{
								message = "BPContactPerson Insertion failed";
								bpGuid = bpHeaderObj.get("d").getAsJsonObject().get("ID").getAsString();
								tableName = "BPHeader";
								isDeletionSuccess = deleteEntry(request, response, bpGuid, tableName, oDataUrl, userPass, aggregatorID, debug);
								bpCNTPExecuteUrl = oDataUrl+"BPContactPerson?$filter=%20BPID%20eq%20%27"+bpGuid+"%27";
								bpCNTPResObj = executeURL(bpCNTPExecuteUrl, userPass, response);
								int bpCNTPResObjSize = bpCNTPResObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
								for(int i=0; i < bpCNTPResObjSize; i++){
									iD = bpCNTPResObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("ID").getAsString();
									tableName = "BPContactPerson";
									isDeletionSuccess = deleteEntry(request, response, iD, tableName, oDataUrl, userPass, aggregatorID, debug);
								}
								return message;
							}
						}else{
							message = "BPHeader Insertion failed";
							return message;
						}
					}else{
						message = "E198";
						return message;
					}
				}else{
					message = errorCode;
					return message;
				}
			}
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("insertCurrentBPData.Exception: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				message ="001 -"+buffer;
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			return message;
		}
//		return message;
	}
	
	public JsonObject getCurrentBPDataFromERP(String customerNo, String loginSessionID, HttpServletRequest request, 
			HttpServletResponse response, String cpType, boolean debug) throws IOException {
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", customerService="", customerFilter="", basicAuth=""; 
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		JsonObject erpBPObj =new JsonObject();
		JsonObject erpBPChildObj = new JsonObject();
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		
		try{
			
			customerFilter = "LoginID eq '"+loginSessionID+"' and CPGuid eq '"+customerNo+"' and CPType eq '"+cpType+"'";
			
			customerFilter = URLEncoder.encode(customerFilter, "UTF-8");
			
			customerFilter = customerFilter.replaceAll("%26", "&");
			customerFilter = customerFilter.replaceAll("%3D", "=");
			
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getCurrentBPDataFromERP.getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getCurrentBPDataFromERP.getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getCurrentBPDataFromERP.getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(PCGW_UTIL_DEST_NAME);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = java.util.Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();
			String service = destConfiguration.get("service").get().toString();
			
			/*if(sapclient != null)
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/BPHeaders?$expand=BPContactPersons&sap-client="+ sapclient +"&$filter="+ customerFilter;
			}
			else
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/BPHeaders?$expand=BPContactPersons&$filter="+ customerFilter;
			}*/
			if(sapclient != null)
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/BPHeaders?$expand=BPContactPersons&sap-client="+ sapclient +"&$filter="+ customerFilter;
			}
			else
			{
				customerService = destURL+"/sap/opu/odata/ARTEC/PYGW/BPHeaders?$expand=BPContactPersons&$filter="+ customerFilter;
			}
			
			if (debug){
				response.getWriter().println("getCurrentBPDataFromERP.CustomerService: "+customerService);
				response.getWriter().println("getCurrentBPDataFromERP.destURL: "+destURL);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("getCurrentBPDataFromERP.validateCustomer.proxyType: "+proxyType);
			    response.getWriter().println("getCurrentBPDataFromERP.validateCustomer.proxyHost: "+proxyHost);
			    response.getWriter().println("getCurrentBPDataFromERP.validateCustomer.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        userCustomersGet = new HttpGet(customerService);
//	        userCustomersGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        userCustomersGet.setHeader("content-type", "application/json");
	        userCustomersGet.setHeader("Accept", "application/json");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	userCustomersGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(userCustomersGet);
			HttpResponse httpResponse = client.execute(userCustomersGet);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        if(debug)
	        	response.getWriter().println("getCurrentBPDataFromERP.validateCustomer.statusCode: "+statusCode);
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null){
				String retSrc = EntityUtils.toString(customerEntity);
				if (debug)
					response.getWriter().println("getCurrentBPDataFromERP.retSrc: "+retSrc);
				
				JsonParser parser = new JsonParser();
				erpBPChildObj = (JsonObject)parser.parse(retSrc);
				int erpBPChildObjSize = erpBPChildObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size();
				if(debug)
					response.getWriter().println("getCurrentBPDataFromERP.erpBPChildObjSize:"+erpBPChildObjSize);
				if(erpBPChildObjSize > 0){
					erpBPObj.add("BPData", erpBPChildObj);
					erpBPObj.addProperty("Status", "000001");
					erpBPObj.addProperty("Message", "Success");
		            if(debug)
		            	response.getWriter().println("getCurrentBPDataFromERP.erpBPObj: "+erpBPObj);
				}else{
					erpBPObj.add("BPData", erpBPChildObj);
					erpBPObj.addProperty("Status", "000002");
					erpBPObj.addProperty("Message", "Issue in retrieving BP Data");
		            if(debug)
		            	response.getWriter().println("getCurrentBPDataFromERP.erpBPObj: "+erpBPObj);
				}
			}			
			return erpBPObj;
		}catch (RuntimeException e) {
//			customerRequest.abort();
			if(debug){
				response.getWriter().println("getCurrentBPDataFromERP.RuntimeException in getCustomers: "+e.getMessage());
				
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getCurrentBPDataFromERP.Full Stack Trace: "+buffer.toString());
			}
			erpBPObj.add("BPData", erpBPChildObj);
			erpBPObj.addProperty("Status", "000002");
			erpBPObj.addProperty("Message", "Issue in retrieving BP Data");
			
			return erpBPObj;
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("getCurrentBPDataFromERP.Exception in getCustomers: "+e.getMessage());
				
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getCurrentBPDataFromERP.Full Stack Trace: "+buffer.toString());
			}
			erpBPObj.add("BPData", erpBPChildObj);
			erpBPObj.addProperty("Status", "000002");
			erpBPObj.addProperty("Message", "Issue in retrieving BP Data");
			return erpBPObj;
		}
		/* finally
		{
			// closableHttpClient.close();
		}	 */
	}
	
	public JsonObject insertCloudBPHeaderData(String aggregatorID, String userPass, JsonObject userCustomerObj, JsonObject bpFromERPObj, 
			JSONObject inputJsonObject, HttpServletRequest request, HttpServletResponse response, boolean debug)throws IOException {
		String createdOn="", createdAt ="",createdBy="",  iD="", oDataUrl="", executeURL="", customerNo="";
		long createdOnInMillis=0;
		JSONObject bpInputPayLoadObj = new JSONObject();
		JsonObject scpDataChildObj = new JsonObject();
		JsonObject bpFromERPChildObj = new JsonObject();
		JsonObject bpHeaderObj = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			executeURL = oDataUrl+"BPHeader";
			iD = generateGUID(36);
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			scpDataChildObj = userCustomerObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
			bpFromERPChildObj = bpFromERPObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
			
			customerNo = inputJsonObject.getString("CustomerNo");
			String formattedStr = "";
			try{
				int number = Integer.parseInt(customerNo);
				formattedStr = ("0000000000" + customerNo).substring(customerNo.length());
				customerNo = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
			
			if(debug){
				response.getWriter().println("insertBPHeaderData.BPHeader - ID: "+iD);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdBy: "+createdBy);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdAt: "+createdAt);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdOnInMillis: "+createdOnInMillis);	
				response.getWriter().println("insertBPHeaderData.scpDataObj - childObj: "+scpDataChildObj);			
				response.getWriter().println("insertBPHeaderData.bpFromERPObj - childObj: "+bpFromERPChildObj);
			}
			// generated Fields
			bpInputPayLoadObj.accumulate("ID", iD);
			bpInputPayLoadObj.accumulate("CreatedBy", createdBy);
			bpInputPayLoadObj.accumulate("CreatedAt", createdAt);
			bpInputPayLoadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			
			// extra Fields
			bpInputPayLoadObj.accumulate("StatusID", "000001");
			bpInputPayLoadObj.accumulate("AggregatorID", aggregatorID);
			bpInputPayLoadObj.accumulate("Mobile2", "");
			bpInputPayLoadObj.accumulate("ApproverRemarks", "");
			bpInputPayLoadObj.accumulate("Source", "");
			
			// Fields from SCP Table
			if(scpDataChildObj.get("Address1").isJsonNull())
				bpInputPayLoadObj.accumulate("Address1", "");
			else 
				bpInputPayLoadObj.accumulate("Address1", scpDataChildObj.get("Address1").getAsString());
		
			if(scpDataChildObj.get("Address2").isJsonNull())
				bpInputPayLoadObj.accumulate("Address2", "");
			else
				bpInputPayLoadObj.accumulate("Address2", scpDataChildObj.get("Address2").getAsString());
			
			if(scpDataChildObj.get("Address3").isJsonNull())
				bpInputPayLoadObj.accumulate("Address3", "");
			else 
				bpInputPayLoadObj.accumulate("Address3", scpDataChildObj.get("Address3").getAsString());
			
			if(scpDataChildObj.get("Address4").isJsonNull())
				bpInputPayLoadObj.accumulate("Address4", "");
			else 
				bpInputPayLoadObj.accumulate("Address4", scpDataChildObj.get("Address4").getAsString());
			
			if(scpDataChildObj.get("District").isJsonNull())
				bpInputPayLoadObj.accumulate("District", "");
			else 
				bpInputPayLoadObj.accumulate("District", scpDataChildObj.get("District").getAsString());
			
			if(scpDataChildObj.get("City").isJsonNull())
				bpInputPayLoadObj.accumulate("City", "");
			else
				bpInputPayLoadObj.accumulate("City", scpDataChildObj.get("City").getAsString());
			
			if(scpDataChildObj.get("Region").isJsonNull())
				bpInputPayLoadObj.accumulate("State", "");
			else
				bpInputPayLoadObj.accumulate("State", scpDataChildObj.get("Region").getAsString());
			
			if(scpDataChildObj.get("RegionDesc").isJsonNull())
				bpInputPayLoadObj.accumulate("StateDesc", "");
			else
				bpInputPayLoadObj.accumulate("StateDesc", scpDataChildObj.get("RegionDesc").getAsString());
			
			if(scpDataChildObj.get("CountryID").isJsonNull())
				bpInputPayLoadObj.accumulate("Country", "");
			else
				bpInputPayLoadObj.accumulate("Country", scpDataChildObj.get("CountryID").getAsString());
			
			if(scpDataChildObj.get("CountryDesc").isJsonNull())
				bpInputPayLoadObj.accumulate("CountryDesc", "");
			else
				bpInputPayLoadObj.accumulate("CountryDesc", scpDataChildObj.get("CountryDesc").getAsString());
			
			if(scpDataChildObj.get("Mobile1").isJsonNull())
				bpInputPayLoadObj.accumulate("Mobile1", "");
			else
				bpInputPayLoadObj.accumulate("Mobile1", scpDataChildObj.get("Mobile1").getAsString());

			if(scpDataChildObj.get("EmailID").isJsonNull())
				bpInputPayLoadObj.accumulate("EmailID", "");
			else
				bpInputPayLoadObj.accumulate("EmailID", scpDataChildObj.get("EmailID").getAsString());

			if(scpDataChildObj.get("GSTIN").isJsonNull())
				bpInputPayLoadObj.accumulate("GSTIN", "");
			else
				bpInputPayLoadObj.accumulate("GSTIN", scpDataChildObj.get("GSTIN").getAsString());

			if(scpDataChildObj.get("PAN").isJsonNull())
				bpInputPayLoadObj.accumulate("PAN", "");
			else
				bpInputPayLoadObj.accumulate("PAN", scpDataChildObj.get("PAN").getAsString());

			if(scpDataChildObj.get("PostalCode").isJsonNull())
				bpInputPayLoadObj.accumulate("Pincode", "");
			else
				bpInputPayLoadObj.accumulate("Pincode", scpDataChildObj.get("PostalCode").getAsString());
			
			if(scpDataChildObj.get("Landline").isJsonNull())
				bpInputPayLoadObj.accumulate("LandLine1", "");
			else
				bpInputPayLoadObj.accumulate("LandLine1", scpDataChildObj.get("Landline").getAsString());

			// fields from ERP(BPHeaders)
			if(bpFromERPChildObj.get("CPGuid").isJsonNull())
				bpInputPayLoadObj.accumulate("CPGuid", "");
			else
				bpInputPayLoadObj.accumulate("CPGuid", customerNo);
//				bpInputPayLoadObj.accumulate("CPGuid", bpFromERPChildObj.get("CPGuid").getAsString());

			if(scpDataChildObj.get("Name").isJsonNull())
				bpInputPayLoadObj.accumulate("CPName", "");
			else
				bpInputPayLoadObj.accumulate("CPName", scpDataChildObj.get("Name").getAsString());
//				bpInputPayLoadObj.accumulate("CPName", bpFromERPChildObj.get("CPName").getAsString());

			if(bpFromERPChildObj.get("CPType").isJsonNull())
				bpInputPayLoadObj.accumulate("CPType", "");
			else
				bpInputPayLoadObj.accumulate("CPType", bpFromERPChildObj.get("CPType").getAsString());
			
			if(!bpFromERPChildObj.get("IncorporationDate").isJsonNull() && bpFromERPChildObj.get("IncorporationDate").getAsString().trim().length()>0){
				long dateOfIncorporationMillis=0;
				String incorporationDate = bpFromERPChildObj.get("IncorporationDate").getAsString();
				incorporationDate = removeSuccessiveZeros(incorporationDate.substring(incorporationDate.indexOf("(")+1, incorporationDate.lastIndexOf(")")));
				/*if(incorporationDate.contains("-")){
					incorporationDate = incorporationDate.replace("-", "");
				}*/
				if(incorporationDate.equalsIgnoreCase("")){
					dateOfIncorporationMillis =0;
				}else{
					dateOfIncorporationMillis = Long.parseLong(incorporationDate);
				}
				dateOfIncorporationMillis = formatDateWithoutTime(response, dateOfIncorporationMillis, debug);
				if(debug)
					response.getWriter().println("dateOfIncorporationMillis: "+dateOfIncorporationMillis);
				
				bpInputPayLoadObj.accumulate("IncorporationDate", "/Date("+dateOfIncorporationMillis+")/");
			}
			
			/*if(!bpFromERPChildObj.get("IncorporationDate").isJsonNull() && bpFromERPChildObj.get("IncorporationDate").
					getAsString().trim().length()>0){
				String incorporationDate = bpFromERPChildObj.get("IncorporationDate").getAsString();
				long dateOfIncorporationMillis = convertToMillis(incorporationDate);
				bpInputPayLoadObj.accumulate("IncorporationDate", "/Date("+dateOfIncorporationMillis+")/");
			}*/
			
			if(bpFromERPChildObj.get("LegalStatus").isJsonNull())
				bpInputPayLoadObj.accumulate("LegalStatus", "");
			else
				bpInputPayLoadObj.accumulate("LegalStatus", bpFromERPChildObj.get("LegalStatus").getAsString());
			
			if(bpFromERPChildObj.get("UtilDistrict").isJsonNull())
				bpInputPayLoadObj.accumulate("UtilDistrict", "");
			else
				bpInputPayLoadObj.accumulate("UtilDistrict", bpFromERPChildObj.get("UtilDistrict").getAsString());
	
			if(debug)
				response.getWriter().println("insertBPHeaderData.bpInputPayLoadObj: "+bpInputPayLoadObj);
			bpHeaderObj = executePostURL(executeURL, userPass, response, bpInputPayLoadObj, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("insertBPHeaderData.bpHeaderObj: "+bpHeaderObj);
			if(bpHeaderObj.has("error")){
				bpHeaderObj.addProperty("ErrorCode", "001");
				bpHeaderObj.addProperty("Message", "Insertion Failed");
				return bpHeaderObj;
			}else{
				bpHeaderObj.addProperty("ErrorCode", "");
				bpHeaderObj.addProperty("Message", "Success");
				return bpHeaderObj;
			}
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("insertCloudBPHeaderData.xception in insertBPHeaderData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("insertCloudBPHeaderData.Full Stack Trace: "+buffer.toString());
			}
			bpHeaderObj.addProperty("ErrorCode", "001");
			bpHeaderObj.addProperty("Message", "Insertion Failed");
			return bpHeaderObj;
		}
	}
	
	public JsonObject insertBPHeaderData(String aggregatorID, String userPass, JsonObject scpDataObj, JsonObject bpFromERPObj, 
			JSONObject inputJsonObject, HttpServletRequest request, HttpServletResponse response, boolean debug)throws IOException {

		String createdOn="", createdAt ="",createdBy="",  iD="", oDataUrl="", executeURL="", customerNo="";
		long createdOnInMillis=0;
		JSONObject bpInputPayLoadObj = new JSONObject();
		JsonObject scpDataChildObj = new JsonObject();
		JsonObject bpFromERPChildObj = new JsonObject();
		JsonObject bpHeaderObj = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			executeURL = oDataUrl+"BPHeader";
			iD = generateGUID(36);
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			scpDataChildObj = scpDataObj.get("CustomerMaster").getAsJsonObject();
			bpFromERPChildObj = bpFromERPObj.get("BPData").getAsJsonObject().get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
			
			customerNo = inputJsonObject.getString("CustomerNo");
			String formattedStr = "";
			try{
				int number = Integer.parseInt(customerNo);
				formattedStr = ("0000000000" + customerNo).substring(customerNo.length());
				customerNo = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
			
			if(debug){
				response.getWriter().println("insertBPHeaderData.BPHeader - ID: "+iD);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdBy: "+createdBy);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdAt: "+createdAt);	
				response.getWriter().println("insertBPHeaderData.BPHeader - createdOnInMillis: "+createdOnInMillis);	
				response.getWriter().println("insertBPHeaderData.scpDataObj - childObj: "+scpDataChildObj);			
				response.getWriter().println("insertBPHeaderData.bpFromERPObj - childObj: "+bpFromERPChildObj);
			}
			// generated Fields
			bpInputPayLoadObj.accumulate("ID", iD);
			bpInputPayLoadObj.accumulate("CreatedBy", createdBy);
			bpInputPayLoadObj.accumulate("CreatedAt", createdAt);
			bpInputPayLoadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			
			// extra Fields
			bpInputPayLoadObj.accumulate("StatusID", "000001");
			bpInputPayLoadObj.accumulate("AggregatorID", aggregatorID);
			bpInputPayLoadObj.accumulate("Mobile2", "");
			bpInputPayLoadObj.accumulate("ApproverRemarks", "");
			bpInputPayLoadObj.accumulate("Source", "");
			
			// Fields from SCP Table
			if(scpDataChildObj.get("Address1").isJsonNull())
				bpInputPayLoadObj.accumulate("Address1", "");
			else 
				bpInputPayLoadObj.accumulate("Address1", scpDataChildObj.get("Address1").getAsString());
		
			if(scpDataChildObj.get("Address2").isJsonNull())
				bpInputPayLoadObj.accumulate("Address2", "");
			else
				bpInputPayLoadObj.accumulate("Address2", scpDataChildObj.get("Address2").getAsString());
			
			if(scpDataChildObj.get("Address3").isJsonNull())
				bpInputPayLoadObj.accumulate("Address3", "");
			else 
				bpInputPayLoadObj.accumulate("Address3", scpDataChildObj.get("Address3").getAsString());
			
			if(scpDataChildObj.get("Address4").isJsonNull())
				bpInputPayLoadObj.accumulate("Address4", "");
			else 
				bpInputPayLoadObj.accumulate("Address4", scpDataChildObj.get("Address4").getAsString());
			
			if(scpDataChildObj.get("District").isJsonNull())
				bpInputPayLoadObj.accumulate("District", "");
			else 
				bpInputPayLoadObj.accumulate("District", scpDataChildObj.get("District").getAsString());
			
			if(scpDataChildObj.get("City").isJsonNull())
				bpInputPayLoadObj.accumulate("City", "");
			else
				bpInputPayLoadObj.accumulate("City", scpDataChildObj.get("City").getAsString());
			
			if(scpDataChildObj.get("Region").isJsonNull())
				bpInputPayLoadObj.accumulate("State", "");
			else
				bpInputPayLoadObj.accumulate("State", scpDataChildObj.get("Region").getAsString());
			
			if(scpDataChildObj.get("RegionDesc").isJsonNull())
				bpInputPayLoadObj.accumulate("StateDesc", "");
			else
				bpInputPayLoadObj.accumulate("StateDesc", scpDataChildObj.get("RegionDesc").getAsString());
			
			if(scpDataChildObj.get("CountryID").isJsonNull())
				bpInputPayLoadObj.accumulate("Country", "");
			else
				bpInputPayLoadObj.accumulate("Country", scpDataChildObj.get("CountryID").getAsString());
			
			if(scpDataChildObj.get("CountryDesc").isJsonNull())
				bpInputPayLoadObj.accumulate("CountryDesc", "");
			else
				bpInputPayLoadObj.accumulate("CountryDesc", scpDataChildObj.get("CountryDesc").getAsString());
			
			if(scpDataChildObj.get("Mobile1").isJsonNull())
				bpInputPayLoadObj.accumulate("Mobile1", "");
			else
				bpInputPayLoadObj.accumulate("Mobile1", scpDataChildObj.get("Mobile1").getAsString());

			if(scpDataChildObj.get("EmailID").isJsonNull())
				bpInputPayLoadObj.accumulate("EmailID", "");
			else
				bpInputPayLoadObj.accumulate("EmailID", scpDataChildObj.get("EmailID").getAsString());

			if(scpDataChildObj.get("GSTIN").isJsonNull())
				bpInputPayLoadObj.accumulate("GSTIN", "");
			else
				bpInputPayLoadObj.accumulate("GSTIN", scpDataChildObj.get("GSTIN").getAsString());

			if(scpDataChildObj.get("PAN").isJsonNull())
				bpInputPayLoadObj.accumulate("PAN", "");
			else
				bpInputPayLoadObj.accumulate("PAN", scpDataChildObj.get("PAN").getAsString());

			if(scpDataChildObj.get("PostalCode").isJsonNull())
				bpInputPayLoadObj.accumulate("Pincode", "");
			else
				bpInputPayLoadObj.accumulate("Pincode", scpDataChildObj.get("PostalCode").getAsString());
			
			if(scpDataChildObj.get("Landline").isJsonNull())
				bpInputPayLoadObj.accumulate("LandLine1", "");
			else
				bpInputPayLoadObj.accumulate("LandLine1", scpDataChildObj.get("Landline").getAsString());

			// fields from ERP(BPHeaders)
			if(bpFromERPChildObj.get("CPGuid").isJsonNull())
				bpInputPayLoadObj.accumulate("CPGuid", "");
			else
				bpInputPayLoadObj.accumulate("CPGuid", customerNo);
//				bpInputPayLoadObj.accumulate("CPGuid", bpFromERPChildObj.get("CPGuid").getAsString());

			if(bpFromERPChildObj.get("CPName").isJsonNull())
				bpInputPayLoadObj.accumulate("CPName", "");
			else
				bpInputPayLoadObj.accumulate("CPName", bpFromERPChildObj.get("CPName").getAsString());

			if(bpFromERPChildObj.get("CPType").isJsonNull())
				bpInputPayLoadObj.accumulate("CPType", "");
			else
				bpInputPayLoadObj.accumulate("CPType", bpFromERPChildObj.get("CPType").getAsString());
			
			if(!bpFromERPChildObj.get("IncorporationDate").isJsonNull() && bpFromERPChildObj.get("IncorporationDate").getAsString().trim().length()>0){
				long dateOfIncorporationMillis=0;
				String incorporationDate = bpFromERPChildObj.get("IncorporationDate").getAsString();
				incorporationDate = removeSuccessiveZeros(incorporationDate.substring(incorporationDate.indexOf("(")+1, incorporationDate.lastIndexOf(")")));
				/*if(incorporationDate.contains("-")){
					incorporationDate = incorporationDate.replace("-", "");
				}*/
				if(incorporationDate.equalsIgnoreCase("")){
					dateOfIncorporationMillis =0;
				}else{
					dateOfIncorporationMillis = Long.parseLong(incorporationDate);
				}
				dateOfIncorporationMillis = formatDateWithoutTime(response, dateOfIncorporationMillis, debug);
				if(debug)
					response.getWriter().println("dateOfIncorporationMillis: "+dateOfIncorporationMillis);
				
				bpInputPayLoadObj.accumulate("IncorporationDate", "/Date("+dateOfIncorporationMillis+")/");
			}
			
			/*if(!bpFromERPChildObj.get("IncorporationDate").isJsonNull() && bpFromERPChildObj.get("IncorporationDate").
					getAsString().trim().length()>0){
				String incorporationDate = bpFromERPChildObj.get("IncorporationDate").getAsString();
				long dateOfIncorporationMillis = convertToMillis(incorporationDate);
				bpInputPayLoadObj.accumulate("IncorporationDate", "/Date("+dateOfIncorporationMillis+")/");
			}*/
			
			if(bpFromERPChildObj.get("LegalStatus").isJsonNull())
				bpInputPayLoadObj.accumulate("LegalStatus", "");
			else
				bpInputPayLoadObj.accumulate("LegalStatus", bpFromERPChildObj.get("LegalStatus").getAsString());
			
			if(bpFromERPChildObj.get("UtilDistrict").isJsonNull())
				bpInputPayLoadObj.accumulate("UtilDistrict", "");
			else
				bpInputPayLoadObj.accumulate("UtilDistrict", bpFromERPChildObj.get("UtilDistrict").getAsString());
	
			if(debug)
				response.getWriter().println("insertBPHeaderData.bpInputPayLoadObj: "+bpInputPayLoadObj);
			bpHeaderObj = executePostURL(executeURL, userPass, response, bpInputPayLoadObj, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("insertBPHeaderData.bpHeaderObj: "+bpHeaderObj);
			if(bpHeaderObj.has("error")){
				bpHeaderObj.addProperty("ErrorCode", "001");
				bpHeaderObj.addProperty("Message", "Insertion Failed");
				return bpHeaderObj;
			}else{
				bpHeaderObj.addProperty("ErrorCode", "");
				bpHeaderObj.addProperty("Message", "Success");
				return bpHeaderObj;
			}
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("insertBPHeaderData.xception in insertBPHeaderData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("insertBPHeaderData.Full Stack Trace: "+buffer.toString());
			}
			bpHeaderObj.addProperty("ErrorCode", "001");
			bpHeaderObj.addProperty("Message", "Insertion Failed");
			return bpHeaderObj;
		}
//		return bpHeaderObj;
	}
	
	public String removeSuccessiveZeros( String str ){
		if (str == null){
		return null;}
		char[] chars = str.toCharArray();
		int length =0 ,index=0 ;
		length = str.length();
		index = length -1;
		for (; index >=0;index--)
		{
		if (chars[index] != '0'){
		break;}
		}
		return (index == length-1) ? str :str.substring(0,index+1);
	}
	
	public long formatDateWithoutTime(HttpServletResponse response, long incorpDate, boolean debug) throws IOException{
		long dateOfIncorporationMillis=0;
		try{
			dateOfIncorporationMillis = incorpDate;
			Date incorporateDate = new Date(dateOfIncorporationMillis);
			Calendar calender = Calendar.getInstance();				
			calender.setTime(incorporateDate);
			calender.set(Calendar.HOUR_OF_DAY, 0);
			calender.set(Calendar.MINUTE, 0);
			calender.set(Calendar.SECOND, 0);
			calender.set(Calendar.MILLISECOND, 0);
			incorporateDate = calender.getTime();
			dateOfIncorporationMillis = incorporateDate.getTime();
			/*String incorpDateStr = Long.toString(dateOfIncorporationMillis);
			incorpDateStr = removeSuccessiveZeros(incorpDateStr);
			if(incorpDateStr.contains("-")){
				incorpDateStr = incorpDateStr.replace("-", "");
			}
			dateOfIncorporationMillis = Long.parseLong(incorpDateStr);*/
			/*if(debug)
				response.getWriter().println("formatIncorpDate.dateOfIncorporationMillis: "+dateOfIncorporationMillis);*/
		}catch (Exception e) {
			dateOfIncorporationMillis=0;
		}
		
		return dateOfIncorporationMillis;
	}
	
	public JsonObject insertCloudBPContactPersonData(String userPass, JsonObject bpFromERPChildObj, JsonObject bpHeaderObj, 
			HttpServletRequest request, HttpServletResponse response,boolean debug) throws IOException{
		String createdOn="", createdBy="", createdAt="", iD="", executeURL="", oDataUrl="", errorCode="";
		long createdOnInMillis=0;
		JSONObject bpCNTPInputPayloadObj = new JSONObject();
		JsonObject bpFromERPBPCNTPChildObj = new JsonObject();
		JsonArray bpFromERPBPCNTPArray = new JsonArray();
		JsonObject bpContactPersonChildObj = new JsonObject();
		JsonObject bpContactPersonObj = new JsonObject();
		JsonArray bpContactPersonArray = new JsonArray();
		JsonObject bpHeaderChildObj = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			executeURL = oDataUrl+"BPContactPerson";
			bpHeaderChildObj = bpHeaderObj.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("insertBPContactPersonData.bpHeader-ChildObj:"+bpHeaderChildObj);
			bpFromERPBPCNTPArray = bpFromERPChildObj.get("BPContactPersons").getAsJsonObject().get("results").getAsJsonArray();
			if(! bpFromERPBPCNTPArray.isJsonNull()){
				for(int i=0; i < bpFromERPBPCNTPArray.size(); i++){
					bpFromERPBPCNTPChildObj = bpFromERPChildObj.get("BPContactPersons").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject();
					bpCNTPInputPayloadObj = new JSONObject();
					bpContactPersonChildObj = new JsonObject();
					iD = generateGUID(36);
					createdBy = getUserPrincipal(request, "name", response);
					createdOnInMillis = getCreatedOnDate();
					createdAt = getCreatedAtTime();
					if(debug){
						response.getWriter().println("insertBPContactPersonData.BPCNTP - ID:"+iD);
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdBy:"+createdBy);	
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdAt:"+createdAt);	
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdOnInMillis:"+createdOnInMillis);	
						response.getWriter().println("insertBPContactPersonData.bpFromERPObj - childObj:"+bpFromERPChildObj);	
						response.getWriter().println("insertBPContactPersonData.bpFromERPBPCNTPChildObj:"+bpFromERPBPCNTPChildObj);	
					}		
					// generated fields
					bpCNTPInputPayloadObj.accumulate("ID", iD);
					bpCNTPInputPayloadObj.accumulate("CreatedBy", createdBy);
					bpCNTPInputPayloadObj.accumulate("CreatedAt", createdAt);
					bpCNTPInputPayloadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
					bpCNTPInputPayloadObj.accumulate("StatusID", "");
					
					// fields from BPHeader
					if(bpHeaderChildObj.get("ID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("BPID", "");
					else
						bpCNTPInputPayloadObj.accumulate("BPID", bpHeaderChildObj.get("ID").getAsString());
					
					// fields from ERP(BPContactPersons)
					if(bpFromERPBPCNTPChildObj.get("BPType").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("BPType", "");
					else
						bpCNTPInputPayloadObj.accumulate("BPType", bpFromERPBPCNTPChildObj.get("BPType").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("Name1").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Name1", "");
					else
						bpCNTPInputPayloadObj.accumulate("Name1", bpFromERPBPCNTPChildObj.get("Name1").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("Name2").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Name2", "");
					else
						bpCNTPInputPayloadObj.accumulate("Name2", bpFromERPBPCNTPChildObj.get("Name2").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("DOB").isJsonNull()){
						bpCNTPInputPayloadObj.accumulate("DOB", "");
					}
					else{
						long dateOfBirthMillis=0;
						String dateOfBirth = bpFromERPBPCNTPChildObj.get("DOB").getAsString();
			//			dateOfBirth = removeSuccessiveZeros(dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")")));
						dateOfBirth = dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")"));
						/*if(dateOfBirth.contains("-")){
							dateOfBirth = dateOfBirth.replace("-", "");
						}*/
						if(dateOfBirth.equalsIgnoreCase("")){
							dateOfBirthMillis =0;
						}else{
							dateOfBirthMillis = Long.parseLong(dateOfBirth);
						}
						dateOfBirthMillis = formatDateWithoutTime(response, dateOfBirthMillis, debug);
						if(debug)
							response.getWriter().println("dateOfBirthMillis: "+dateOfBirthMillis);
						
						bpCNTPInputPayloadObj.accumulate("DOB", "/Date("+dateOfBirthMillis+")/");
					}
					/*if(bpFromERPBPCNTPChildObj.get("DOB").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("DOB", "");
					else
						bpCNTPInputPayloadObj.accumulate("DOB", bpFromERPBPCNTPChildObj.get("DOB").getAsString());*/
					
					if(bpFromERPBPCNTPChildObj.get("Mobile").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Mobile", "");
					else
						bpCNTPInputPayloadObj.accumulate("Mobile", bpFromERPBPCNTPChildObj.get("Mobile").getAsString());
							
					if(bpFromERPBPCNTPChildObj.get("EmailID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("EmailID", "");
					else
						bpCNTPInputPayloadObj.accumulate("EmailID", bpFromERPBPCNTPChildObj.get("EmailID").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("PanNo").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("PAN", "");
					else
						bpCNTPInputPayloadObj.accumulate("PAN", bpFromERPBPCNTPChildObj.get("PanNo").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("GenderID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("GenderID", "");
					else
						bpCNTPInputPayloadObj.accumulate("GenderID", bpFromERPBPCNTPChildObj.get("GenderID").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("SigningOrder").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("SigningOrder", "");
					else
						bpCNTPInputPayloadObj.accumulate("SigningOrder", bpFromERPBPCNTPChildObj.get("SigningOrder").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("PostalCode").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("PostalCode", "");
					else
						bpCNTPInputPayloadObj.accumulate("PostalCode", bpFromERPBPCNTPChildObj.get("PostalCode").getAsString());
					
					if(debug)
						response.getWriter().println("insertBPContactPersonData.bpCNTPInputPayloadObj: "+bpCNTPInputPayloadObj);
					bpContactPersonChildObj = executePostURL(executeURL, userPass, response, bpCNTPInputPayloadObj, request, debug, "PYGWHANA");
					if(debug)
						response.getWriter().println("insertBPContactPersonData.bpContactPersonChildObj: "+bpContactPersonChildObj);
					
					if(bpContactPersonChildObj.has("error")){
						errorCode = "001";
//						bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
						bpContactPersonObj.addProperty("ErrorCode", errorCode);
						bpContactPersonObj.addProperty("Message", "Insertion Failed");
						break;
					}
				}
			}
			
			if(errorCode.equalsIgnoreCase("")){
				bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
				bpContactPersonObj.addProperty("ErrorCode", errorCode);
				bpContactPersonObj.addProperty("Message", "Success");
			}
			return bpContactPersonObj;
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("Exception in insertCloudBPContactPersonData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
			bpContactPersonObj.addProperty("ErrorCode", "001");
			bpContactPersonObj.addProperty("Message", "Insertion Failed");
			return bpContactPersonObj;
		}
	}
	
	public JsonObject insertBPContactPersonData(String userPass, JsonObject bpFromERPChildObj, JsonObject bpHeaderObj, 
			HttpServletRequest request, HttpServletResponse response,JSONObject inputJsonObject,boolean debug) throws IOException{
		String createdOn="", createdBy="", createdAt="", iD="", executeURL="", oDataUrl="", errorCode="";
		long createdOnInMillis=0;
		JSONObject bpCNTPInputPayloadObj = new JSONObject();
		JsonObject bpFromERPBPCNTPChildObj = new JsonObject();
		JsonArray bpFromERPBPCNTPArray = new JsonArray();
		JsonObject bpContactPersonChildObj = new JsonObject();
		JsonObject bpContactPersonObj = new JsonObject();
		JsonArray bpContactPersonArray = new JsonArray();
		JsonObject bpHeaderChildObj = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			executeURL = oDataUrl+"BPContactPerson";
			bpHeaderChildObj = bpHeaderObj.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("insertBPContactPersonData.bpHeader-ChildObj:"+bpHeaderChildObj);
			bpFromERPBPCNTPArray = bpFromERPChildObj.get("BPContactPersons").getAsJsonObject().get("results").getAsJsonArray();
			JSONArray jsonArray=null;
			try{
				if(inputJsonObject.has("ContactPerson")){
					jsonArray = inputJsonObject.getJSONArray("ContactPerson");
				}
				}catch(Exception ex){
					jsonArray=null;
					
				}
			if(! bpFromERPBPCNTPArray.isJsonNull()){
				for(int i=0; i < bpFromERPBPCNTPArray.size(); i++){
					bpFromERPBPCNTPChildObj = bpFromERPChildObj.get("BPContactPersons").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject();
					bpCNTPInputPayloadObj = new JSONObject();
					bpContactPersonChildObj = new JsonObject();
					iD = generateGUID(36);
					createdBy = getUserPrincipal(request, "name", response);
					createdOnInMillis = getCreatedOnDate();
					createdAt = getCreatedAtTime();
					if(debug){
						response.getWriter().println("insertBPContactPersonData.BPCNTP - ID:"+iD);
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdBy:"+createdBy);	
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdAt:"+createdAt);	
						response.getWriter().println("insertBPContactPersonData.BPCNTP - createdOnInMillis:"+createdOnInMillis);	
						response.getWriter().println("insertBPContactPersonData.bpFromERPObj - childObj:"+bpFromERPChildObj);	
						response.getWriter().println("insertBPContactPersonData.bpFromERPBPCNTPChildObj:"+bpFromERPBPCNTPChildObj);	
					}		
					// generated fields
					bpCNTPInputPayloadObj.accumulate("ID", iD);
					bpCNTPInputPayloadObj.accumulate("CreatedBy", createdBy);
					bpCNTPInputPayloadObj.accumulate("CreatedAt", createdAt);
					bpCNTPInputPayloadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
					bpCNTPInputPayloadObj.accumulate("StatusID", "");
					
					if (jsonArray != null && jsonArray.length() > 0) {
						for (int j = 0; j < jsonArray.length(); j++) {
							JSONObject jsonObject = jsonArray.getJSONObject(j);
							if (jsonObject.has("PAN_NO") && bpFromERPBPCNTPChildObj.has("PanNo")) {
								if (jsonObject.getString("PAN_NO")
										.equalsIgnoreCase(bpFromERPBPCNTPChildObj.get("PanNo").getAsString())) {
									if (jsonObject.has("DESIGNATION") && !jsonObject.isNull("DESIGNATION")) {
										bpCNTPInputPayloadObj.accumulate("Designation", jsonObject.get("DESIGNATION"));
									}
									if (jsonObject.has("UNIQUE_IDENTIFIER1")
											&& !jsonObject.isNull("UNIQUE_IDENTIFIER1")) {
										bpCNTPInputPayloadObj.accumulate("UniqueIdentifier1",
												jsonObject.get("UNIQUE_IDENTIFIER1"));
									}
									if (jsonObject.has("AUTHORIZED_SIGNATORY")
											&& !jsonObject.isNull("AUTHORIZED_SIGNATORY")) {
										bpCNTPInputPayloadObj.accumulate("AuthorizedSignatory",
												jsonObject.get("AUTHORIZED_SIGNATORY"));
									}

								}
							}
						}
					}
					// fields from BPHeader
					if(bpHeaderChildObj.get("ID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("BPID", "");
					else
						bpCNTPInputPayloadObj.accumulate("BPID", bpHeaderChildObj.get("ID").getAsString());
					
					// fields from ERP(BPContactPersons)
					if(bpFromERPBPCNTPChildObj.get("BPType").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("BPType", "");
					else
						bpCNTPInputPayloadObj.accumulate("BPType", bpFromERPBPCNTPChildObj.get("BPType").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("Name1").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Name1", "");
					else
						bpCNTPInputPayloadObj.accumulate("Name1", bpFromERPBPCNTPChildObj.get("Name1").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("Name2").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Name2", "");
					else
						bpCNTPInputPayloadObj.accumulate("Name2", bpFromERPBPCNTPChildObj.get("Name2").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("DOB").isJsonNull()){
						bpCNTPInputPayloadObj.accumulate("DOB", "");
					}
					else{
						long dateOfBirthMillis=0;
						String dateOfBirth = bpFromERPBPCNTPChildObj.get("DOB").getAsString();
			//			dateOfBirth = removeSuccessiveZeros(dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")")));
						dateOfBirth = dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")"));
						/*if(dateOfBirth.contains("-")){
							dateOfBirth = dateOfBirth.replace("-", "");
						}*/
						if(dateOfBirth.equalsIgnoreCase("")){
							dateOfBirthMillis =0;
						}else{
							dateOfBirthMillis = Long.parseLong(dateOfBirth);
						}
						dateOfBirthMillis = formatDateWithoutTime(response, dateOfBirthMillis, debug);
						if(debug)
							response.getWriter().println("dateOfBirthMillis: "+dateOfBirthMillis);
						
						bpCNTPInputPayloadObj.accumulate("DOB", "/Date("+dateOfBirthMillis+")/");
					}
					/*if(bpFromERPBPCNTPChildObj.get("DOB").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("DOB", "");
					else
						bpCNTPInputPayloadObj.accumulate("DOB", bpFromERPBPCNTPChildObj.get("DOB").getAsString());*/
					
					if(bpFromERPBPCNTPChildObj.get("Mobile").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("Mobile", "");
					else
						bpCNTPInputPayloadObj.accumulate("Mobile", bpFromERPBPCNTPChildObj.get("Mobile").getAsString());
							
					if(bpFromERPBPCNTPChildObj.get("EmailID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("EmailID", "");
					else
						bpCNTPInputPayloadObj.accumulate("EmailID", bpFromERPBPCNTPChildObj.get("EmailID").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("PanNo").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("PAN", "");
					else
						bpCNTPInputPayloadObj.accumulate("PAN", bpFromERPBPCNTPChildObj.get("PanNo").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("GenderID").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("GenderID", "");
					else
						bpCNTPInputPayloadObj.accumulate("GenderID", bpFromERPBPCNTPChildObj.get("GenderID").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("SigningOrder").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("SigningOrder", "");
					else
						bpCNTPInputPayloadObj.accumulate("SigningOrder", bpFromERPBPCNTPChildObj.get("SigningOrder").getAsString());
					
					if(bpFromERPBPCNTPChildObj.get("PostalCode").isJsonNull())
						bpCNTPInputPayloadObj.accumulate("PostalCode", "");
					else
						bpCNTPInputPayloadObj.accumulate("PostalCode", bpFromERPBPCNTPChildObj.get("PostalCode").getAsString());
					
					if(debug)
						response.getWriter().println("insertBPContactPersonData.bpCNTPInputPayloadObj: "+bpCNTPInputPayloadObj);
					bpContactPersonChildObj = executePostURL(executeURL, userPass, response, bpCNTPInputPayloadObj, request, debug, "PYGWHANA");
					if(debug)
						response.getWriter().println("insertBPContactPersonData.bpContactPersonChildObj: "+bpContactPersonChildObj);
					
					if(bpContactPersonChildObj.has("error")){
						errorCode = "001";
//						bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
						bpContactPersonObj.addProperty("ErrorCode", errorCode);
						bpContactPersonObj.addProperty("Message", "Insertion Failed");
						break;
					}
				}
			}
			
			if(errorCode.equalsIgnoreCase("")){
				bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
				bpContactPersonObj.addProperty("ErrorCode", errorCode);
				bpContactPersonObj.addProperty("Message", "Success");
			}
			return bpContactPersonObj;
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("Exception in insertBPContactPersonData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			bpContactPersonObj.add("BPCNTPData", bpContactPersonChildObj);
			bpContactPersonObj.addProperty("ErrorCode", "001");
			bpContactPersonObj.addProperty("Message", "Insertion Failed");
			return bpContactPersonObj;
		}
//		return bpContactPersonObj;
	}
	
	public AuthenticationHeader getPrincipalPropagationAuthHdr(HttpServletResponse response, boolean debug){
		AuthenticationHeader principalPropagationHeader = null;
		try {
			Context ctxAuthHdr = new InitialContext();
			AuthenticationHeaderProvider authHeaderProvider = (AuthenticationHeaderProvider) ctxAuthHdr.lookup("java:comp/env/myAuthHeaderProvider");
			principalPropagationHeader = authHeaderProvider.getPrincipalPropagationHeader();
		} catch (NamingException e) {
			return null;
		}
		return principalPropagationHeader;
	}
	
	public JsonObject getSCFByCP(HttpServletRequest request, HttpServletResponse response, String queryString, String aggregatorID, String oDataURL, Properties properties, boolean debug) throws IOException
	{
		String executeURL = "", userPass="", userName="", password="", statusID="", accountNo="";
		JsonObject scfJsonResult = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			statusID = "000002";
			
			if(debug){
				response.getWriter().println("getSCFByCP.userName: "+userName);
				response.getWriter().println("getSCFByCP.password: "+password);
				response.getWriter().println("getSCFByCP.userPass: "+userPass);
				response.getWriter().println("getSCFByCP.statusID: "+statusID);
			}
			executeURL = oDataURL+"SupplyChainFinances?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20StatusID%20eq%20%27"+statusID+"%27%20and%20"+queryString+"";
			if(debug)
				response.getWriter().println("getSCFByCP-executeURL: "+executeURL);
			scfJsonResult = executeURL(executeURL, userPass, response);
			if(debug)
			response.getWriter().println("getSCFByCP-httpJsonResult: "+scfJsonResult);
			
			JsonObject results = scfJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getSCFByCP-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug){
				response.getWriter().println("getSCFByCP-dresults: "+dresults);
				response.getWriter().println("getSCFByCP-dresults.Size(): "+dresults.size());
			}
			if (dresults.size() == 1) {
				JsonObject childSCFEntry = dresults.get(0).getAsJsonObject();
				if (! childSCFEntry.get("AccountNo").isJsonNull() && childSCFEntry.get("AccountNo").getAsString().trim().length() > 0) {
					
					accountNo = childSCFEntry.get("AccountNo").getAsString();
					scfJsonResult.addProperty("ErrorCode", "");
					scfJsonResult.addProperty("ErrorMessage", "");
					if (debug)
						response.getWriter().println("getSCFByCP.accountNo: "+ accountNo);
				}else {
					scfJsonResult.addProperty("ErrorCode", "068");
					scfJsonResult.addProperty("ErrorMessage", properties.getProperty("068"));
				}
			}
		}catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getSCFByCP-Full stack Trace: "+ buffer.toString());
			}
			scfJsonResult.addProperty("ErrorCode", "001");
			scfJsonResult.addProperty("ErrorMessage", e.getLocalizedMessage());
		}
		return scfJsonResult;
	}
	
	public JsonObject buildSCFDealerOutstandingResponse(HttpServletRequest request, HttpServletResponse response, String loginID, JsonObject scfByCPJson, JsonObject scfDealerWSJson, Properties properties, boolean debug) throws IOException
	{
		String appendMetadata="", guid="", datePattern="";
		JsonObject scfDealerResponse = new JsonObject();
		JsonObject buildDealerTxnObj = new JsonObject();
		JsonArray buildTxnArray = new JsonArray();
		JsonArray scfDealerWSArray = new JsonArray();
		
		JsonObject inputObj  =  new JsonObject();
		Gson gson = new Gson();
		try {
			
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			sdf.setTimeZone(TimeZone.getTimeZone("Asia/Calcutta"));
			if (debug)
				response.getWriter().println("buildSCFDealerOutstandingResponse.scfDealerWSJson: "+scfDealerWSJson);
			
			scfDealerWSArray = scfDealerWSJson.get("results").getAsJsonArray();
			if (debug)
				response.getWriter().println("buildSCFDealerOutstandingResponse.scfDealerWSArray: "+scfDealerWSArray);

			JsonObject buildTxnItemsResponse = null;
			JsonObject childSCFDealer = null;
			long millisDate = 0;
			Date d1 = new Date();
			if(debug)
				response.getWriter().println("buildSCFDealerOutstandingResponse.d1: "+ d1.toString());
			
			for (int i = 0; i < scfDealerWSArray.size(); i++) {
			
				guid =""; appendMetadata=""; datePattern ="";
				guid = generateGUID(36);
				buildTxnItemsResponse = new JsonObject();
				childSCFDealer = scfDealerWSArray.get(i).getAsJsonObject();
				
				//Response When txnId.length > 0 
				if ( ! childSCFDealer.get("TxnCategoryDescription").getAsString().equalsIgnoreCase("Totals") && 
						 ! childSCFDealer.get("TxnCategoryDescription").getAsString().equalsIgnoreCase("") ) {
					
					appendMetadata = "{\"id\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PYGW/SupplyChainFinanceTxns(SCFTXNGUID=guid'"+guid+"',SCFGUID=guid'"+scfByCPJson.get("ID").getAsString()+"')\","
							+ "\"uri\": \"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PYGW/SupplyChainFinanceTxns(SCFTXNGUID=guid'"+guid+"',SCFGUID=guid'"+scfByCPJson.get("ID").getAsString()+"')\","
							+ "\"type\": \"ARTEC.PYGW.SupplyChainFinanceTxn\"}";
					
					inputObj  = gson.fromJson(appendMetadata, JsonObject.class);
					buildTxnItemsResponse.add("__metadata", inputObj);
					
					try {
						millisDate=0;
						Date date  = sdf.parse(scfDealerWSJson.get("AsOnDate").getAsString());
						millisDate = date.getTime();
//						datePattern = "\\/Date("+millisDate+")\\/";
						datePattern = "/Date("+millisDate+")/";
						buildTxnItemsResponse.addProperty("AsOnDate", datePattern.toString());
						
//					if(debug)
//						response.getWriter().println("buildSCFDealerOutstandingResponse.AsOnDate: "+ date.toString());
					} catch (ParseException e) {
						buildTxnItemsResponse.add("AsOnDate",  null);
					}
					try {
						millisDate=0;datePattern="";
						Date date  = sdf.parse(childSCFDealer.get("TransactionDate").getAsString());
						millisDate = date.getTime();
//						datePattern = "\\/Date("+millisDate+")\\/";
						datePattern = "/Date("+millisDate+")/";
						buildTxnItemsResponse.addProperty("TransactionDate", datePattern);
					} catch (ParseException e) {
						buildTxnItemsResponse.add("TransactionDate", null);
					}
					try {
						millisDate=0; datePattern ="";
						Date date  = sdf.parse(childSCFDealer.get("DueDate").getAsString());
						millisDate = date.getTime();
//						datePattern = "\\/Date("+millisDate+")\\/";
						datePattern = "/Date("+millisDate+")/";
						buildTxnItemsResponse.addProperty("DueDate", datePattern); 
					} catch (ParseException e) {
						buildTxnItemsResponse.add("DueDate", null);
					}
					
					buildTxnItemsResponse.addProperty("SCFTXNGUID", guid);
					
					if (! scfByCPJson.get("ID").isJsonNull() &&  scfByCPJson.get("ID").getAsString().trim().length() > 0 )
						buildTxnItemsResponse.addProperty("SCFGUID", scfByCPJson.get("ID").getAsString());
					else
						buildTxnItemsResponse.addProperty("SCFGUID", "");
					
					if (! scfByCPJson.get("CPGUID").isJsonNull() &&  scfByCPJson.get("CPGUID").getAsString().trim().length() > 0 )
						buildTxnItemsResponse.addProperty("CPGUID", scfByCPJson.get("CPGUID").getAsString());
					else
						buildTxnItemsResponse.addProperty("CPGUID", "");
					
					if (! scfByCPJson.get("CPTypeID").isJsonNull() &&  scfByCPJson.get("CPTypeID").getAsString().trim().length() > 0 )
						buildTxnItemsResponse.addProperty("CPTypeID", scfByCPJson.get("CPTypeID").getAsString());
					else
						buildTxnItemsResponse.addProperty("CPTypeID", "");
					
					if (! scfByCPJson.get("Currency").isJsonNull() &&  scfByCPJson.get("Currency").getAsString().trim().length() > 0 )
						buildTxnItemsResponse.addProperty("Currency", scfByCPJson.get("Currency").getAsString());
					else
						buildTxnItemsResponse.addProperty("Currency", "");
					
					buildTxnItemsResponse.addProperty("CPTypeDesc", "");
					buildTxnItemsResponse.addProperty("LoginID", loginID);
					
					buildTxnItemsResponse.addProperty("SanctionLimit", scfDealerWSJson.get("SanctionLimit").getAsString());
					buildTxnItemsResponse.addProperty("TenorInDays", scfDealerWSJson.get("TenorInDays").getAsString());
					buildTxnItemsResponse.addProperty("PeakLimit", scfDealerWSJson.get("PeakLimit").getAsString());
					buildTxnItemsResponse.addProperty("PeakLimitTenorInDays", scfDealerWSJson.get("PeakLimitTenorInDays").getAsString());
					buildTxnItemsResponse.addProperty("OverDueBeyondCure", scfDealerWSJson.get("OverdueBeyondCure").getAsString());
					
					buildTxnItemsResponse.addProperty("Category", childSCFDealer.get("TxnCategoryId").getAsString());
					buildTxnItemsResponse.addProperty("CategoryDesc", childSCFDealer.get("TxnCategoryDescription").getAsString());
					buildTxnItemsResponse.addProperty("TransactionID", childSCFDealer.get("TransactionId").getAsString());
					buildTxnItemsResponse.addProperty("TransactionAmt", childSCFDealer.get("TransactionAmount").getAsString());
					buildTxnItemsResponse.addProperty("OutstandingAmt", childSCFDealer.get("OutstandingAmount").getAsString());
					buildTxnItemsResponse.addProperty("OverDueWithinCureAmt", childSCFDealer.get("OverdueWithinCureAmount").getAsString());
					buildTxnItemsResponse.addProperty("OverDueWithinCureDays", childSCFDealer.get("OverdueWithinCureDays").getAsString());
					buildTxnItemsResponse.addProperty("OverDueBeyondCureAmt", childSCFDealer.get("OverdueBeyondCureAmount").getAsString());
					buildTxnItemsResponse.addProperty("OverDueBeyondCureDays", childSCFDealer.get("OverdueBeyondCureDays").getAsString());
					buildTxnItemsResponse.addProperty("Status", scfDealerWSJson.get("Status").getAsString());
					buildTxnItemsResponse.addProperty("ResponseCode", scfDealerWSJson.get("ResponseCode").getAsString());
					buildTxnItemsResponse.addProperty("Message", scfDealerWSJson.get("Message").getAsString());
					
//					if (debug) 
//						response.getWriter().println("buildSCFDealerOutstandingResponse.buildTxnItemsResponse: "+buildTxnItemsResponse);
					
					buildTxnArray.add(buildTxnItemsResponse);
				}
			}
			buildDealerTxnObj.add("results", buildTxnArray);
			scfDealerResponse.add("d", buildDealerTxnObj);
		
			if (debug) {
				response.getWriter().println("buildSCFDealerOutstandingResponse.buildTxnArray: "+buildTxnArray);
				response.getWriter().println("buildSCFDealerOutstandingResponse.scfDealerResponse: "+scfDealerResponse);
			}
			scfDealerResponse.addProperty("Error", "");
			scfDealerResponse.addProperty("ErrorMessage", "");
			
		} catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getSCFByCP-Full stack Trace: "+ buffer.toString());
			}
			scfDealerResponse.addProperty("Error", "001");
			scfDealerResponse.addProperty("ErrorMessage", properties.getProperty("001"));
		}
		return scfDealerResponse;
	}
	public JsonObject buildAccountBalanceResponse(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String loginID, Map<String, String> userResgistrationMap, JsonObject userAccountJson ,boolean debug ) throws IOException
	{

		String executeURL = "",  statusID="", accountNo="",corpId="", userId="",userRegId="",appendMetaData="";
		Map<String, String> accnBalanceWSResponse = new HashMap<String, String>();
		boolean isVaildAccnNo = true;
 		AccountBalanceClient accnBalanceClient = new AccountBalanceClient();
 		JsonObject accountBalResponseObj = new JsonObject();
 		JsonObject accnBalanceResponseToUI = new JsonObject();
		try {

			int userAccnSize = getResultsSize(response, userAccountJson, debug);
			if(debug)
				response.getWriter().println("buildAccountBalanceResponse.userAccnSize: "+userAccnSize);
			
			JsonObject userChilObjJson = new JsonObject();
			JsonArray appendAccnBalanceArray = new JsonArray();
			JsonObject appenAccnBalanceItems = new JsonObject();
			Gson gson = new Gson();
			JsonObject inputObj  = null;

			corpId = userResgistrationMap.get("CorpId");
			userId = userResgistrationMap.get("UserId");
			userRegId = userResgistrationMap.get("UserRegId");
			
			if (debug) {
				response.getWriter().println("buildAccountBalanceResponse.corpId: "+corpId);
				response.getWriter().println("buildAccountBalanceResponse.userId: "+userId);
				response.getWriter().println("buildAccountBalanceResponse.userRegId: "+userRegId);
			}
			
			for (int i = 0; i < userAccnSize; i++) {
				
				accountNo ="";
				accountBalResponseObj = new JsonObject();
				userChilObjJson = userAccountJson.getAsJsonObject("d").getAsJsonArray("results").get(i).getAsJsonObject();
				accountNo = userChilObjJson.get("BankAccntNo").getAsString();
				if (debug)
					response.getWriter().println("buildAccountBalanceResponse.accountNo: "+accountNo);
				
				accnBalanceWSResponse = accnBalanceClient.callAccountBalance(accountNo, aggregatorID, corpId, userId, userRegId, debug);
				if (debug)
					response.getWriter().println("accnBalanceWSResponse.Status: "+accnBalanceWSResponse.get("Status"));
				
				if (accnBalanceWSResponse.get("Status").equalsIgnoreCase("000001")) {
					
					appendMetaData = "{\"id\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/AccountBalances('"+accountNo+"')\","
							+ "\"uri\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/AccountBalances('"+accountNo+"')\","
							+ "\"type\":\"ARTEC.PYGW.AccountBalance\"}";
					inputObj = gson.fromJson(appendMetaData, JsonObject.class);
					
					accountBalResponseObj.add("_metadata", inputObj);
					accountBalResponseObj.addProperty("AccountNo", accountNo);
					accountBalResponseObj.addProperty("Status", accnBalanceWSResponse.get("Status"));
					accountBalResponseObj.addProperty("AsOn", accnBalanceWSResponse.get("AsOn"));
					accountBalResponseObj.addProperty("Amount", accnBalanceWSResponse.get("Amount"));
					accountBalResponseObj.addProperty("Currency", accnBalanceWSResponse.get("Currency"));
					accountBalResponseObj.addProperty("ErrorCode", accnBalanceWSResponse.get("ErrorCode"));
					accountBalResponseObj.addProperty("Message", accnBalanceWSResponse.get("Message"));
					accountBalResponseObj.addProperty("LoginId", loginID);
					
					appendAccnBalanceArray.add(accountBalResponseObj);
				}else
				{
					if (accnBalanceWSResponse.get("Status").equalsIgnoreCase("000002")) {
						accnBalanceResponseToUI.addProperty("Error", accnBalanceWSResponse.get("ErrorCode"));
						accnBalanceResponseToUI.addProperty("ErrorMessage", accnBalanceWSResponse.get("Message"));
					}else
					{
						accnBalanceResponseToUI.addProperty("Error", accnBalanceWSResponse.get("ErrorCode"));
						accnBalanceResponseToUI.addProperty("ErrorMessage", "Unknown Status- "+accnBalanceWSResponse.get("Message"));
					}
					isVaildAccnNo = false;
					break;
				}
			}
			if (isVaildAccnNo) {
				appenAccnBalanceItems.add("results", appendAccnBalanceArray);
				accnBalanceResponseToUI.add("d", appenAccnBalanceItems);
				if (debug)
					response.getWriter().println("buildAccountBalanceResponse.accnBalanceResponseToUI: "+accnBalanceResponseToUI);
				
				accnBalanceResponseToUI.addProperty("Error", "");
				accnBalanceResponseToUI.addProperty("ErrorMessage", "");
			}
		} catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("getSCFByCP-Full stack Trace: "+ buffer.toString());
			}
			accnBalanceResponseToUI.addProperty("Error", "001");
			accnBalanceResponseToUI.addProperty("ErrorMessage", e.getLocalizedMessage());
		}
		return accnBalanceResponseToUI;
	}
	
	public JsonObject postTransactionValidation(HttpServletRequest request, HttpServletResponse response,  Properties properties , JSONObject inputPayload, String aggregatorID, String loginID, String oDataURL, boolean debug) throws IOException
	{
		String appendUrl="", message="", errorCode="",payloadRequest="",pygwODataURL="";	
		String oDataUserName="",oDatapassword="",userPass="",executeURL="",errorResFormatForPGPayments="";
		JsonObject postTxnResponse = new JsonObject();
		boolean isTransactionFailed = false;
		
		errorResFormatForPGPayments= "{\"error\":{\"code\":\"/ARTEC/PC/ERROR_CODE\",\"message\":{\"lang\":\"en\","
				+ "\"value\":\"ERROR_MESSAGE\"},\"innererror\":{\"application\":{\"component_id\":\"\","
				+ "\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PYGW\",\"service_version\":\"0001\"},"
				+ "\"transactionid\":\"7A3B29EA9B65F18A86C6D067E5F9AB12\",\"timestamp\":\"20191228063013.7170000\","
				+ "\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\","
				+ "\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\","
				+ "\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"},"
				+ "\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\",\"message\":\"ERROR_MESSAGE\",\"propertyref\":\"\",\"severity\":\"error\","
				+ "\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\",\"message\":\"An application exception has"
				+ " occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
		try{
			JsonObject pymntHederJson = new JsonObject();
			JsonObject pymntHeaderChildObj = new JsonObject();
			JsonObject configTypeSetValues = new JsonObject();
			 
			oDataUserName = getODataDestinationProperties("User", "PCGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			pygwODataURL = getODataDestinationProperties("URL", "PYGWHANA");
			if (debug) {
				response.getWriter().println("postTransactionValidation.loginID: "+loginID);
				response.getWriter().println("postTransactionValidation.oDataUserName: "+oDataUserName);
				response.getWriter().println("postTransactionValidation.oDatapassword: "+oDatapassword);
				response.getWriter().println("postTransactionValidation.userPass: "+userPass);
				response.getWriter().println("postTransactionValidation.pygwODataURL: "+pygwODataURL);
			}
			//Step 1
			//filter PG_H
			executeURL ="";
			executeURL = oDataURL+"PGPayments?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PGPaymentGUID%20eq%20%27"+inputPayload.getString("PGPaymentGUID")+"%27";
			if(debug)
				response.getWriter().println("postTransactionValidation.executeURL2: "+executeURL);
			 
			pymntHederJson = executeURL(executeURL, userPass, response);
			if(debug)
				 response.getWriter().println("postTransactionValidation.pymntHederJson: "+pymntHederJson);
			 
			if(pymntHederJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0) 
			{
				String configHdrGuid="", trackIDHeader="";
				pymntHeaderChildObj = pymntHederJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject();
				configHdrGuid = pymntHeaderChildObj.get("ConfigHeaderGUID").getAsString();
				trackIDHeader = pymntHeaderChildObj.get("TrackID").getAsString();
				//filter PG_I
				executeURL ="";
				JsonObject pymntItemJson = new JsonObject();
				executeURL = oDataURL+"PGPaymentItemDetails?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PGPaymentGUID%20eq%20%27"+inputPayload.getString("PGPaymentGUID")+"%27";
				if(debug)
					response.getWriter().println("postTransactionValidation.executeURL3: "+executeURL);
				 
				pymntItemJson = executeURL(executeURL, userPass, response);
				if(debug)
					response.getWriter().println("postTransactionValidation.pymntItemJson: "+pymntItemJson);
				
				if ( pymntItemJson.getAsJsonObject("d").getAsJsonArray("results").size()  > 0) 
				{
					JsonObject pgCatChildResponse = new JsonObject();
					String  processSeq="", trackIDPrefix="", bankTxnType="", corpID="", userID="", userRegId="", OTPInput ="", debitAccntNoHeader="" , ClearingDocCompanyCodeID ="" ;

					if(! pymntHeaderChildObj.get("CPAccountno").isJsonNull())
						debitAccntNoHeader = pymntHeaderChildObj.get("CPAccountno").getAsString();
					
					if(debug)
						 response.getWriter().println("postTransactionValidation.debitAccntNoHeader: "+debitAccntNoHeader);
					
					//Validate PgCat
					pgCatChildResponse = validatePGCategoryConfigs(request, response,properties, aggregatorID, oDataURL, configHdrGuid, debitAccntNoHeader, debug);
					if(debug)
						response.getWriter().println("postTransactionValidation.pgCatChildResponse: "+pgCatChildResponse);
					
					if(pgCatChildResponse.get("ErrorMessage").getAsString().equalsIgnoreCase("") && pgCatChildResponse.get("ErrorCode").getAsString().equalsIgnoreCase("") )
					{
						executeURL = "";
						String corpAccnNo ="", corpAccnName = "", payeeName ="", creditAccNo="", ifscCode="", pgCatId="";
						Map<String, String> userRegResponseMap = new HashMap<String, String>();
						JsonObject dccnfgCorpDetailsJson = new JsonObject();
						JsonObject userAccnJson = new JsonObject();

						pgCatId = pgCatChildResponse.get("PGCategoryID").getAsString();
						if(debug)
							response.getWriter().println("postTransactionValidation.pgCatId: "+pgCatId);

						bankTxnType = pgCatChildResponse.get("BankPaymentTransactionType").getAsString();
						if(debug)
							response.getWriter().println("postTransactionValidation.bankTxnType: "+bankTxnType);

						processSeq = pgCatChildResponse.get("PaymProcessingSequence").getAsString();
						if(debug)
							response.getWriter().println("postTransactionValidation.processSeq: "+processSeq);

						//Bank And ERP
						//Filtering DCCNFG for corporate Bank Details. 
						dccnfgCorpDetailsJson = getDCCNFGEntries(response, request, pygwODataURL, aggregatorID, debug);

//						if ( dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0) {
						executeURL = "";
						if ( ! dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_ACCNTNO").isJsonNull())
							corpAccnNo = dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_ACCNTNO").getAsString();

						if( ! dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_ACCNTNM").isJsonNull())
							corpAccnName = dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_ACCNTNM").getAsString();

						if( ! dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_KEY").isJsonNull())
							ifscCode = dccnfgCorpDetailsJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OWN_BANK_KEY").getAsString();//OWN_BANK_KEY

						if(debug){
							response.getWriter().println("postTransactionValidation.dccnfg.corpAccnNo: "+corpAccnNo);
							response.getWriter().println("postTransactionValidation.dccnfg.corpAccnName: "+corpAccnName);
							response.getWriter().println("postTransactionValidation.dccnfg.ifscCode: "+ifscCode);
						}
						
						userRegResponseMap = getUserRegDetails(request, response, loginID, aggregatorID, pygwODataURL, debug);
						if(debug)
							response.getWriter().println("AccountBalances.userResgistrationMap: "+userRegResponseMap);
						 
						if(userRegResponseMap.get("Error").equalsIgnoreCase("") && userRegResponseMap.get("UserRegStatus").equalsIgnoreCase("000002")) {
							userAccnJson = getUserAccountsInJson(request, response, loginID, pygwODataURL, aggregatorID, debitAccntNoHeader, properties, debug);
							if(debug)
								response.getWriter().println("postTransactionValidation.userAccnJson: "+userAccnJson);
							
							if(userAccnJson.getAsJsonObject("d").getAsJsonArray("results").size() == 0 ) {
								isTransactionFailed = true;
								errorCode ="068";
								message = properties.getProperty("068");
							} else {
								String clrngDocNo ="", ClrngDocFiscalYear =""; 
								 
								if(! userAccnJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("Corpid").isJsonNull())
									corpID = userAccnJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("Corpid").getAsString();
								 
								if(! userAccnJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("Userid").isJsonNull())
									userID = userAccnJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("Userid").getAsString();
								if(debug){
									response.getWriter().println("PGPayments.userAccnJson.corpID: "+corpID);
									response.getWriter().println("PGPayments.userAccnJson.userID: "+userID);
								}
								
								if(! pgCatChildResponse.get("TrackIDPrefix").isJsonNull())
									trackIDPrefix = pgCatChildResponse.get("TrackIDPrefix").getAsString();
								
								if(debug)
									response.getWriter().println("PGPayments.trackIDPrefix: "+trackIDPrefix);
							}
						}else{
							 isTransactionFailed = true;
							 errorCode ="054";
							 message = properties.getProperty("054");
						}
						
						if(isTransactionFailed)
						{
							 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("\\bPC\\b", "PY");
							 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE", message);
							 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", errorCode);
							 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
							 response.getWriter().println( errorResFormatForPGPayments );
										
						}else{
							//for ODAccount
							if(pgCatId.equalsIgnoreCase("000006") )
							{
								String cpNo ="", cpType="";
								JsonObject sccnfgTableJson = new JsonObject();
								JsonObject scfDataInJson = new JsonObject();
								Map<String, String> userAccountsEntry = new HashMap<String, String>();
								AccountClient accntClient = new AccountClient();
								Map<String, String> accntClientMap = new HashMap<String, String>();
								
								executeURL = "";
								if(! pymntHeaderChildObj.get("CPNo").isJsonNull())
									cpNo = pymntHeaderChildObj.get("CPNo").getAsString();
								
								if(! pymntHeaderChildObj.get("CPTypeID").isJsonNull())
									cpType = pymntHeaderChildObj.get("CPTypeID").getAsString();
								if(debug){
									response.getWriter().println("PGPayments.pymntHeaderChildObj.cpNo: "+cpNo);
									response.getWriter().println("PGPayments.pymntHeaderChildObj.cpType: "+cpType);
								}
								
								executeURL = pygwODataURL+"SupplyChainFinances?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20CPGUID%20eq%20%27"+cpNo+"%27%20and%20CPTypeID%20eq%20%27"+cpType+"%27%20and%20StatusID%20ne%20%27"+"000003"+"%27";
								if(debug)
									response.getWriter().println("PGPayments.executeURL9: "+executeURL);
								
								scfDataInJson = executeURL(executeURL, userPass, response);
								if(debug)
									response.getWriter().println("PGPayments.scfDataInJson: "+scfDataInJson);
								
								if(scfDataInJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0)
								{
									sccnfgTableJson = getSCCNFGEntries(response, request, pygwODataURL, aggregatorID, debug);
									
									if(sccnfgTableJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0)
									{
										if (! sccnfgTableJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OD_BANK_KEY").isJsonNull())
											ifscCode = sccnfgTableJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OD_BANK_KEY").getAsString();
										
										if(debug)
											response.getWriter().println("PGPayments.sccnfgTableJson.ifscCode: "+ifscCode);
													
										userAccountsEntry.put("BankAccntNo", debitAccntNoHeader);
										accntClientMap = accntClient.callAccountsWebservice(request, response, userAccountsEntry, userRegResponseMap, aggregatorID, debug);
										if(debug)
											response.getWriter().println("PGPayments.accntClientMap: "+accntClientMap);
										
										if (accntClientMap.get("Status").equalsIgnoreCase("000001")){
											payeeName = accntClientMap.get("CustomerName");
											creditAccNo = scfDataInJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("AccountNo").getAsString();
											OTPInput = inputPayload.getString("OTP");
										}else{
											String pgHeaderGuid="", trackID ="",paymentTxnStatus="",pgPymntPostingSts="", paymentStatus="";;
											String	pgTxnMsg="";
											JsonObject headerObj = new JsonObject();
											JsonArray cofigTypesetJsonArray = new JsonArray();
											
											pgHeaderGuid = pymntHeaderChildObj.get("PGPaymentGUID").getAsString();
											trackID = pymntHeaderChildObj.get("TrackID").getAsString();
											headerObj.add("d", pymntHeaderChildObj);
											
											paymentTxnStatus = "000101";
											paymentStatus = "000310";
											pgPymntPostingSts ="000200";
											
											cofigTypesetJsonArray = getRepaymentsDescriptionByTypeset(request, response, "PGTXST", paymentTxnStatus, oDataURL, aggregatorID, userPass, debug);
											if(debug)
												response.getWriter().println("postTransactionValidation.cofigTypesetJsonArray: "+cofigTypesetJsonArray);
											 
											if(cofigTypesetJsonArray.size() >0)
												pgTxnMsg = cofigTypesetJsonArray.get(0).getAsJsonObject().get("TypesName").getAsString();
											else 
												pgTxnMsg ="";
											
											updatePaymentsHeader(request, response, aggregatorID, oDataURL, pgHeaderGuid, trackID, headerObj ,paymentTxnStatus, paymentStatus, pgPymntPostingSts, pgTxnMsg, "", "", "", debug);
											//"000002", "000101", "000310"
											isTransactionFailed = true;
											errorCode ="068";
											message = properties.getProperty("068");
										}
									}else{
										isTransactionFailed = true;
										errorCode ="115";
										message = properties.getProperty("115");
									}
								}else{
									isTransactionFailed = true;
									errorCode ="114";
									message = properties.getProperty("114");
								}
							}else{
								 //Other than 000006
								 if (pgCatId.equalsIgnoreCase("000004"))
									 OTPInput = "";
								 else
									 OTPInput = inputPayload.getString("OTP");
								
								 payeeName = corpAccnName; //OWN_BANK_ACCNTNM
								 creditAccNo = corpAccnNo; //OWN_BANK_ACCNTNO
							}
							
							if(isTransactionFailed){
								 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("\\bPC\\b", "PY");
								 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE", errorCode);
								 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", message);
								 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
								 response.getWriter().println(errorResFormatForPGPayments);
							}else{
								 Map<String, String> bindPymntResponseMap = new HashMap<String, String>();
								
								 if(debug){
									 response.getWriter().println("final.creditAccNo: "+creditAccNo);
									 response.getWriter().println("final.ifscCode: "+ifscCode);
									 response.getWriter().println("final.payeeName: "+payeeName);
									 response.getWriter().println("final.bankTxnType: "+bankTxnType);
									 response.getWriter().println("final.trackIDPrefix: "+trackIDPrefix);
									 response.getWriter().println("final.OTPInput: "+OTPInput);
									 response.getWriter().println("final.debitAccntNo: "+debitAccntNoHeader);
									 response.getWriter().println("final.aggregatorID: "+aggregatorID);
								 }
								 bindPymntResponseMap = bindPaymentTxnInput(request, response, pymntHeaderChildObj, userRegResponseMap, creditAccNo, ifscCode, payeeName, bankTxnType, trackIDPrefix, OTPInput, aggregatorID, debitAccntNoHeader,debug);
								 if(debug)
									 response.getWriter().println("doPut.bindPymntResponseMap: "+bindPymntResponseMap);
								 buildPutPymntTxnResponse(request, response, aggregatorID, oDataURL, pymntItemJson, pymntHeaderChildObj, bindPymntResponseMap, pgCatId, processSeq, debug);
							}
						}
					}else{
						 if (pgCatChildResponse.get("ErrorCode").getAsString().equalsIgnoreCase("070") || 
								 pgCatChildResponse.get("ErrorMessage").getAsString().equalsIgnoreCase("Bank Payment Transaction Type Not Maintained"))
							 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("\\bPC\\b", "PY");
						 
						 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE", pgCatChildResponse.get("ErrorMessage").getAsString());
						 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", pgCatChildResponse.get("ErrorCode").getAsString());
						 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
						 response.getWriter().println(errorResFormatForPGPayments);
					}
				}else{
					 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE", "Transaction Not Found");
					 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", "e112");
					 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					 response.getWriter().println(errorResFormatForPGPayments);
				}
			}else{
				 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE",  "Transaction Not Found");
				 errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", "e112");
				 response.getWriter().println(errorResFormatForPGPayments);
			}
		}catch(Exception e){
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println(e.getMessage()+"---> in doPut. Full Stack Trace: "+buffer.toString());
		}
		return postTxnResponse;
	}
	
	public JsonObject getPGCategories(HttpServletRequest request, HttpServletResponse response, Properties properties, boolean debug) throws IOException{
		JsonObject pgCatResponse = new JsonObject();
		String executeURL="", oDataURL="", userName="", passWord="", userPass="", aggregatorID="";
		
		try{
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			oDataURL = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			passWord = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+passWord;
			
			executeURL = oDataURL+"PGPaymentCategories?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27";
			pgCatResponse = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getPGCategories.pgCatResponse: "+pgCatResponse);
		}catch (Exception e) {
			pgCatResponse.addProperty("Error", "E001");
		}
		return pgCatResponse;
	}
	
	public String calcCurrentFiscalYear(HttpServletRequest request, HttpServletResponse response, Properties properties, boolean debug) throws IOException{
		int year = 0, month = 0;
		String fiscalYear="";
		try{
			year = Calendar.getInstance().get(Calendar.YEAR);
		    month = Calendar.getInstance().get(Calendar.MONTH) + 1;
		    
		    if (month < 3) {
		    	fiscalYear = ""+(year-1);
		    } else {
		    	fiscalYear = ""+year;
		    }
		}catch (Exception e) {
			year = Calendar.getInstance().get(Calendar.YEAR);
			fiscalYear = ""+year;
		}
		return fiscalYear;
	}
	
	public String createRepaymentTrackID(HttpServletRequest request, HttpServletResponse response, Properties properties, boolean debug) throws IOException
	{
		String repaymentTrckID = "", executeURL="", destURL="", userName="", passWord="", userPass="", aggrID="";
		String fiscalYear="", trackIDPrefix="";
		JsonObject httpPostResponse = new JsonObject();
		JsonObject pgCatResponse = new JsonObject();
		JsonObject pgCatChildObj = new JsonObject();
		JSONObject insertPayload = new JSONObject();
		boolean isFiscalNeeded = false;
		try{
			pgCatResponse = getPGCategories(request, response, properties, debug);
			if(debug)
				response.getWriter().println("createRepaymentTrackID.pgCatResponse: "+pgCatResponse);
			
			if(! pgCatResponse.has("Error")){
				if(pgCatResponse.getAsJsonObject("d").getAsJsonArray("results").size() == 0){
					repaymentTrckID = "";
				}else{
					for(int i=0 ; i<pgCatResponse.getAsJsonObject("d").getAsJsonArray("results").size() ; i++){
						pgCatChildObj = pgCatResponse.getAsJsonObject("d").getAsJsonArray("results").get(i).getAsJsonObject();
						if(! pgCatChildObj.get("PGCategoryID").isJsonNull() && pgCatChildObj.get("PGCategoryID").getAsString().equalsIgnoreCase("000006")){
							if(! pgCatChildObj.get("IsNRFiscalYearDependent").isJsonNull() && pgCatChildObj.get("IsNRFiscalYearDependent").getAsString().equalsIgnoreCase("X")){
								isFiscalNeeded = true;
								if(! pgCatChildObj.get("TrackIDPrefix").isJsonNull() && pgCatChildObj.get("TrackIDPrefix").getAsString().trim().length() > 0){
									trackIDPrefix = pgCatChildObj.get("TrackIDPrefix").getAsString();
								}else{
									trackIDPrefix = "";
								}
							}
						}
					}
				}
			}else{
				repaymentTrckID = "";
			}
			
			if(isFiscalNeeded){
				fiscalYear = calcCurrentFiscalYear(request, response, properties, debug);
			}
			if(debug)
				response.getWriter().println("createRepaymentTrackID.fiscalYear: "+fiscalYear);
			
			destURL = getODataDestinationProperties("URL", "CPIConnect");
			userName = getODataDestinationProperties("User", "CPIConnect");
			passWord = getODataDestinationProperties("Password", "CPIConnect");
			aggrID = getODataDestinationProperties("AggregatorID", "PYGWHANA");
			userPass = userName+":"+passWord;
			executeURL = destURL+""+properties.getProperty("GetNumberRangeEndPoint");
			
			if (debug) {
				response.getWriter().println("createRepaymentTrackID.executeURL: "+executeURL);
				response.getWriter().println("createRepaymentTrackID.destURL: "+destURL);
				response.getWriter().println("createRepaymentTrackID.userName: "+userName);
				response.getWriter().println("createRepaymentTrackID.passWord: "+passWord);
				response.getWriter().println("createRepaymentTrackID.userPass: "+userPass);
				response.getWriter().println("createRepaymentTrackID.aggrID: "+aggrID);
			}
			
			insertPayload.accumulate("AggregatorID", aggrID);
			insertPayload.accumulate("NumberRangeObject", properties.getProperty("RepaymentTrackID"));
//			httpPostResponse = executePostURL(executeURL, userPass, response, insertPayload, request, debug);
			httpPostResponse = getHttpURLConnection(executeURL, userPass, insertPayload, response, debug); 
			
			if (debug) {
				response.getWriter().println("createRepaymentTrackID.httpPostResponse: "+httpPostResponse);
			}
			
			if(! httpPostResponse.has("Error")){
				if ( ! httpPostResponse.get("Status").isJsonNull() &&
						httpPostResponse.get("Status").getAsString().equalsIgnoreCase("000001") ) {
					if ( ! httpPostResponse.get("Number").isJsonNull())
						repaymentTrckID = repaymentTrckID+trackIDPrefix+fiscalYear+httpPostResponse.get("Number").getAsString();
//						repaymentTrckID = 
					else
						repaymentTrckID = repaymentTrckID+trackIDPrefix+fiscalYear+generateGUID(10);
				}else{
					repaymentTrckID ="";
				}
			}
			
			if(debug)
				response.getWriter().println("createRepaymentTrackID-repaymentTrckID: "+repaymentTrckID);
			
		}catch (Exception e) {
			repaymentTrckID = "";
		}
		
		return repaymentTrckID;
		/*String trackID="";
		int  year = 0; 
		
		year = Calendar.getInstance().get(Calendar.YEAR);
		trackID ="T"+""+year+""+generateGUID(10);
		
		return trackID;*/
	}
	
	public JsonObject insertIntoPaymentsHeader(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String loginID, String oDataUrl ,String pgGuid, String trackID, JSONObject inputJson, 
			String paymentTxnStatus, String paymentStatus, String pgPymntPostingSts, boolean debug) throws IOException
	{
		String createdBy="",createdAt="", executeURL ="",password="",userPass="", userName="";
		long createdOnLong = 0; 
		int  year = 0;
		JSONObject insertPymntHeaderJson = new JSONObject();
		
		JsonObject insertResponse = new JsonObject();
		
		try {
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnLong = getCreatedOnDate();
			
			insertPymntHeaderJson.accumulate("PGPaymentGUID", pgGuid);
			insertPymntHeaderJson.accumulate("AggregatorID", aggregatorID);
			insertPymntHeaderJson.accumulate("TrackID", trackID);

			insertPymntHeaderJson.accumulate("PGTxnStatusID", paymentTxnStatus);
			insertPymntHeaderJson.accumulate("PaymentStatusID", paymentStatus);
			insertPymntHeaderJson.accumulate("PGPaymnetPostingStatusID", pgPymntPostingSts);
			
			if (! inputJson.isNull("PGTransactionID") && inputJson.getString("PGTransactionID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGTransactionID", inputJson.getString("PGTransactionID"));
			else 
				insertPymntHeaderJson.accumulate("PGTransactionID", "");
			
			if (! inputJson.isNull("ConfigHeaderGUID") && inputJson.getString("ConfigHeaderGUID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("ConfigHeaderGUID", inputJson.getString("ConfigHeaderGUID"));
			else 
				insertPymntHeaderJson.accumulate("ConfigHeaderGUID", "");
			
			if (! inputJson.isNull("PGID") && inputJson.getString("PGID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGID", inputJson.getString("PGID"));
			else 
				insertPymntHeaderJson.accumulate("PGID", "");

			if (! inputJson.isNull("PGCategoryID") && inputJson.getString("PGCategoryID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGCategoryID", inputJson.getString("PGCategoryID"));
			else 
				insertPymntHeaderJson.accumulate("PGCategoryID", "");
			
			if (! inputJson.isNull("PGBankRefID") && inputJson.getString("PGBankRefID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGBankRefID", inputJson.getString("PGBankRefID"));
			else 
				insertPymntHeaderJson.accumulate("PGBankRefID", "");
			
			if (! inputJson.isNull("PGName") && inputJson.getString("PGName").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGName", inputJson.getString("PGName"));
			else 
				insertPymntHeaderJson.accumulate("PGName", "");
			
			if (! inputJson.isNull("PymntFor") && inputJson.getString("PymntFor").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PymntFor", inputJson.getString("PymntFor"));
			else 
				insertPymntHeaderJson.accumulate("PymntFor", "");
			
			if (! inputJson.isNull("CPTypeID") && inputJson.getString("CPTypeID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("CPTypeID", inputJson.getString("CPTypeID"));
			else 
				insertPymntHeaderJson.accumulate("CPTypeID", "");
			
			if (! inputJson.isNull("CPAccountno") && inputJson.getString("CPAccountno").trim().length() > 0)
				insertPymntHeaderJson.accumulate("CPAccountno", inputJson.getString("CPAccountno"));
			else 
				insertPymntHeaderJson.accumulate("CPAccountno", "");
			
			if (! inputJson.isNull("CPNo") && inputJson.getString("CPNo").trim().length() > 0)
				insertPymntHeaderJson.accumulate("CPNo", inputJson.getString("CPNo"));
			else 
				insertPymntHeaderJson.accumulate("CPNo", "");
			
			if (! inputJson.isNull("PGPaymentMethodID") && inputJson.getString("PGPaymentMethodID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGPaymentMethodID", inputJson.getString("PGPaymentMethodID"));
			else 
				insertPymntHeaderJson.accumulate("PGPaymentMethodID", "");
			
			if (! inputJson.isNull("PaymentTypeID") && inputJson.getString("PaymentTypeID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PaymentTypeID", inputJson.getString("PaymentTypeID"));
			else 
				insertPymntHeaderJson.accumulate("PaymentTypeID", "");
			
			if (! inputJson.isNull("PGPaymentDate") && inputJson.getString("PGPaymentDate").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGPaymentDate", inputJson.getString("PGPaymentDate"));
			else 
				insertPymntHeaderJson.accumulate("PGPaymentDate", null);
			
			if (! inputJson.isNull("PaymentAmount") && inputJson.getString("PaymentAmount").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PaymentAmount", inputJson.getString("PaymentAmount"));
			else 
				insertPymntHeaderJson.accumulate("PaymentAmount", "0.00");
			
			if (! inputJson.isNull("Currency") && inputJson.getString("Currency").trim().length() > 0)
				insertPymntHeaderJson.accumulate("Currency", inputJson.getString("Currency"));
			else 
				insertPymntHeaderJson.accumulate("Currency", "");
			
			/*if (! inputJson.isNull("ClearingDocCompanyCodeID") && inputJson.getString("ClearingDocCompanyCodeID").trim().length() > 0)
				insertPymntHeaderJson.accumulate("ClearingDocCompanyCodeID", inputJson.getString("ClearingDocCompanyCodeID"));
			else 
				insertPymntHeaderJson.accumulate("ClearingDocCompanyCodeID", "");
			*/
			if (! inputJson.isNull("ClearingDocFiscalYear") && inputJson.getString("ClearingDocFiscalYear").trim().length() > 0)
				insertPymntHeaderJson.accumulate("ClearingDocFiscalYear", inputJson.getString("ClearingDocFiscalYear"));
			else 
				insertPymntHeaderJson.accumulate("ClearingDocFiscalYear", "");
			
			if (! inputJson.isNull("ClearingDocNo") && inputJson.getString("ClearingDocNo").trim().length() > 0)
				insertPymntHeaderJson.accumulate("ClearingDocNo", inputJson.getString("ClearingDocNo"));
			else 
				insertPymntHeaderJson.accumulate("ClearingDocNo", "");
			
			insertPymntHeaderJson.accumulate("TxnErrorCode", "");
			insertPymntHeaderJson.accumulate("PGTxnErrorCode", "");
			
			if (! inputJson.isNull("PGTxnMessage") && inputJson.getString("PGTxnMessage").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGTxnMessage", inputJson.getString("PGTxnMessage"));
			else 
				insertPymntHeaderJson.accumulate("PGTxnMessage", "");
			
			if (! inputJson.isNull("PGTxnAmount") && inputJson.getString("PGTxnAmount").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGTxnAmount", inputJson.getString("PGTxnAmount"));
			else 
				insertPymntHeaderJson.accumulate("PGTxnAmount", "0.00");
			
			if (! inputJson.isNull("BalanceAmount") && inputJson.getString("BalanceAmount").trim().length() > 0)
				insertPymntHeaderJson.accumulate("BalanceAmount", inputJson.getString("BalanceAmount"));
			else 
				insertPymntHeaderJson.accumulate("BalanceAmount", "0.00");
			
			if (! inputJson.isNull("PGTxnDate") && inputJson.getString("PGTxnDate").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGTxnDate", inputJson.getString("PGTxnDate"));
			else 
				insertPymntHeaderJson.accumulate("PGTxnDate", null);
			
			if (! inputJson.isNull("PGTxnTime") && inputJson.getString("PGTxnTime").trim().length() > 0)
				insertPymntHeaderJson.accumulate("PGTxnTime", inputJson.getString("PGTxnTime"));
			else 
				insertPymntHeaderJson.accumulate("PGTxnTime", null);
			
			if ( inputJson.has("AdvanceFor") && ! inputJson.isNull("AdvanceFor"))
				insertPymntHeaderJson.accumulate("AdvanceFor", inputJson.getString("AdvanceFor"));
			else 
				insertPymntHeaderJson.accumulate("AdvanceFor", "");
			
			if (! inputJson.isNull("EnteredAmt") && inputJson.getString("EnteredAmt").trim().length() > 0)
				insertPymntHeaderJson.accumulate("EnteredAmt", inputJson.getString("EnteredAmt"));
			else 
				insertPymntHeaderJson.accumulate("EnteredAmt", "0.00");
			
			if (! inputJson.isNull("Text") && inputJson.getString("Text").trim().length() > 0)
				insertPymntHeaderJson.accumulate("Remarks", inputJson.getString("Text"));
			else 
				insertPymntHeaderJson.accumulate("Remarks", "");
			
			insertPymntHeaderJson.accumulate("TDSAmt", "0.00");
			insertPymntHeaderJson.accumulate("CLRDocCat", "");
			insertPymntHeaderJson.accumulate("AggregatorRef", "");
			insertPymntHeaderJson.accumulate("Source", "");
			insertPymntHeaderJson.accumulate("CreatedBy", createdBy);
			insertPymntHeaderJson.accumulate("CreatedAt", createdAt);
			insertPymntHeaderJson.accumulate("CreatedOn", "/Date("+createdOnLong+")/");
			if (debug)
				response.getWriter().println("insertIntoPaymentsHeader.insertPymntHeaderJson: "+insertPymntHeaderJson);
			
			executeURL = oDataUrl+"PGPayments";
			if (debug)
				response.getWriter().println("insertIntoPaymentsHeader.executeURL: "+executeURL);
			
			insertResponse = executePostURL(executeURL, userPass, response, insertPymntHeaderJson, request, debug, "PCGWHANA");
			if (debug)
				response.getWriter().println("insertIntoPaymentsHeader.insertResponse: "+insertResponse);
			
			if(insertResponse.has("error")){
				insertResponse.addProperty("ErrorCode", "001");
				insertResponse.addProperty("Message", "Insertion Failed in PGPayments Header");
				return insertResponse;
			}else{
				//Calling items table
				JsonArray insertItemResponse =new JsonArray();
				insertItemResponse = insertIntoPaymentsItems(request, response, aggregatorID, loginID, oDataUrl, inputJson, pgGuid ,debug);
				if (debug)
					response.getWriter().println("insertIntoPaymentsHeader.insertItemResponse: "+insertItemResponse);
				
				insertResponse.getAsJsonObject("d").add("PGPaymentItemDetails", insertItemResponse);
				if (debug)
					response.getWriter().println("insertIntoPaymentsHeader.insertResponse.2: "+insertResponse);
				insertResponse.addProperty("ErrorCode", "");
				insertResponse.addProperty("Message", "");
				
				/*if (insertItemResponse.get("ErrorCode").getAsString().trim().length() > 0) {
					insertResponse.addProperty("ErrorCode", "001");
					insertResponse.addProperty("Message", insertItemResponse.get("Message").getAsString());
					return insertResponse;
				} else {
					JsonObject childItemObj = new JsonObject();
					insertItemResponse.getAsJsonObject("d").remove("ErrorCode");
					insertItemResponse.getAsJsonObject("d").remove("Message");
					childItemObj = insertItemResponse.getAsJsonObject("d");
					insertResponse.getAsJsonObject("d").add("PGPaymentItemDetails", childItemObj);
					insertResponse.addProperty("ErrorCode", "");
					insertResponse.addProperty("Message", "");
					if (debug)
						response.getWriter().println("insertIntoPaymentsHeader.insertResponse2: "+insertResponse);
					return insertResponse;
				}*/
			}
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			insertResponse.addProperty("ErrorCode", "001");
			insertResponse.addProperty("Message", "Reason: "+e.getMessage());
		}
		return insertResponse;
	}
	
	public JsonObject buildPostPymntHeaderResponse(HttpServletRequest request, HttpServletResponse response, String pgPymntGuid, String trackID, String loginId, String aggregatorID,
			JsonObject headerJsonObj, JSONObject inputPayload, boolean debug) throws IOException
	{
		String appendSuccess="";
		JsonObject buildJsonObj = new JsonObject();
		JsonObject buildJsonResponseUI = new JsonObject();
		Gson gson = new Gson();
		try {
			
			JsonObject childHeaderObj = headerJsonObj.getAsJsonObject("d");
			if(debug){
				response.getWriter().println("buildPostPymntHeaderResponse.childHeaderObj: "+ childHeaderObj);
				response.getWriter().println("buildPostPymntHeaderResponse.inputPayload: "+ inputPayload);
			}
			appendSuccess = "{\"d\":{\"__metadata\":{\"id\":\"http://sserp:8000/sap/opu/odata/ARTEC/PCGW/PGPayments(guid'"+pgPymntGuid+"')\","
					+ "\"uri\":\"http://sserp:8000/sap/opu/odata/ARTEC/PCGW/PGPayments(guid'"+pgPymntGuid+"')\","
					+ "\"type\":\"ARTEC.PCGW.PGPayment\"}"
					+ ",\"ClearingText\":\"\""
					+ ",\"PGPaymentGUID\":\""+childHeaderObj.get("PGPaymentGUID").getAsString()+"\""
					+ ",\"TrackID\":\""+trackID+"\""
					+ ",\"LoginID\":\""+loginId+"\""
					+ ",\"PGTransactionID\":\""+childHeaderObj.get("PGTransactionID").getAsString()+"\""
					+ ",\"ConfigHeaderGUID\":\""+childHeaderObj.get("ConfigHeaderGUID").getAsString()+"\""
					+ ",\"PGID\":\""+childHeaderObj.get("PGID").getAsString()+"\""
					+ ",\"PGCategoryID\":\""+childHeaderObj.get("PGCategoryID").getAsString()+"\""
					+ ",\"PGName\":\""+childHeaderObj.get("PGName").getAsString()+"\""
					+ ",\"CPTypeID\":\""+childHeaderObj.get("CPTypeID").getAsString()+"\""
					+ ",\"CPNo\":\""+childHeaderObj.get("CPNo").getAsString()+"\""
					+ ",\"PGPaymentMethodID\":\""+childHeaderObj.get("PGPaymentMethodID").getAsString()+"\""
					+ ",\"PaymentTypeID\":\""+childHeaderObj.get("PaymentTypeID").getAsString()+"\""
					+ ",\"CPAccountno\":\""+childHeaderObj.get("CPAccountno").getAsString()+"\""
					+ ",\"Currency\":\""+childHeaderObj.get("Currency").getAsString()+"\""
					+ ",\"PGTxnStatusDesc\":\"\""
					+ ",\"PGTxnStatusID\":\""+childHeaderObj.get("PGTxnStatusID").getAsString()+"\""
					+ ",\"PaymentStatusID\":\""+childHeaderObj.get("PaymentStatusID").getAsString()+"\""
					+ ",\"PaymnetStatusDesc\":\"\""
					+ ",\"PGPaymnetPostingStatusID\":\""+childHeaderObj.get("PGPaymnetPostingStatusID").getAsString()+"\""
					+ ",\"PGPaymentPostingStatusDesc\":\"\""
					+ ",\"ClearingDocCompanyCodeID\":\"\""
					+ ",\"ClearingDocCompanyCodeDesc\":\"\""
					+ ",\"ClearingDocFiscalYear\":\""+childHeaderObj.get("ClearingDocFiscalYear").getAsString()+"\""
					+ ",\"ClearingDocNo\":\""+childHeaderObj.get("ClearingDocNo").getAsString()+"\""
					+ ",\"OTPTransactionID\":\"\""
					+ ",\"Text\":\"\""
					+ ",\"PGTxnMessage\":\""+childHeaderObj.get("PGTxnMessage").getAsString()+"\""
					+ ",\"PGBankRefID\":\""+childHeaderObj.get("PGBankRefID").getAsString()+"\""
					+ ",\"CPName\":\"\""
					+ ",\"PymntFor\":\""+childHeaderObj.get("PymntFor").getAsString()+"\""
//					+ ",\"AdvanceFor\":\""+childHeaderObj.get("AdvanceFor").getAsString()+"\""
					+ ",\"AdvanceForDesc\":\"\""
					+ ",\"CLRDocCat\":\"\""
					+ ",\"SourceDesc\":\"\""

					+ ",\"TestRun\":\""+inputPayload.getBoolean("TestRun")+"\""
					+ ",\"OTP\":\""+inputPayload.getString("OTP")+"\""
					+ ",\"PGRefID\":\""+inputPayload.getString("PGRefID")+"\""
					+ ",\"SourceID\":\""+inputPayload.getString("SourceID")+"\""
					+ ",\"PGCategoryDesc\":\"\""
					+ ",\"CPTypeDesc\":\""+inputPayload.getString("CPTypeDesc")+"\""
					+ ",\"PaymentTypeDesc\":\""+inputPayload.getString("PaymentTypeDesc")+"\""
					+ ",\"PGPaymentMethodDesc\":\""+inputPayload.getString("PGPaymentMethodDesc")+"\""
					
					+ ",\"ClrDocCatDesc\":\"\""
					+ ",\"PymntForDesc\":\"\"}}";
			buildJsonResponseUI = gson.fromJson(appendSuccess, JsonObject.class);
			if(debug)
				response.getWriter().println("buildPostPymntHeaderResponse.buildJsonResponseUI1: "+buildJsonResponseUI);
			
			
			if ( ! childHeaderObj.get("AdvanceFor").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("AdvanceFor", childHeaderObj.get("AdvanceFor").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("AdvanceFor", null);
			
			if ( ! childHeaderObj.get("TDSAmt").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("TDSAmt", childHeaderObj.get("TDSAmt").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("TDSAmt", "0.00");
			
			if ( ! childHeaderObj.get("EnteredAmt").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("EnteredAmt", childHeaderObj.get("EnteredAmt").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("EnteredAmt", "0.00");
			
			if ( ! childHeaderObj.get("PGPaymentDate").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PGPaymentDate", childHeaderObj.get("PGPaymentDate").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("PGPaymentDate", null);
			
			if ( ! childHeaderObj.get("PaymentAmount").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PaymentAmount", childHeaderObj.get("PaymentAmount").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PaymentAmount", "0.00");
			
			if ( ! childHeaderObj.get("PGTxnDate").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PGTxnDate", childHeaderObj.get("PGTxnDate").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("PGTxnDate", null);
			
			if ( ! childHeaderObj.get("PGTxnTime").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PGTxnTime", childHeaderObj.get("PGTxnTime").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("PGTxnTime", null);
			
			if ( ! childHeaderObj.get("PGTxnAmount").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PGTxnAmount", childHeaderObj.get("PGTxnAmount").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("PGTxnAmount", "0.00");
			
			if ( ! childHeaderObj.get("BalanceAmount").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("BalanceAmount", childHeaderObj.get("BalanceAmount").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("BalanceAmount", "0.00");
			
			if ( ! childHeaderObj.get("CreatedOn").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("CreatedOn", childHeaderObj.get("CreatedOn").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("CreatedOn", null);
			
			buildJsonResponseUI.getAsJsonObject("d").addProperty("CreatedBy", childHeaderObj.get("CreatedBy").getAsString());

			if ( ! childHeaderObj.get("CreatedAt").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("CreatedAt", childHeaderObj.get("CreatedAt").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("CreatedAt", null);
			
			if ( ! childHeaderObj.get("ChangedOn").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("ChangedOn", childHeaderObj.get("ChangedOn").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("ChangedOn", null);
			
			if ( ! childHeaderObj.get("ChangedBy").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("ChangedBy", childHeaderObj.get("ChangedBy").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").addProperty("ChangedBy", "");
			
			if ( ! childHeaderObj.get("ChangedAt").isJsonNull())
				buildJsonResponseUI.getAsJsonObject("d").addProperty("ChangedAt", childHeaderObj.get("ChangedAt").getAsString());
			else
				buildJsonResponseUI.getAsJsonObject("d").add("ChangedAt", null);
			
//					if(debug)
//						response.getWriter().println("buildPostPymntHeaderResponse.buildJsonResponseUI2: "+buildJsonResponseUI);
			
			buildJsonObj = buildPostPymntItemResponse(request, response, pgPymntGuid, loginId, headerJsonObj, inputPayload, debug);
			if(debug)
				response.getWriter().println("buildPostPymntHeaderResponse.buildJsonObj2: "+buildJsonObj);
			
			buildJsonResponseUI.getAsJsonObject("d").add("PGPaymentItemDetails", buildJsonObj);
			if(debug)
				response.getWriter().println("buildPostPymntHeaderResponse.buildJsonResponseUI3: "+buildJsonResponseUI);
			
		/*	if (buildJsonObj.getAsJsonArray("results").get(0).getAsJsonObject().has("ErrorMessage")) 
			{
				buildJsonResponseUI.addProperty("ErrorCode", "001");
				buildJsonResponseUI.addProperty("ErrorMessage", buildJsonObj.getAsJsonArray("results").get(0).getAsJsonObject().has("ErrorMessage"));
				return buildJsonResponseUI;
			} else 
			{
				buildJsonResponseUI.getAsJsonObject("d").add("PGPaymentItemDetails", buildJsonObj);
//						if(debug)
//							response.getWriter().println("buildPostPymntHeaderResponse.buildJsonResponseUI3: "+buildJsonResponseUI);
			}*/
			
		} catch (Exception e) {
			response.getWriter().print(e.getLocalizedMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			JsonObject results = new JsonObject();
			results.addProperty("ErrorCode", "001");
			results.addProperty("ErrorMessage", e.getLocalizedMessage());
			return results;
		}
		return buildJsonResponseUI;
	}
	
	public JsonObject updatePaymentsHeader(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String oDataUrl ,String pgGuid, String trackId, JsonObject updateHeaderJson,
			String pgTxnStsID, String pymtSts, String pgPymntSts, String pgTxnMsg,String pgBankRef ,String pgTxnID, String pgTxnErrorCode, boolean debug) throws IOException
	{
//				JSONObject updatePymntHeaderJson = new JSONObject();
//				return updateHeaderJson;
		
		String changedBy="",changedAt="", executeURL ="",password="",userPass="", userName="";
		long changedOnLong = 0; 
		JSONObject updatePymntHeaderJson = new JSONObject();
		JsonObject updateResponse = new JsonObject();
		JsonObject childHeaderObj = new JsonObject();
		try {
			childHeaderObj = updateHeaderJson.getAsJsonObject("d");
			
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			changedBy = getUserPrincipal(request, "name", response);
			changedAt = getCreatedAtTime();
			changedOnLong = getCreatedOnDate();
			if(debug){
				response.getWriter().println("updatePaymentsHeader.childHeaderObj: "+childHeaderObj);
				response.getWriter().println("updatePaymentsHeader.userName: "+userName);
				response.getWriter().println("updatePaymentsHeader.password: "+password);
				response.getWriter().println("updatePaymentsHeader.changedBy: "+changedBy);
				response.getWriter().println("updatePaymentsHeader.changedAt: "+changedAt);
				response.getWriter().println("updatePaymentsHeader.changedOnLong: "+changedOnLong);
			}
//			updatePymntHeaderJson.accumulate("PGPaymentGUID", pgGuid);
			updatePymntHeaderJson.accumulate("AggregatorID", aggregatorID);
			updatePymntHeaderJson.accumulate("TrackID", trackId);
			
			updatePymntHeaderJson.accumulate("PGTxnStatusID", pgTxnStsID);
			updatePymntHeaderJson.accumulate("PaymentStatusID", pymtSts);
			updatePymntHeaderJson.accumulate("PGPaymnetPostingStatusID", pgPymntSts);
			
			updatePymntHeaderJson.accumulate("PGTxnMessage", pgTxnMsg);
			updatePymntHeaderJson.accumulate("PGBankRefID", pgBankRef);
			updatePymntHeaderJson.accumulate("PGTransactionID", pgTxnID);
			
			updatePymntHeaderJson.accumulate("ClearingDocCompanyCodeID", "");
			updatePymntHeaderJson.accumulate("TxnErrorCode", "");
			updatePymntHeaderJson.accumulate("PGTxnErrorCode", pgTxnErrorCode);

			if (! childHeaderObj.get("ConfigHeaderGUID").isJsonNull() && childHeaderObj.get("ConfigHeaderGUID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("ConfigHeaderGUID", childHeaderObj.get("ConfigHeaderGUID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("ConfigHeaderGUID", "");
			
			if (! childHeaderObj.get("PGID").isJsonNull() && childHeaderObj.get("PGID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGID", childHeaderObj.get("PGID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGID", "");

			if (! childHeaderObj.get("PGCategoryID").isJsonNull() && childHeaderObj.get("PGCategoryID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGCategoryID", childHeaderObj.get("PGCategoryID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGCategoryID", "");
			
			if (! childHeaderObj.get("PGName").isJsonNull() && childHeaderObj.get("PGName").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGName", childHeaderObj.get("PGName").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGName", "");
			
			if (! childHeaderObj.get("PymntFor").isJsonNull() && childHeaderObj.get("PymntFor").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PymntFor", childHeaderObj.get("PymntFor").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PymntFor", "");
			
			if (! childHeaderObj.get("CPTypeID").isJsonNull() && childHeaderObj.get("CPTypeID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CPTypeID", childHeaderObj.get("CPTypeID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CPTypeID", "");
			
			if (! childHeaderObj.get("CPAccountno").isJsonNull() && childHeaderObj.get("CPAccountno").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CPAccountno", childHeaderObj.get("CPAccountno").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CPAccountno", "");
			
			if (! childHeaderObj.get("CPNo").isJsonNull() && childHeaderObj.get("CPNo").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CPNo", childHeaderObj.get("CPNo").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CPNo", "");
			
			if (! childHeaderObj.get("PGPaymentMethodID").isJsonNull() && childHeaderObj.get("PGPaymentMethodID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGPaymentMethodID", childHeaderObj.get("PGPaymentMethodID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGPaymentMethodID", "");
			
			if (! childHeaderObj.get("PaymentTypeID").isJsonNull() && childHeaderObj.get("PaymentTypeID").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PaymentTypeID", childHeaderObj.get("PaymentTypeID").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PaymentTypeID", "");
			
			if (! childHeaderObj.get("PGPaymentDate").isJsonNull() && childHeaderObj.get("PGPaymentDate").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGPaymentDate", childHeaderObj.get("PGPaymentDate").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGPaymentDate", JSONObject.NULL);
			
			if (! childHeaderObj.get("PaymentAmount").isJsonNull() && childHeaderObj.get("PaymentAmount").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PaymentAmount", childHeaderObj.get("PaymentAmount").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PaymentAmount", "0.00");
			
			if (! childHeaderObj.get("Currency").isJsonNull() && childHeaderObj.get("Currency").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("Currency", childHeaderObj.get("Currency").getAsString());
			else 
				updatePymntHeaderJson.accumulate("Currency", "");
			
			if (! childHeaderObj.get("ClearingDocFiscalYear").isJsonNull() && childHeaderObj.get("ClearingDocFiscalYear").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("ClearingDocFiscalYear", childHeaderObj.get("ClearingDocFiscalYear").getAsString());
			else 
				updatePymntHeaderJson.accumulate("ClearingDocFiscalYear", "");
			
			if (! childHeaderObj.get("ClearingDocNo").isJsonNull() && childHeaderObj.get("ClearingDocNo").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("ClearingDocNo", childHeaderObj.get("ClearingDocNo").getAsString());
			else 
				updatePymntHeaderJson.accumulate("ClearingDocNo", "");
			
			if (! childHeaderObj.get("PGTxnAmount").isJsonNull() && childHeaderObj.get("PGTxnAmount").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGTxnAmount", childHeaderObj.get("PGTxnAmount").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGTxnAmount", "0.00");
			
			if (! childHeaderObj.get("BalanceAmount").isJsonNull() && childHeaderObj.get("BalanceAmount").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("BalanceAmount", childHeaderObj.get("BalanceAmount").getAsString());
			else 
				updatePymntHeaderJson.accumulate("BalanceAmount", "0.00");
			
			if (! childHeaderObj.get("PGTxnDate").isJsonNull() && childHeaderObj.get("PGTxnDate").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGTxnDate", childHeaderObj.get("PGTxnDate").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGTxnDate", JSONObject.NULL);
			
			if (! childHeaderObj.get("PGTxnTime").isJsonNull() && childHeaderObj.get("PGTxnTime").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("PGTxnTime", childHeaderObj.get("PGTxnTime").getAsString());
			else 
				updatePymntHeaderJson.accumulate("PGTxnTime", JSONObject.NULL);
			
			if (! childHeaderObj.get("AdvanceFor").isJsonNull() && childHeaderObj.get("AdvanceFor").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("AdvanceFor", childHeaderObj.get("AdvanceFor").getAsString());
			else 
				updatePymntHeaderJson.accumulate("AdvanceFor", "");
			
			if (! childHeaderObj.get("EnteredAmt").isJsonNull() && childHeaderObj.get("EnteredAmt").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("EnteredAmt", childHeaderObj.get("EnteredAmt").getAsString());
			else 
				updatePymntHeaderJson.accumulate("EnteredAmt", "0.00");
			
			if (! childHeaderObj.get("TDSAmt").isJsonNull() && childHeaderObj.get("TDSAmt").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("TDSAmt", childHeaderObj.get("TDSAmt").getAsString());
			else 
				updatePymntHeaderJson.accumulate("TDSAmt", "0.00");
		
			if (! childHeaderObj.get("CreatedBy").isJsonNull() && childHeaderObj.get("CreatedBy").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CreatedBy", childHeaderObj.get("CreatedBy").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CreatedBy", "");
			
			if (! childHeaderObj.get("CreatedAt").isJsonNull() && childHeaderObj.get("CreatedAt").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CreatedAt", childHeaderObj.get("CreatedAt").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CreatedAt", JSONObject.NULL);
			
			if (! childHeaderObj.get("CreatedOn").isJsonNull() && childHeaderObj.get("CreatedOn").getAsString().trim().length() > 0)
				updatePymntHeaderJson.accumulate("CreatedOn", childHeaderObj.get("CreatedOn").getAsString());
			else 
				updatePymntHeaderJson.accumulate("CreatedOn", JSONObject.NULL);
			
			updatePymntHeaderJson.accumulate("Remarks", childHeaderObj.get("Remarks").getAsString());
			updatePymntHeaderJson.accumulate("CLRDocCat", "");
			updatePymntHeaderJson.accumulate("AggregatorRef", "");
			updatePymntHeaderJson.accumulate("ChangedBy", changedBy);
			updatePymntHeaderJson.accumulate("ChangedAt", changedAt);
			updatePymntHeaderJson.accumulate("ChangedOn", "/Date("+changedOnLong+")/");
			updatePymntHeaderJson.accumulate("Source", "");
			if(debug)
				response.getWriter().println("updatePaymentsHeader.updatePymntHeaderJson: "+updatePymntHeaderJson);
			
			executeURL = oDataUrl+"PGPayments('"+pgGuid+"')";
			if (debug)
				response.getWriter().println("updatePaymentsHeader.executeURL: "+executeURL);
			
			updateResponse = executeUpdate(executeURL, userPass, response, updatePymntHeaderJson, request, debug, "PCGWHANA");
			if (debug)
				response.getWriter().println("updatePaymentsHeader.updateResponse: "+updateResponse);
			
			if(updateResponse.has("error")){
				updateResponse.addProperty("ErrorCode", "001");
				updateResponse.addProperty("ErrorMessage", "Updation Failed in PGPayments Header");
				return updateResponse;
			}else{
				updateResponse.addProperty("ErrorCode", "");
				updateResponse.addProperty("ErrorMessage", "");
				return updateResponse;
			}
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			updateResponse.addProperty("ErrorCode", "001");
			updateResponse.addProperty("ErrorMessage", e.getLocalizedMessage());
			return updateResponse;
		}
	}
	
	public JsonObject validatePGCategoryConfigs(HttpServletRequest request ,HttpServletResponse response, Properties properties ,String aggregatorID, String oDataURL, String configHdrGuid, String debitAccntNoHeader, boolean debug) throws IOException
	{
		String oDataUserName= "", oDatapassword="", userPass="", executeURL="";
//		JsonObject validateResponse = new JsonObject();
		JsonObject pgPymntCatJson = new JsonObject();
		JsonObject pgCateChildObjResponse = new JsonObject();

		Map<String, String> scfResponseMap = new HashMap<String, String>();
		SCFAccountClient scfAccntClient = new SCFAccountClient();
		try {
			oDataUserName = getODataDestinationProperties("User", "PCGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			JsonObject pgPymntConfig = new JsonObject();
			
			if (debug) {
				response.getWriter().println("validatePGCategory.oDataURL: "+oDataURL);
				response.getWriter().println("validatePGCategory.oDataUserName: "+oDataUserName);
				response.getWriter().println("validatePGCategory.oDatapassword: "+oDatapassword);
				response.getWriter().println("validatePGCategory.userPass: "+userPass);
			}
			executeURL = oDataURL+"PGPaymentConfigs?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20ConfigHeaderGUID%20eq%20%27"+configHdrGuid+"%27";
			if(debug)
				response.getWriter().println("validatePGCategory.executeURL1: "+executeURL);
			
			pgPymntConfig = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("validatePGCategory.pgPymntConfig: "+pgPymntConfig);
				 
			if(pgPymntConfig.getAsJsonObject("d").getAsJsonArray("results").size() == 0 )
			{
				pgCateChildObjResponse.addProperty("ErrorCode", "145");
				pgCateChildObjResponse.addProperty("ErrorMessage", properties.getProperty("145"));
			} 
			else 
			{
				executeURL ="";
				String pgCatId = pgPymntConfig.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("PGCategoryID").getAsString();
				if(debug)
					response.getWriter().println("postTransactionValidation.pgCatId: "+pgCatId);
				
				executeURL = oDataURL+"PGPaymentCategories?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PGCategoryID%20eq%20%27"+pgCatId+"%27";
				if(debug)
					response.getWriter().println("validatePGCategory.executeURL2: "+executeURL);
				 
				pgPymntCatJson = executeURL(executeURL, userPass, response);
				if(debug)
					response.getWriter().println("validatePGCategory.pgPymntCateJson: "+pgPymntCatJson);
				 
				if ( pgPymntCatJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0 )
				{
					String chkFinBlock ="", processSeq="", bankTxnType="";

					pgCateChildObjResponse = pgPymntCatJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject();
					if(debug)
						response.getWriter().println("validatePGCategory.pgCateChildObj: "+pgCateChildObjResponse);

					pgCateChildObjResponse.addProperty("ErrorMessage", "");
					pgCateChildObjResponse.addProperty("ErrorCode", "");

					// validation Starts
					if ( ! pgCateChildObjResponse.get("CheckFinanceBlock").isJsonNull())
						chkFinBlock = pgCateChildObjResponse.get("CheckFinanceBlock").getAsString();
					if(debug)
						response.getWriter().println("validatePGCategory.chkFinanceBlock: "+chkFinBlock);
					
					if ( chkFinBlock.equalsIgnoreCase("X"))
					{
						 scfResponseMap = scfAccntClient.callSCFAccountClient(debitAccntNoHeader, debug);
						 if(debug)
							 response.getWriter().println("postTransactionValidation.scfResponseMap: "+scfResponseMap);
						 
						 if ( scfResponseMap.get("Status").equalsIgnoreCase("000001") || scfResponseMap.get("Status").equalsIgnoreCase("000002") ) {
							 
							 if ( scfResponseMap.get("FreezeFlag").equalsIgnoreCase("000001") )
							 {
								 pgCateChildObjResponse.addProperty("ErrorCode", "070");
								 pgCateChildObjResponse.addProperty("ErrorMessage", properties.getProperty("070"));
							 }
							
						} else {
							pgCateChildObjResponse.addProperty("ErrorCode", "070");
							 pgCateChildObjResponse.addProperty("ErrorMessage", properties.getProperty("070"));
						}
					}

					if ( ! pgCateChildObjResponse.get("BankPaymentTransactionType").isJsonNull())
						bankTxnType = pgCateChildObjResponse.get("BankPaymentTransactionType").getAsString();
					if(debug)
						response.getWriter().println("validatePGCategory.bankTxnType: "+bankTxnType);
					
					if ( bankTxnType.equalsIgnoreCase("") && bankTxnType.trim().length() == 0 )
					{
						pgCateChildObjResponse.addProperty("ErrorMessage", "Bank Payment Transaction Type Not Maintained");
						pgCateChildObjResponse.addProperty("ErrorCode", "116");
					}
					
					if ( ! pgCateChildObjResponse.get("PaymProcessingSequence").isJsonNull())
						processSeq = pgCateChildObjResponse.get("PaymProcessingSequence").getAsString();
					if(debug)
						response.getWriter().println("validatePGCategory.processSeq: "+processSeq);
					
					/*if ( ! processSeq.equalsIgnoreCase("01")  && ! processSeq.equalsIgnoreCase("02") && ! processSeq.equalsIgnoreCase("03"))
					{
						pgCateChildObjResponse.addProperty("ErrorMessage", "Technical Error : ProcessingSequence not matched");
						pgCateChildObjResponse.addProperty("ErrorCode", "124");
					}*/
				}
				else
				{
					pgCateChildObjResponse.addProperty("ErrorMessage", properties.getProperty("116"));
					pgCateChildObjResponse.addProperty("ErrorCode", "116");
				}
			}
			
			if(debug)
				response.getWriter().println("validatePGCategory.pgCateChildObjResponse: "+pgCateChildObjResponse);
		} catch (Exception e) {
			if(debug)
			{
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			pgCateChildObjResponse.addProperty("ErrorMessage", e.getLocalizedMessage());
			pgCateChildObjResponse.addProperty("ErrorCode", "001");
		}
		return pgCateChildObjResponse;
	}
	
	public JsonObject getDCCNFGEntries(HttpServletResponse response, HttpServletRequest request, String oDataUrl,  String aggregatorID, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="", executeURL="";
		JsonObject dccnfgCorpDetailsJson = new JsonObject();
		try {
			
			userName = commonUtils.getODataDestinationProperties("User", "PYGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("getDCCNFGEntries.userName: "+userName);
				response.getWriter().println("getDCCNFGEntries.password: "+password);
				response.getWriter().println("getDCCNFGEntries.userPass: "+userPass);
			}
			
			 executeURL = oDataUrl+"DCCNFG?$filter=AGGRID%20eq%20%27"+aggregatorID+"%27";
			 if(debug)
				 response.getWriter().println("getDCCNFGEntries.executeURL3: "+executeURL);
						
			 dccnfgCorpDetailsJson = executeURL(executeURL, userPass, response);
			 if(debug)
				 response.getWriter().println("getDCCNFGEntries.dccnfgCorpDetailsJson: "+dccnfgCorpDetailsJson);
			 
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return dccnfgCorpDetailsJson;
	}
	
	public JsonObject getSCCNFGEntries(HttpServletResponse response, HttpServletRequest request, String oDataUrl,  String aggregatorID, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="", executeURL="";
		JsonObject sccnfgTableJson = new JsonObject();
		try {
			
			userName = commonUtils.getODataDestinationProperties("User", "PYGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("getSCCNFGEntries.userName: "+userName);
				response.getWriter().println("getSCCNFGEntries.password: "+password);
				response.getWriter().println("getSCCNFGEntries.userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"SCCNFG?$filter=AGGRID%20eq%20%27"+aggregatorID+"%27";
			if(debug)
				response.getWriter().println("getSCCNFGEntries.executeURL10: "+executeURL);
						
			sccnfgTableJson = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getSCCNFGEntries.sccnfgTableJson: "+sccnfgTableJson);
			
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return sccnfgTableJson;
	}
	
	public Map<String, String> bindPaymentTxnInput(HttpServletRequest request, HttpServletResponse response, JsonObject pymntHeaderChild, Map<String, String> userRegisMap,String creditAccountNumber,
			String iFSCCode, String payeeName, String transactionType, String trackIDPrefix, String OTP, String aggregatorID, String debitAccntNoHeader, boolean debug) throws IOException
	{
		String pgIDHeader="", pgCatIDHeader= "", txnDateHeader="", txnTimeHeader="", trackIDProxy="", userRegId="", clrngDocNo="", clearingDocCompanyCodeID="", clrngDocFiscalYear="";
		Map<String, String> txnPostHeaderInputMap = new  HashMap<String, String>();
		
		try {
			JsonObject updateHttpResponse = new JsonObject();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			Date createdDate = null;
			
			if (debug) {
				response.getWriter().println("bindPaymentTxnInput.userRegisMap: "+userRegisMap);
				response.getWriter().println("bindPaymentTxnInput.pymntHeaderChild: "+pymntHeaderChild);
			}
			//TrackId formation
			if (trackIDPrefix.equalsIgnoreCase("C"))
			{
				
				if (! pymntHeaderChild.get("ClearingDocNo").isJsonNull())
					clrngDocNo = pymntHeaderChild.get("ClearingDocNo").getAsString();
				
				if (! pymntHeaderChild.get("ClearingDocCompanyCodeID").isJsonNull() )
					clearingDocCompanyCodeID = pymntHeaderChild.get("ClearingDocCompanyCodeID").getAsString();
				
				if (! pymntHeaderChild.get("ClearingDocFiscalYear").isJsonNull())
					clrngDocFiscalYear = pymntHeaderChild.get("ClearingDocFiscalYear").getAsString();
				
				trackIDProxy = clrngDocNo + clrngDocFiscalYear + clearingDocCompanyCodeID;
			} 
			else
			{
				trackIDProxy = pymntHeaderChild.get("TrackID").getAsString();
			}
			if(debug)
				response.getWriter().println("bindPaymentTxnInput.trackIDProxy: "+trackIDProxy);
			
			if( userRegisMap.get("UserRegId").trim().length()> 0)
				userRegId = (String ) userRegisMap.get("UserRegId");
			
			if ( ! pymntHeaderChild.get("CreatedOn").isJsonNull()) 
			{
				txnDateHeader = pymntHeaderChild.get("CreatedOn").getAsString();
				txnDateHeader = txnDateHeader.substring(txnDateHeader.indexOf("(")+ 1, txnDateHeader.indexOf(")"));
				createdDate = new Date(Long.parseLong(txnDateHeader));
				txnDateHeader = sdf.format(createdDate);
			}
			if (debug)
				response.getWriter().println("bindPaymentTxnInput.txnDateHeader: "+txnDateHeader);
			
			if ( ! pymntHeaderChild.get("CreatedAt").isJsonNull())
			{
				txnTimeHeader = pymntHeaderChild.get("CreatedAt").getAsString();
				txnTimeHeader = txnTimeHeader.replaceAll("([A-Z])", "");
			}
			if (debug)
				response.getWriter().println("bindPaymentTxnInput.txnTimeHeader: "+txnTimeHeader);
			
			if ( ! pymntHeaderChild.get("Remarks").isJsonNull() && pymntHeaderChild.get("Remarks").getAsString().trim().length()> 0)
				txnPostHeaderInputMap.put("Remarks", pymntHeaderChild.get("Remarks").getAsString());
			else
				txnPostHeaderInputMap.put("Remarks", "Remarks");
			
			if (! pymntHeaderChild.get("PaymentAmount").isJsonNull()){
				String pgAmount = "";
				pgAmount = pymntHeaderChild.get("PaymentAmount").getAsString();
				if (! pgAmount.contains("."))
					pgAmount = pgAmount+".00";
				
				txnPostHeaderInputMap.put("Amount", pgAmount);
			}
			else
				txnPostHeaderInputMap.put("Amount", "0.00");
			
			  
			txnPostHeaderInputMap.put("Currency", pymntHeaderChild.get("Currency").getAsString());
			txnPostHeaderInputMap.put("PGCategoryID", pymntHeaderChild.get("PGCategoryID").getAsString());
			txnPostHeaderInputMap.put("PGID", pymntHeaderChild.get("PGID").getAsString());
			
			txnPostHeaderInputMap.put("OTP", OTP);
			txnPostHeaderInputMap.put("DebitAccountNumber", debitAccntNoHeader);
			txnPostHeaderInputMap.put("CorporateID", (String) userRegisMap.get("CorpId"));
			txnPostHeaderInputMap.put("UserID", (String) userRegisMap.get("UserId"));
			txnPostHeaderInputMap.put("UserRegId", userRegId);
			
			txnPostHeaderInputMap.put("IFSCCode", iFSCCode);
			txnPostHeaderInputMap.put("CreditAccountNumber", creditAccountNumber);
			txnPostHeaderInputMap.put("TransactionType", transactionType);
			txnPostHeaderInputMap.put("PayeeName", payeeName);
			
			txnPostHeaderInputMap.put("TransactionTime", txnTimeHeader);
			txnPostHeaderInputMap.put("TransactionDate", txnDateHeader);
			txnPostHeaderInputMap.put("TrackId", trackIDProxy);
			
			
			if (debug)
				response.getWriter().println("txnPostHeaderInputMap: "+txnPostHeaderInputMap);
			
		} catch (Exception e) {
			response.getWriter().print(e.getLocalizedMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
		}
		return txnPostHeaderInputMap;
	}
	
	public JsonObject buildPutPymntTxnResponse(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String oDataUrl, JsonObject paymentItemJson, JsonObject paymentHeaderJson, 
			Map<String, String> pymntTxnResponseMap,String pgCatID, String processSequence, boolean debug) throws IOException
	{
		String appendSuccess="",  pgTxnStatusID ="", pgPymntStsID="", pymtSts="", pgTxnMsg="", pgBankRef="",pgTxnID="", pgTxnErrorCodeID="", errorCode="", statusWS="";
		String pgHeaderGUID = "", trackId= "", ClearingDocCompanyCodeID="", errorResFormatForPGPayments="";
		JsonObject buildHeaderObj = new JsonObject();
		JsonObject updateHttpResponse = new JsonObject();
		JsonObject responseUI = new JsonObject();
		PaymentTransactionClient txnPostClientWS = new PaymentTransactionClient();
		Map<String, String> postPymntResponseWSResponse = new HashMap<String, String>();
		Gson gson = new Gson();
		JsonArray cofigTypesetJsonArray =  new JsonArray();
		String userName="",password="",userPass="",otpTypesName="", pgTxnResponse="",otpValidationFailedErrorFormat="";
//		debug = true;
		try {
			
			 //ERROR_CODE, ERROR_MESSAGE, TXN_ID, TRACK_ID
			errorResFormatForPGPayments =  "{\"error\":{\"code\":\"/ARTEC/PY/ERROR_CODE\",\"message\":{\"lang\":\"en\",\"value\":\"Error from Bank side :ERROR_MESSAGE\"},"
					+ "\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PCGW\",\"service_version\":\"0001\"},"
					+ "\"transactionid\":\"\",\"timestamp\":\"20200128095812.0820000\","
					+ "\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\","
					+ "\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\","
					+ "\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"},\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\","
					+ "\"message\":\"Error from Bank side :ERROR_MESSAGE\","
					+ "\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/ARTEC/PY/ERRORCODE\",\"message\":\"TRACK_ID\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"},"
					+ "{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\",\"message\":\"An application exception has occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
			 
			
			otpValidationFailedErrorFormat = "{\"error\":{\"code\":\"/ARTEC/PY/081\",\"message\":{\"lang\":\"en\",\"value\":\"OTP validation failed. Please renter OTP. Error from Bank side : ERROR_MESSAGE\"},"
					+ "\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PCGW\",\"service_version\":\"0001\"},"
					+ "\"transactionid\":\"BB17ABEA9DCFF17FA8EC001372667F53\",\"timestamp\":\"20200610124159.8720000\","
					+ "\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\","
					+ "\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\","
					+ "\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"},"
					+ "\"errordetails\":[{\"code\":\"/ARTEC/PY/081\",\"message\":\"OTP validation failed. Please renter OTP. Error from Bank side : ERROR_MESSAGE\","
					+ "\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\",\"message\":\"An application exception has occurred.\","
					+ "\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
			
			
			appendSuccess=  "{\"code\":\"/ARTEC/PY/ERROR_CODE\",\"message\":\"Bank Payment Reference ID is TXN_ID\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
			
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			cofigTypesetJsonArray = getRepaymentsDescriptionByTypeset(request, response, "PYOTPE", "ERROR1", oDataUrl, aggregatorID, userPass, debug);
			if(debug)
				response.getWriter().println("buildPutPymntTxnResponse.cofigTypesetJsonArray: "+cofigTypesetJsonArray);
			
			if (cofigTypesetJsonArray.size() >0)
				otpTypesName = cofigTypesetJsonArray.get(0).getAsJsonObject().get("TypesName").getAsString();
			else 
				otpTypesName ="";
			
			if (! paymentHeaderJson.get("PGPaymentGUID").isJsonNull())
				pgHeaderGUID = paymentHeaderJson.get("PGPaymentGUID").getAsString();
			
			if (! paymentHeaderJson.get("TrackID").isJsonNull())
				trackId = paymentHeaderJson.get("TrackID").getAsString();
			
			if (! paymentHeaderJson.get("ClearingDocCompanyCodeID").isJsonNull())
				ClearingDocCompanyCodeID = paymentHeaderJson.get("ClearingDocCompanyCodeID").getAsString();
			else
				ClearingDocCompanyCodeID ="";

			buildHeaderObj.add("d", paymentHeaderJson);
			if(debug)
				response.getWriter().println("buildPutPymntTxnResponse.paymentHeaderJson: "+buildHeaderObj);
			
			postPymntResponseWSResponse = txnPostClientWS.callpymntTxnPost(request, response, aggregatorID, pymntTxnResponseMap, debug);
			if(debug)
				response.getWriter().println("postPymntResponseWSResponse: "+postPymntResponseWSResponse);
			
			statusWS = (String) postPymntResponseWSResponse.get("Status");
			
			if (statusWS.equalsIgnoreCase("054"))
			{
				responseUI.addProperty("ErrorCode", postPymntResponseWSResponse.get("Status"));
				responseUI.addProperty("ErrorMessage", postPymntResponseWSResponse.get("Message"));
				
			} else {

				pgTxnStatusID = "000100";
				pgTxnID = (String) postPymntResponseWSResponse.get("PGTransactionID");
				pgTxnMsg = (String) postPymntResponseWSResponse.get("Message");
				pgBankRef = (String) postPymntResponseWSResponse.get("PGBankRefID");
				pgTxnErrorCodeID = (String) postPymntResponseWSResponse.get("PGTxnErrorCode");
				
				pgTxnResponse = (String) postPymntResponseWSResponse.get("Response");
				
				JsonObject checkTypeSetJson = new JsonObject();
				String typeSet = "PYOTPE"; // for otp is wrong
				if (statusWS.equalsIgnoreCase("000001"))
				{
					errorCode ="051";
					pgTxnMsg = pgTxnMsg.toUpperCase();
					if (pgTxnMsg.equalsIgnoreCase("PENDING FOR PROCESSING"))
					{
						pymtSts = "000210";
						pgTxnStatusID = "000106";
						
					} else {
						pymtSts = "000200";
					}
					if ( ! pgCatID.equalsIgnoreCase("000006")) {
						
						if ( ! processSequence.equalsIgnoreCase("02"))
							pgPymntStsID ="000300";
						else
							pgPymntStsID ="000100";
						
					} else
						pgPymntStsID ="000000";

					appendSuccess = appendSuccess.replaceAll("ERROR_CODE", errorCode);
					appendSuccess = appendSuccess.replaceAll("TXN_ID", pgTxnID);
					responseUI = gson.fromJson(appendSuccess, JsonObject.class);
					responseUI.addProperty("Status", "000001");
				}
				else
				{
					errorCode ="075";
					if (pgTxnMsg.equalsIgnoreCase(otpTypesName)) { // 
						
						pymtSts = "000120";
						pgTxnStatusID ="000030";
						
					} else {

						pgTxnStatusID = "000101";
						pymtSts ="000310";
						
					}
					if (pgCatID.equalsIgnoreCase("000003"))
					{
						if(processSequence.equalsIgnoreCase("02"))
							pgPymntStsID = "000200";
						else
							pgPymntStsID ="000100";
					} else if(pgCatID.equalsIgnoreCase("000006"))
					{
						pgPymntStsID ="000000";
					}
					else
					{
						if (processSequence.equalsIgnoreCase("02"))
							pgPymntStsID = "000400";
						else
							pgPymntStsID ="000310";
					}
//					appendSuccess = appendSuccess.replaceAll("ERROR_CODE", errorCode);
				}
				if(debug)
				{
					response.getWriter().println("buildPutPymntTxnResponse.pgHeaderGUID: "+pgHeaderGUID);
					response.getWriter().println("buildPutPymntTxnResponse.responseUI: "+responseUI);
					response.getWriter().println("buildPutPymntTxnResponse.pgTxnStatusID: "+pgTxnStatusID);
					response.getWriter().println("buildPutPymntTxnResponse.pymtSts: "+pymtSts);
					response.getWriter().println("buildPutPymntTxnResponse.pgPymntSts: "+pgPymntStsID);
					response.getWriter().println("buildPutPymntTxnResponse.pgTxnMsg: "+pgTxnMsg);
					response.getWriter().println("buildPutPymntTxnResponse.pgBankRef: "+pgBankRef);
					response.getWriter().println("buildPutPymntTxnResponse.pgTxnID: "+pgTxnID);
					response.getWriter().println("buildPutPymntTxnResponse.trackId: "+trackId);
					response.getWriter().println("buildPutPymntTxnResponse.pgTxnResponse: "+pgTxnResponse);
				}
				updateHttpResponse = updatePaymentsHeader(request, response, aggregatorID, oDataUrl, pgHeaderGUID, trackId, buildHeaderObj, pgTxnStatusID, pymtSts, pgPymntStsID, pgTxnMsg, pgBankRef, pgTxnID, pgTxnErrorCodeID, debug);
				if(debug)
					response.getWriter().println("buildPutPymntTxnResponse.updateHttpResponse: "+ updateHttpResponse);
				
				if ( updateHttpResponse.get("ErrorCode").getAsString().trim().length() == 0) {
					updateHttpResponse = new JsonObject();
					
					updateHttpResponse = updatePaymentsItems(request, response, aggregatorID, oDataUrl, pymtSts, pgPymntStsID, pgHeaderGUID, paymentItemJson, debug);
					if (debug)
						response.getWriter().println("buildPutPymntTxnResponse.updatePaymentsItems2: "+updateHttpResponse);
					
					responseUI.addProperty("ErrorCode", errorCode);
					responseUI.addProperty("ErrorMessage", pgTxnMsg);
				}
				else{
					responseUI.addProperty("ErrorCode", "E105");
					responseUI.addProperty("ErrorMessage", "Payment status failed");
				}
			}
			if(debug)
				response.getWriter().println("buildPutPymntTxnResponse.responseUI.final: "+responseUI);
		
			// Giving Response To UI
			if ( responseUI.has("Status") && responseUI.get("Status").getAsString().equalsIgnoreCase("000001"))
			{
				responseUI.remove("ErrorCode");
				responseUI.remove("Status");
				responseUI.remove("ErrorMessage");
				response.setStatus(HttpServletResponse.SC_NO_CONTENT);
				response.getWriter().println(new Gson().toJson(responseUI));
			}
			else
			{
				if (pgTxnMsg.equalsIgnoreCase(otpTypesName)) {
					
					response.setContentType("application/json");
					otpValidationFailedErrorFormat = otpValidationFailedErrorFormat.replaceAll("ERROR_MESSAGE", pgTxnResponse);
					JsonObject userPaymentsResponseToUI = new JsonParser().parse(otpValidationFailedErrorFormat).getAsJsonObject();
					response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					response.getWriter().println(userPaymentsResponseToUI);
					if(debug)
						response.getWriter().println("repaymnets.OTP.Failure Response.userPaymentsResponseToUI: "+userPaymentsResponseToUI);

				} else {

					response.setContentType("application/json");
					errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_CODE", "043");
					errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("TRACK_ID", trackId);
					errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERROR_MESSAGE", responseUI.get("ErrorMessage").getAsString());
					errorResFormatForPGPayments = errorResFormatForPGPayments.replaceAll("ERRORCODE", responseUI.get("ErrorCode").getAsString());
					JsonObject userPaymentsResponseToUI = new JsonParser().parse(errorResFormatForPGPayments).getAsJsonObject();
					response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					response.getWriter().println(userPaymentsResponseToUI);
					if(debug)
						response.getWriter().println("repaymnets.Failure Response.userPaymentsResponseToUI: "+userPaymentsResponseToUI);
				}
			}
			
		} catch (Exception e) {
			response.getWriter().print(e.getLocalizedMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
		}
		return responseUI;
	}
	
	public JsonArray insertIntoPaymentsItems(HttpServletRequest request, HttpServletResponse response, String aggregatorID, 
			String loginID, String oDataUrl ,JSONObject inputPayloadJson, String pgHeaderGuid, boolean debug) throws IOException
	{
		String createdBy="",createdAt="", executeURL ="",password="",userPass="", userName="", pgItemGuid="";
		long createdOnLong = 0; 
		JSONObject insertPymntItemsJson = null;
		JsonObject insertResponse = null;
		JSONObject inputJson = null;
		JsonArray insertItemsArray = new JsonArray();
		try {
			
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("insertIntoPaymentsItems.userName: "+userName);
				response.getWriter().println("insertIntoPaymentsItems.password: "+password);
				response.getWriter().println("insertIntoPaymentsItems.userPass: "+userPass);
				response.getWriter().println("insertIntoPaymentsItems.inputPayloadJson: "+inputPayloadJson);
//				response.getWriter().println("insertIntoPaymentsItems.inputJson: "+inputJson);
			}
			JsonObject childItemObj = null;
			for (int i = 0; i < inputPayloadJson.getJSONArray("PGPaymentItemDetails").length() ; i++) {
				
				inputJson = inputPayloadJson.getJSONArray("PGPaymentItemDetails").getJSONObject(i);
				insertPymntItemsJson = new JSONObject();
				childItemObj = new JsonObject();
				insertResponse = new JsonObject();
				
				createdBy = getUserPrincipal(request, "name", response);
				createdAt = getCreatedAtTime();
				createdOnLong = getCreatedOnDate();
				pgItemGuid = inputJson.getString("PGPaymentItemGUID"); //generateGUID(36);
				if (debug)						
					response.getWriter().println("insertIntoPaymentsItems.pgItemGuid: "+pgItemGuid);
			
				insertPymntItemsJson.accumulate("PGPaymentItemGUID", pgItemGuid);
				insertPymntItemsJson.accumulate("AggregatorID", aggregatorID);
				insertPymntItemsJson.accumulate("PGPaymentGUID", pgHeaderGuid);
				
				if (! inputJson.isNull("InvoiceTypeID") && inputJson.getString("InvoiceTypeID").trim().length() > 0)
					insertPymntItemsJson.accumulate("InvoiceTypeID", inputJson.getString("InvoiceTypeID"));
				else 
					insertPymntItemsJson.accumulate("InvoiceTypeID", "");
				
				if (! inputJson.isNull("InvoiceNo") && inputJson.getString("InvoiceNo").trim().length() > 0)
					insertPymntItemsJson.accumulate("InvoiceNo", inputJson.getString("InvoiceNo"));
				else 
					insertPymntItemsJson.accumulate("InvoiceNo", "");
				
				if (! inputJson.isNull("InvoiceDate") && inputJson.getString("InvoiceDate").trim().length() > 0)
					insertPymntItemsJson.accumulate("InvoiceDate", inputJson.getString("InvoiceDate"));
				else 
					insertPymntItemsJson.accumulate("InvoiceDate", null);
				
				if (! inputJson.isNull("FiscalYear") && inputJson.getString("FiscalYear").trim().length() > 0)
					insertPymntItemsJson.accumulate("FiscalYear", inputJson.getString("FiscalYear"));
				else 
					insertPymntItemsJson.accumulate("FiscalYear", "");
				
				if (! inputJson.isNull("InvoiceAmount") && inputJson.getString("InvoiceAmount").trim().length() > 0)
					insertPymntItemsJson.accumulate("InvoiceAmount", inputJson.getString("InvoiceAmount"));
				else 
					insertPymntItemsJson.accumulate("InvoiceAmount", "0.00");
				
				if (! inputJson.isNull("PaymentAmount") && inputJson.getString("PaymentAmount").trim().length() > 0)
					insertPymntItemsJson.accumulate("PaymentAmount", inputJson.getString("PaymentAmount"));
				else 
					insertPymntItemsJson.accumulate("PaymentAmount", "0.00");
				
				if (! inputJson.isNull("Currency") && inputJson.getString("Currency").trim().length() > 0)
					insertPymntItemsJson.accumulate("Currency", inputJson.getString("Currency"));
				else 
					insertPymntItemsJson.accumulate("Currency", "");
				
				insertPymntItemsJson.accumulate("ChequeNo", "");
				insertPymntItemsJson.accumulate("ChequeDate", null);
				insertPymntItemsJson.accumulate("TaxCode", "");
				insertPymntItemsJson.accumulate("PGItemText", "");
				insertPymntItemsJson.accumulate("Source", "");
				
				if (! inputJson.isNull("PaymentPostingStatusID") && inputJson.getString("PaymentPostingStatusID").trim().length() > 0)
					insertPymntItemsJson.accumulate("PaymentPostingStatusID", inputJson.getString("PaymentPostingStatusID"));
				else 
					insertPymntItemsJson.accumulate("PaymentPostingStatusID", "");
				
				if (! inputJson.isNull("PaymentStatusID") && inputJson.getString("PaymentStatusID").trim().length() > 0)
					insertPymntItemsJson.accumulate("PaymentStatusID", inputJson.getString("PaymentStatusID"));
				else 
					insertPymntItemsJson.accumulate("PaymentStatusID", "");
				
				if (! inputJson.isNull("TDSAmount") && inputJson.getString("TDSAmount").trim().length() > 0)
					insertPymntItemsJson.accumulate("TDSAmount", inputJson.getString("TDSAmount"));
				else 
					insertPymntItemsJson.accumulate("TDSAmount", "0.00");
				
				if (! inputJson.isNull("TDSPercent") && inputJson.getString("TDSPercent").trim().length() > 0)
					insertPymntItemsJson.accumulate("TDSPercent", inputJson.getString("TDSPercent"));
				else 
					insertPymntItemsJson.accumulate("TDSPercent", "");
				
				if (! inputJson.isNull("EnteredAmt") && inputJson.getString("EnteredAmt").trim().length() > 0)
					insertPymntItemsJson.accumulate("EnteredAmt", inputJson.getString("EnteredAmt"));
				else 
					insertPymntItemsJson.accumulate("EnteredAmt", "0.00");
				
				insertPymntItemsJson.accumulate("CreatedBy", createdBy);
				insertPymntItemsJson.accumulate("CreatedAt", createdAt);
				insertPymntItemsJson.accumulate("CreatedOn", "/Date("+createdOnLong+")/");
				if (debug)
					response.getWriter().println("insertIntoPaymentsItems.insertPymntItemsJson( "+i+" ): "+insertPymntItemsJson);
				
				executeURL = oDataUrl+"PGPaymentItemDetails";
				if (debug)
					response.getWriter().println("insertIntoPaymentsItems.executeURL: "+executeURL);
				
				insertResponse = executePostURL(executeURL, userPass, response, insertPymntItemsJson, request, debug, "PCGWHANA");
				if (debug)
					response.getWriter().println("insertIntoPaymentsItems.insertResponse: "+insertResponse);
				
				childItemObj = insertResponse.getAsJsonObject("d");
				insertItemsArray.add(childItemObj);
			}
			/*JsonObject result = new JsonObject();
			for (int i = 0; i < insertItemsArray.size(); i++) {
				
				if(insertItemsArray.get(i).getAsJsonObject().has("error")){
					
					result.addProperty("ErrorCode", "001");
					result.addProperty("Message", "Insertion Failed in PGPaymentItemDetails");
					insertItemsArray.add(result);
					break;
//					return insertResponse;
				}else{
					result.addProperty("ErrorCode", "");
					result.addProperty("Message", "");
					insertItemsArray.add(result);
					break;
//					return insertResponse;
				}
			}*/
		} catch (Exception e) {
			response.getWriter().println(e.getLocalizedMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
//			insertResponse.addProperty("ErrorCode", "001");
//			insertResponse.addProperty("Message", "Reason: "+e.getLocalizedMessage());
		}
		return insertItemsArray;
	}
	
	public JsonObject buildPostPymntItemResponse(HttpServletRequest request, HttpServletResponse response, String pgPymntGuid, String loginId,
			JsonObject headerJsonObj, JSONObject inputPayload, boolean debug) throws IOException
	{
		String appendSuccess="";
		JsonObject headerChildIteamObj = new JsonObject();;
		JsonArray headerItemArray = new JsonArray();
		JsonArray itemBindingArray = new JsonArray();
		JsonObject buildItemJsonObj = null;
		JsonObject buildItemResultsdObj = new JsonObject();
		Gson gson = new Gson();
		try {
			
			headerItemArray = headerJsonObj.getAsJsonObject("d").getAsJsonArray("PGPaymentItemDetails");
			if(debug)
				response.getWriter().println("buildPostPymntItemResponse.headerChildIteamObj: "+headerItemArray);
			
			for (int i = 0; i < headerItemArray.size(); i++) {
				
				headerChildIteamObj = headerItemArray.get(i).getAsJsonObject();
				buildItemJsonObj = new JsonObject();
				
				appendSuccess = "{\"__metadata\":{\"id\":\"http://sserp:8000/sap/opu/odata/ARTEC/PCGW/PGPaymentItemDetails(guid'"+headerChildIteamObj.get("PGPaymentItemGUID").getAsString()+"')\","
						+ "\"uri\":\"http://sserp:8000/sap/opu/odata/ARTEC/PCGW/PGPaymentItemDetails(guid'"+headerChildIteamObj.get("PGPaymentItemGUID").getAsString()+"')\","
						+ "\"type\":\"ARTEC.PCGW.PGPaymentItemDetail\"}"
						+ ",\"PGPaymentItemGUID\":\""+headerChildIteamObj.get("PGPaymentItemGUID").getAsString()+"\""
						+ ",\"PGPaymentGUID\":\""+headerChildIteamObj.get("PGPaymentGUID").getAsString()+"\""
						+ ",\"LoginID\":\""+loginId+"\""
						+ ",\"InvoiceTypeID\":\""+headerChildIteamObj.get("InvoiceTypeID").getAsString()+"\""
						+ ",\"InvoiceNo\":\""+headerChildIteamObj.get("InvoiceNo").getAsString()+"\""
						+ ",\"InvoiceDate\":\""+headerChildIteamObj.get("InvoiceDate").getAsString()+"\""
						+ ",\"FiscalYear\":\""+headerChildIteamObj.get("FiscalYear").getAsString()+"\""
						+ ",\"InvoiceAmount\":\""+headerChildIteamObj.get("InvoiceAmount").getAsString()+"\""
						+ ",\"PaymentAmount\":\""+headerChildIteamObj.get("PaymentAmount").getAsString()+"\""
						+ ",\"Currency\":\""+headerChildIteamObj.get("Currency").getAsString()+"\""
						+ ",\"ChequeNo\":\""+headerChildIteamObj.get("ChequeNo").getAsString()+"\""
						+ ",\"PaymentStatusID\":\""+headerChildIteamObj.get("PaymentStatusID").getAsString()+"\""
						+ ",\"PaymnetPostingStatusID\":\""+headerChildIteamObj.get("PaymentPostingStatusID").getAsString()+"\""
						+ ",\"TDSAmount\":\""+headerChildIteamObj.get("TDSAmount").getAsString()+"\""
						+ ",\"TDSPercent\":\""+headerChildIteamObj.get("TDSPercent").getAsString()+"\""
						+ ",\"TaxCode\":\""+headerChildIteamObj.get("TaxCode").getAsString()+"\""
						+ ",\"PGItemText\":\""+headerChildIteamObj.get("PGItemText").getAsString()+"\""
						+ ",\"Text\":\"\""
						+ ",\"Division\":\"\""
						+ ",\"PaymnetStatusDesc\":\"\"" // empty values
						+ ",\"PaymentPostingStatusDesc\":\"\""// empty values
						+ ",\"EnteredAmt\":\""+headerJsonObj.getAsJsonObject("d").get("EnteredAmt").getAsString()+"\"" //header
						+ ",\"InvoiceTYpeDesc\":\""+inputPayload.getJSONArray("PGPaymentItemDetails").getJSONObject(0).getString("InvoiceTYpeDesc")+"\""//Payload
//							+ ",\"InvoiceTYpeDesc\":\"\""
						+ ",\"WCTAmount\":\""+inputPayload.getJSONArray("PGPaymentItemDetails").getJSONObject(0).getString("WCTAmount")+"\""//Payload
						+ ",\"DeductionAmount\":\""+inputPayload.getJSONArray("PGPaymentItemDetails").getJSONObject(0).getString("DeductionAmount")+"\""//Payload
						+ ",\"DeductionReason\":\""+inputPayload.getJSONArray("PGPaymentItemDetails").getJSONObject(0).getString("DeductionReason")+"\"}";//Payload
				
				buildItemJsonObj = gson.fromJson(appendSuccess, JsonObject.class);
//				if(debug)
//					response.getWriter().println("buildPostPymntItemResponse.buildItemJsonObj1: "+buildItemJsonObj);
				
//				buildItemChildObj = buildItemJsonObj.getAsJsonArray("results").get(0).getAsJsonObject();
				
				if ( ! headerChildIteamObj.get("ChequeDate").isJsonNull())
					buildItemJsonObj.addProperty("ChequeDate", headerChildIteamObj.get("ChequeDate").getAsString());
				else
					buildItemJsonObj.add("ChequeDate", null);
				
				if ( ! headerChildIteamObj.get("CreatedOn").isJsonNull())
					buildItemJsonObj.addProperty("CreatedOn", headerChildIteamObj.get("CreatedOn").getAsString());
				else
					buildItemJsonObj.add("CreatedOn", null);
				
				buildItemJsonObj.addProperty("CreatedBy", headerChildIteamObj.get("CreatedBy").getAsString());
				
				if ( ! headerChildIteamObj.get("CreatedAt").isJsonNull())
					buildItemJsonObj.addProperty("CreatedAt", headerChildIteamObj.get("CreatedAt").getAsString());
				else
					buildItemJsonObj.add("CreatedAt", null);
				
				if ( ! headerChildIteamObj.get("ChangedOn").isJsonNull())
					buildItemJsonObj.addProperty("ChangedOn", headerChildIteamObj.get("ChangedOn").getAsString());
				else
					buildItemJsonObj.add("ChangedOn", null);
				
				if ( ! headerChildIteamObj.get("ChangedBy").isJsonNull())
					buildItemJsonObj.addProperty("ChangedBy", headerChildIteamObj.get("ChangedBy").getAsString());
				else
					buildItemJsonObj.addProperty("ChangedBy", "");
				
				if ( ! headerChildIteamObj.get("ChangedAt").isJsonNull())
					buildItemJsonObj.addProperty("ChangedAt", headerChildIteamObj.get("ChangedAt").getAsString());
				else
					buildItemJsonObj.add("ChangedAt", null);
				
				if ( ! headerChildIteamObj.get("InvoiceDate").isJsonNull())
					buildItemJsonObj.addProperty("InvoiceDate", headerChildIteamObj.get("InvoiceDate").getAsString());
				else
					buildItemJsonObj.add("InvoiceDate", null);
				
				itemBindingArray.add(buildItemJsonObj);
//				if(debug)
//					response.getWriter().println("buildPostPymntItemResponse.itemBindingArray1: "+itemBindingArray);
				
			}
			buildItemResultsdObj.add("results", itemBindingArray);
			if(debug){
				response.getWriter().println("buildPostPymntItemResponse.itemBindingArray: "+itemBindingArray);
				response.getWriter().println("buildPostPymntItemResponse.buildItemResultsdObj: "+buildItemResultsdObj);
			}
		}
		catch (Exception e) {
			response.getWriter().print(e.getLocalizedMessage());
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
//			buildItemJsonObj.addProperty("ErrorCode", "001");
//			buildItemJsonObj.addProperty("ErrorMessage", e.getLocalizedMessage());
//			return buildItemJsonObj;
		}
		return buildItemResultsdObj;
	}
	
	public JsonObject updatePaymentsItems(HttpServletRequest request, HttpServletResponse response, String aggregatorID, String oDataUrl ,String pymtSts, String pgPymntSts, String pgHeaderGuid,
			JsonObject updateItemsJson, boolean debug) throws IOException
	{
//				JSONObject updatePymntHeaderJson = new JSONObject();
//				return updateHeaderJson;
		
		String changedBy="",changedAt="", executeURL ="",password="",userPass="", userName="", pgItemGUID="";
		long changedOnLong = 0; 
		JSONObject updatePymntItemJson = new JSONObject();
		JsonObject updateResponse = new JsonObject();
		JsonArray childItemsJsonArray = new JsonArray();
		JsonObject childItemsObj = null;
		try {
			childItemsJsonArray = updateItemsJson.getAsJsonObject("d").getAsJsonArray("results");
			
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			changedBy = getUserPrincipal(request, "name", response);
			changedAt = getCreatedAtTime();
			changedOnLong = getCreatedOnDate();
			if(debug){
				response.getWriter().println("updatePaymentsItems.childHeaderObj: "+childItemsJsonArray);
				response.getWriter().println("updatePaymentsItems.userName: "+userName);
				response.getWriter().println("updatePaymentsItems.password: "+password);
				response.getWriter().println("updatePaymentsItems.changedBy: "+changedBy);
				response.getWriter().println("updatePaymentsItems.changedAt: "+changedAt);
				response.getWriter().println("updatePaymentsItems.changedOnLong: "+changedOnLong);
			}
			
			for (int i = 0; i < childItemsJsonArray.size() ; i++) {
			
				childItemsObj = new JsonObject();
				childItemsObj = childItemsJsonArray.get(i).getAsJsonObject();
				pgItemGUID = childItemsObj.get("PGPaymentItemGUID").getAsString();
				
				updatePymntItemJson.accumulate("AggregatorID", aggregatorID);
				updatePymntItemJson.accumulate("PaymentStatusID", pymtSts);
				updatePymntItemJson.accumulate("PaymentPostingStatusID", pgPymntSts);
				updatePymntItemJson.accumulate("PGPaymentGUID", pgHeaderGuid);
				
				if (! childItemsObj.get("InvoiceTypeID").isJsonNull() && childItemsObj.get("InvoiceTypeID").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("InvoiceTypeID", childItemsObj.get("InvoiceTypeID").getAsString());
				else 
					updatePymntItemJson.accumulate("InvoiceTypeID", "");

				if (! childItemsObj.get("InvoiceNo").isJsonNull() && childItemsObj.get("InvoiceNo").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("InvoiceNo", childItemsObj.get("InvoiceNo").getAsString());
				else 
					updatePymntItemJson.accumulate("InvoiceNo", "");
				
				if (! childItemsObj.get("InvoiceDate").isJsonNull() && childItemsObj.get("InvoiceDate").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("InvoiceDate", childItemsObj.get("InvoiceDate").getAsString());
				else 
					updatePymntItemJson.accumulate("InvoiceDate", null);
				
				if (! childItemsObj.get("FiscalYear").isJsonNull() && childItemsObj.get("FiscalYear").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("FiscalYear", childItemsObj.get("FiscalYear").getAsString());
				else 
					updatePymntItemJson.accumulate("FiscalYear", "");
				
				if (! childItemsObj.get("InvoiceAmount").isJsonNull() && childItemsObj.get("InvoiceAmount").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("InvoiceAmount", childItemsObj.get("InvoiceAmount").getAsString());
				else 
					updatePymntItemJson.accumulate("InvoiceAmount", "0.00");
				
				if (! childItemsObj.get("PaymentAmount").isJsonNull() && childItemsObj.get("PaymentAmount").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("PaymentAmount", childItemsObj.get("PaymentAmount").getAsString());
				else 
					updatePymntItemJson.accumulate("PaymentAmount", "0.00");
				
				if (! childItemsObj.get("Currency").isJsonNull() && childItemsObj.get("Currency").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("Currency", childItemsObj.get("Currency").getAsString());
				else 
					updatePymntItemJson.accumulate("Currency", "");
				
				if (! childItemsObj.get("ChequeNo").isJsonNull() && childItemsObj.get("ChequeNo").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("ChequeNo", childItemsObj.get("ChequeNo").getAsString());
				else 
					updatePymntItemJson.accumulate("ChequeNo", "");
				
				if (! childItemsObj.get("ChequeDate").isJsonNull() && childItemsObj.get("ChequeDate").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("ChequeDate", childItemsObj.get("ChequeDate").getAsString());
				else 
					updatePymntItemJson.accumulate("ChequeDate", null);
				
				if (! childItemsObj.get("TDSAmount").isJsonNull() && childItemsObj.get("TDSAmount").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("TDSAmount", childItemsObj.get("TDSAmount").getAsString());
				else 
					updatePymntItemJson.accumulate("TDSAmount", "0.00");
				
				if (! childItemsObj.get("TDSPercent").isJsonNull() && childItemsObj.get("TDSPercent").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("TDSPercent", childItemsObj.get("TDSPercent").getAsString());
				else 
					updatePymntItemJson.accumulate("TDSPercent", "0.00");
				
				if (! childItemsObj.get("TaxCode").isJsonNull() && childItemsObj.get("TaxCode").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("TaxCode", childItemsObj.get("TaxCode").getAsString());
				else 
					updatePymntItemJson.accumulate("TaxCode", "");
				
				if (! childItemsObj.get("PGItemText").isJsonNull() && childItemsObj.get("PGItemText").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("PGItemText", childItemsObj.get("PGItemText").getAsString());
				else 
					updatePymntItemJson.accumulate("PGItemText", "");
				
				if (! childItemsObj.get("EnteredAmt").isJsonNull() && childItemsObj.get("EnteredAmt").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("EnteredAmt", childItemsObj.get("EnteredAmt").getAsString());
				else 
					updatePymntItemJson.accumulate("EnteredAmt", "0.00");
				
				if (! childItemsObj.get("CreatedOn").isJsonNull() && childItemsObj.get("CreatedOn").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("CreatedOn", childItemsObj.get("CreatedOn").getAsString());
				else 
					updatePymntItemJson.accumulate("CreatedOn", null);
				
				if (! childItemsObj.get("CreatedAt").isJsonNull() && childItemsObj.get("CreatedAt").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("CreatedAt", childItemsObj.get("CreatedAt").getAsString());
				else 
					updatePymntItemJson.accumulate("CreatedAt", null);

				if (! childItemsObj.get("Source").isJsonNull() && childItemsObj.get("Source").getAsString().trim().length() > 0)
					updatePymntItemJson.accumulate("Source", childItemsObj.get("Source").getAsString());
				else 
					updatePymntItemJson.accumulate("Source", "");
				
				updatePymntItemJson.accumulate("CreatedBy", childItemsObj.get("CreatedBy").getAsString());
				updatePymntItemJson.accumulate("ChangedBy", changedBy);
				updatePymntItemJson.accumulate("ChangedAt", changedAt);
				updatePymntItemJson.accumulate("ChangedOn", "/Date("+changedOnLong+")/");
				
				if (debug)
					response.getWriter().println("updatePaymentsHeader.updatePymntItemJson ("+i+"): "+updatePymntItemJson);
				
				executeURL = oDataUrl+"PGPaymentItemDetails('"+pgItemGUID+"')";
				if (debug)
					response.getWriter().println("updatePaymentsHeader.executeURL: "+executeURL);
				
				updateResponse = executeUpdate(executeURL, userPass, response, updatePymntItemJson, request, debug, "PCGWHANA");
				if (debug)
					response.getWriter().println("updatePaymentsHeader.updateResponse: "+updateResponse);
			}
		/*	if(updateResponse.has("error")){
				updateResponse.addProperty("ErrorCode", "001");
				updateResponse.addProperty("ErrorMessage", "Updation Failed in PGPayments Header");
				return updateResponse;
			}else{
				updateResponse.addProperty("ErrorCode", "");
				updateResponse.addProperty("ErrorMessage", "");
				return updateResponse;
			}*/
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			updateResponse.addProperty("ErrorCode", "001");
			updateResponse.addProperty("ErrorMessage", e.getLocalizedMessage());
		}
		return updateResponse;
	}
	
	public JsonObject insertIntoUserLoginsDetails(HttpServletResponse response, HttpServletRequest request, Properties properties, String oDataUrl,  String aggregatorID, JSONObject inputPayload, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="", executeURL="", createdBy="", createdAt="";
		long createdOnLong =0;
		JSONObject insertPayload = new JSONObject();
		JsonObject userLoginHttpResponse = new JsonObject();
		try {
			
			userName = commonUtils.getODataDestinationProperties("User", "PYGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("insertUserLogins.userName: "+userName);
				response.getWriter().println("insertUserLogins.password: "+password);
				response.getWriter().println("insertUserLogins.userPass: "+userPass);
			}
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnLong = getCreatedOnDate();
			
			if (debug) {
				response.getWriter().println("insertUserLogins.createdBy: "+createdBy);
				response.getWriter().println("insertUserLogins.createdAt: "+createdAt);
				response.getWriter().println("insertUserLogins.createdOnLong: "+createdOnLong);
			}
			
			insertPayload.accumulate("AggregatorID", aggregatorID);
			
			insertPayload.accumulate("Application", inputPayload.getString("Application"));
			insertPayload.accumulate("LoginID", inputPayload.getString("LoginID"));
			insertPayload.accumulate("ERPLoginID", inputPayload.getString("ERPLoginID"));
			insertPayload.accumulate("RoleID", inputPayload.getString("RoleID"));
			insertPayload.accumulate("LoginName", inputPayload.getString("LoginName"));
			
			if ( ! inputPayload.isNull("IsActive"))
				insertPayload.accumulate("IsActive",inputPayload.getString("IsActive"));
			else 
				insertPayload.accumulate("IsActive","");
			
			if ( ! inputPayload.isNull("UserFunction1ID"))
				insertPayload.accumulate("UserFunction1ID",inputPayload.getString("UserFunction1ID"));
			else 
				insertPayload.accumulate("UserFunction1ID","");
			
			if ( ! inputPayload.isNull("UserFunction2ID"))
				insertPayload.accumulate("UserFunction2ID",inputPayload.getString("UserFunction2ID"));
			else 
				insertPayload.accumulate("UserFunction2ID","");
			
			insertPayload.accumulate("Pref1","");
			insertPayload.accumulate("Pref2","");
			insertPayload.accumulate("Pref3","");
			insertPayload.accumulate("Pref4",""); 
			insertPayload.accumulate("Pref5","");
			
			insertPayload.accumulate("CreatedBy", createdBy);
			insertPayload.accumulate("CreatedAt", createdAt);
			insertPayload.accumulate("CreatedOn", "/Date("+createdOnLong+")/");
			if (debug)
				response.getWriter().println("insertUserLogins.insertPayload: "+insertPayload);
			
			executeURL = oDataUrl+"UserLogins";
			if (debug)
				response.getWriter().println("insertUserLogins.executeURL: "+executeURL);
			
			userLoginHttpResponse = executePostURL(executeURL, userPass, response, insertPayload, request, debug, "PUGWHANA");
			if(debug)
				response.getWriter().println("insertUserLogins.userLoginHttpResponse: "+userLoginHttpResponse);
			
			if (userLoginHttpResponse.has("error")) {
				userLoginHttpResponse = new JsonObject();
				userLoginHttpResponse.addProperty("ErrorCode", "033");
				userLoginHttpResponse.addProperty("ErrorMsg", "UserLogin entry could not be created");
			}
			 
		} catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			userLoginHttpResponse = new JsonObject();
			userLoginHttpResponse.addProperty("ErrorCode", "001");
			userLoginHttpResponse.addProperty("ErrorMsg", e.getLocalizedMessage());
		}
		return userLoginHttpResponse;
	}
//	added
	public JsonObject insertIntoUserPartnerDetails(HttpServletResponse response, HttpServletRequest request, Properties properties, String oDataUrl,  String aggregatorID, JSONArray userPartnerpayLoadArray, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="", executeURL="", createdBy="", createdAt="",partnerID="", testRun="",loginID="",applicationID="", erpSystemID="";
		long createdOnLong =0;
		JSONObject insertPayload =null;
		JsonObject userPartnerHttpResponse = null;
		JsonObject masterUserPartnerJson = new JsonObject();
		
		JSONObject childObj =null;
		JsonArray userPartnerArray = new JsonArray();
		try {
			userName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("insertIntoUserPartnerDetails.userName: "+userName);
				response.getWriter().println("insertIntoUserPartnerDetails.password: "+password);
				response.getWriter().println("insertIntoUserPartnerDetails.userPass: "+userPass);
			}
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnLong = getCreatedOnDate();
			
			if (debug) {
				response.getWriter().println("insertIntoUserPartnerDetails.createdBy: "+createdBy);
				response.getWriter().println("insertIntoUserPartnerDetails.createdAt: "+createdAt);
				response.getWriter().println("insertIntoUserPartnerDetails.createdOnLong: "+createdOnLong);
			}
			
			for (int i = 0; i < userPartnerpayLoadArray.length(); i++) {
				
				testRun="";loginID=""; applicationID="";executeURL="";partnerID="";erpSystemID="";
				insertPayload= new JSONObject();
				userPartnerHttpResponse = new JsonObject();
				childObj = userPartnerpayLoadArray.getJSONObject(i);
				partnerID = childObj.getString("PartnerID");
				testRun = childObj.getString("TestRun");
				loginID = childObj.getString("LoginID");
				applicationID = childObj.getString("Application");
				erpSystemID = childObj.getString("ERPSystemID");
				
				if(debug)
				{
					response.getWriter().println("insertIntoUserPartnerDetails.partnerID: "+partnerID);
					response.getWriter().println("insertIntoUserPartnerDetails.loginID: "+loginID);
					response.getWriter().println("insertIntoUserPartnerDetails.applicationID: "+applicationID);
					response.getWriter().println("insertIntoUserPartnerDetails.erpSystemID: "+erpSystemID);
				}
				executeURL = oDataUrl+"UserPartners?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20PartnerID%20eq%20%27"+partnerID+"%27%20and%20ERPSystemID%20eq%20%27"+erpSystemID+"%27";
				executeURL = executeURL.replace(" ", "%20");
				if (debug)
					response.getWriter().println("insertIntoUserPartnerDetails.executeUrl: "+executeURL);
				
				JsonObject userPartnersResponse = executeURL(executeURL, userPass, response);
				if (debug)
					response.getWriter().println("insertIntoUserPartnerDetails.userPartnersResponse: "+userPartnersResponse);
				
				if (userPartnersResponse.getAsJsonObject("d").getAsJsonArray("results").size() == 0) {
					
					if ( ! testRun.equalsIgnoreCase("X")) {
						
						executeURL = oDataUrl+"UserPartners";
						if (debug)
							response.getWriter().println("insertIntoUserPartnerDetails.executeURL.1: "+executeURL);
						
						insertPayload.accumulate("AggregatorID", aggregatorID);
						
						insertPayload.accumulate("Application", applicationID);
						insertPayload.accumulate("LoginID", loginID);
						insertPayload.accumulate("ERPSystemID", erpSystemID);
						insertPayload.accumulate("PartnerID", partnerID);
						insertPayload.accumulate("PartnerName", childObj.getString("PartnerName"));
						
						if ( ! childObj.isNull("PartnerTypeID"))
							insertPayload.accumulate("PartnerTypeID",childObj.getString("PartnerTypeID"));
						else 
							insertPayload.accumulate("PartnerTypeID","");
						
						if ( ! childObj.isNull("IsActive"))
							insertPayload.accumulate("IsActive",childObj.getString("IsActive"));
						else 
							insertPayload.accumulate("IsActive","");
						
						if ( ! childObj.isNull("SourceReferenceID"))
							insertPayload.accumulate("SourceReferenceID",childObj.getString("SourceReferenceID"));
						else 
							insertPayload.accumulate("SourceReferenceID","");
						
						insertPayload.accumulate("Source","");
						insertPayload.accumulate("CreatedBy", createdBy);
						insertPayload.accumulate("CreatedAt", createdAt);
						insertPayload.accumulate("CreatedOn", "/Date("+createdOnLong+")/");
						if (debug)
							response.getWriter().println("insertIntoUserPartnerDetails.insertPayload: "+insertPayload);
						
						userPartnerHttpResponse = executePostURL(executeURL, userPass, response, insertPayload, request, debug, "PUGWHANA");
						if(debug)
							response.getWriter().println("insertIntoUserPartnerDetails.userPartnerHttpResponse: "+userPartnerHttpResponse);
						
						if (userPartnerHttpResponse.has("error")) {
							masterUserPartnerJson.addProperty("ErrorCode", "033");
							masterUserPartnerJson.addProperty("ErrorMsg", properties.getProperty("033") + partnerID);
							break;
						} 
					} else {
						masterUserPartnerJson.addProperty("ErrorCode", "033");
						masterUserPartnerJson.addProperty("ErrorMsg", properties.getProperty("033") + partnerID);
						break;
					}
					
				} else {
					masterUserPartnerJson.addProperty("ErrorCode", "080");
					masterUserPartnerJson.addProperty("ErrorMsg", properties.getProperty("080").replace("&", partnerID));
					break;
				}
				userPartnerArray.add(userPartnerHttpResponse.getAsJsonObject("d"));
			}
			masterUserPartnerJson.add("results", userPartnerArray);
			if(debug)
				response.getWriter().println("insertIntoUserPartnerDetails.masterUserPartnerJson: "+masterUserPartnerJson);
			
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			masterUserPartnerJson.addProperty("ErrorCode", "001");
			masterUserPartnerJson.addProperty("ErrorMsg", e.getLocalizedMessage());
		}
		return masterUserPartnerJson;
	}
//	added
	public JsonObject insertIntoUserAuthSetDetails(HttpServletResponse response, HttpServletRequest request, Properties properties, String oDataUrl,  String aggregatorID, JSONArray userAuthpayLoadArray, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="", executeURL="", createdBy="", createdAt="", authOrgTypeID="", userAuthtestRun="", authOrgValue="", applicationID="",loginID="";
		long createdOnLong =0;
		JSONObject insertPayload = new JSONObject();
		JsonObject userAuthSetHttpResponse = null;

		JsonArray userAuthSetArray = new JsonArray();
		JSONObject childObj = new JSONObject();
		String remSpecilAuthOrgValue="";
		JsonObject userAuthMasterArrayObj = new JsonObject();
		try {
			userName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("insertIntoUserAuthSetDetails.userName: "+userName);
				response.getWriter().println("insertIntoUserAuthSetDetails.password: "+password);
				response.getWriter().println("insertIntoUserAuthSetDetails.userPass: "+userPass);
			}
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnLong = getCreatedOnDate();
			
			if (debug) {
				response.getWriter().println("insertIntoUserAuthSetDetails.createdBy: "+createdBy);
				response.getWriter().println("insertIntoUserAuthSetDetails.createdAt: "+createdAt);
				response.getWriter().println("insertIntoUserAuthSetDetails.createdOnLong: "+createdOnLong);
			}
			
			
			for (int i = 0; i < userAuthpayLoadArray.length(); i++) {
				
				loginID=""; applicationID="";authOrgValue="";executeURL="";
				insertPayload = new JSONObject();
				userAuthSetHttpResponse = new JsonObject();
				childObj = userAuthpayLoadArray.getJSONObject(i);
				userAuthtestRun = childObj.getString("TestRun");

				loginID = childObj.getString("LoginID");
				applicationID = childObj.getString("Application");
				authOrgValue  = childObj.getString("AuthOrgValue");
				if(childObj.has("AuthOrgTypeID") && !childObj.isNull("AuthOrgTypeID") && !childObj.getString("AuthOrgTypeID").equalsIgnoreCase("")){
					authOrgTypeID=childObj.getString("AuthOrgTypeID");
				}
				if(debug)
				{
					response.getWriter().println("insertIntoUserAuthSetDetails.aggregatorID: "+aggregatorID);
					response.getWriter().println("insertIntoUserAuthSetDetails.loginID: "+loginID);
					response.getWriter().println("insertIntoUserAuthSetDetails.applicationID: "+applicationID);
					response.getWriter().println("insertIntoUserAuthSetDetails.authOrgValue: "+authOrgValue);
				}
				
				if ( ! childObj.isNull("AuthOrgTypeID")){
					authOrgTypeID = childObj.getString("AuthOrgTypeID");
					insertPayload.accumulate("AuthOrgTypeID", authOrgTypeID);
				}
				else 
					insertPayload.accumulate("AuthOrgTypeID","");
				
				if(authOrgValue.contains("&")){
					remSpecilAuthOrgValue=authOrgValue.replace("&", "%26");
				}else{
					remSpecilAuthOrgValue=authOrgValue;
				}
				if(!authOrgTypeID.equalsIgnoreCase("")){
					executeURL = oDataUrl+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20AuthOrgValue%20eq%20%27"+remSpecilAuthOrgValue+"%27%20and%20AuthOrgTypeID%20eq%20%27"+authOrgTypeID+"%27";
				}else{
					executeURL = oDataUrl+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20AuthOrgValue%20eq%20%27"+remSpecilAuthOrgValue+"%27";
				}
				executeURL= executeURL.replace(" ", "%20");
				if (debug)
					response.getWriter().println("insertIntoUserAuthSetDetails.executeURL: "+executeURL);
	
				JsonObject userAuthSetResponse = executeURL(executeURL, userPass, response);
				if (debug)
					response.getWriter().println("insertIntoUserAuthSetDetails.userAuthSetResponse: "+userAuthSetResponse);
				
				if (userAuthSetResponse.getAsJsonObject("d").getAsJsonArray("results").size() == 0) {
					
					if (! userAuthtestRun.equalsIgnoreCase("X")) {
						
						executeURL ="";
						executeURL = oDataUrl+"UserAuthSet";
						if (debug)
							response.getWriter().println("insertIntoUserAuthSetDetails.executeURL: "+executeURL);
						
						insertPayload.accumulate("AggregatorID", aggregatorID);
						
						insertPayload.accumulate("Application", applicationID);
						insertPayload.accumulate("LoginID", loginID);
						insertPayload.accumulate("ERPSystemID", childObj.getString("ERPSystemID"));
						insertPayload.accumulate("AuthOrgValue", authOrgValue);
						
						if ( ! childObj.isNull("AuthOrgValDsc"))
							insertPayload.accumulate("AuthOrgValDsc",childObj.getString("AuthOrgValDsc"));
						else 
							insertPayload.accumulate("AuthOrgValDsc","");
						
//					if ( ! childObj.isNull("SourceReferenceID"))
//						insertPayload.accumulate("SourceReferenceID",childObj.getString("SourceReferenceID"));
//					else 
//						insertPayload.accumulate("SourceReferenceID","");
						
						insertPayload.accumulate("Source","");
						insertPayload.accumulate("CreatedBy", createdBy);
						insertPayload.accumulate("CreatedAt", createdAt);
						insertPayload.accumulate("CreatedOn", "/Date("+createdOnLong+")/");
						if (debug)
							response.getWriter().println("insertIntoUserAuthSetDetails.insertPayload: "+insertPayload);
						
						userAuthSetHttpResponse = executePostURL(executeURL, userPass, response, insertPayload, request, debug, "PUGWHANA");
						if(debug)
							response.getWriter().println("insertIntoUserAuthSetDetails.userAuthSetHttpResponse: "+userAuthSetHttpResponse);
						
						if (userAuthSetHttpResponse.has("error")) {
							userAuthMasterArrayObj = new JsonObject();
							userAuthMasterArrayObj.addProperty("ErrorCode", "033");
							userAuthMasterArrayObj.addProperty("ErrorMsg", properties.getProperty("033")+authOrgTypeID+"");
							break;
						}
					} else {
						userAuthMasterArrayObj = new JsonObject();
						userAuthMasterArrayObj.addProperty("ErrorCode", "033");
						userAuthMasterArrayObj.addProperty("ErrorMsg", properties.getProperty("033")+authOrgTypeID+"");
						break;
					}
				}
				else{
					userAuthMasterArrayObj = new JsonObject();
					userAuthMasterArrayObj.addProperty("ErrorCode", "081");
					userAuthMasterArrayObj.addProperty("ErrorMsg", properties.getProperty("081").replace("&", authOrgValue));
					break;
				}
				
				userAuthSetArray.add(userAuthSetHttpResponse.getAsJsonObject("d"));
			}
			userAuthMasterArrayObj.add("results", userAuthSetArray);
			if(debug)
				response.getWriter().println("insertIntoUserAuthSetDetails.userAuthMasterArrayObj: "+ userAuthMasterArrayObj );
			 
		} catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			userAuthMasterArrayObj = new JsonObject();
			userAuthMasterArrayObj.addProperty("ErrorCode", "001");
			userAuthMasterArrayObj.addProperty("ErrorMsg", e.getLocalizedMessage());
		}
		return userAuthMasterArrayObj;
	}	
	
	public Map<String, String> getUserLoginsDetails(HttpServletResponse response, HttpServletRequest request, String oDataUrl,  String aggregatorID,String loginID, String applicationID, boolean debug) throws IOException
	{
		String oDataUserName="", oDatapassword="", userPass="", executeUrl="", errorCode="";
		CommonUtils commonUtils = new CommonUtils();
		JsonObject userLoginsResponse = new JsonObject();
		Map<String, String> userLoginResponseMap = new HashMap<String, String>();
		try {
			
			oDataUserName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			
			if(debug){
				response.getWriter().println("getUserLogins.oDataUserName: "+oDataUserName);
				response.getWriter().println("getUserLogins.oDatapassword: "+oDatapassword);
				response.getWriter().println("getUserLogins.userPass: "+userPass);
			}
			executeUrl = oDataUrl+"UserLogins?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27";
			if (debug)
				response.getWriter().println("getUserLogins.executeUrl: "+executeUrl);
			
			userLoginsResponse = executeURL(executeUrl, userPass, response);
			if (debug)
				response.getWriter().println("getUserLogins.userLoginsResponse: "+userLoginsResponse);
			
			if ( userLoginsResponse.getAsJsonObject("d").getAsJsonArray("results").size() > 0) {
				userLoginResponseMap.put("ErrorCode", "079");
				userLoginResponseMap.put("ErrorMsg", "UserLogin "+loginID+" entry already exists");
				
			} else {
				userLoginResponseMap.put("ErrorCode", "");
				userLoginResponseMap.put("ErrorMsg", "");
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			userLoginResponseMap.put("ErrorCode", "001");
			userLoginResponseMap.put("ErrorMsg", e.getLocalizedMessage());
		}
		return userLoginResponseMap;
	}
	//added
	public Map<String, String> getUserPartnersDetails(HttpServletResponse response, HttpServletRequest request, Properties properties, JSONArray inputPayload, String oDataUrl,  String aggregatorID,String loginID, String applicationID, boolean debug) throws IOException
	{
		String oDataUserName="", oDatapassword="", userPass="", executeUrl="", errorCode="", partnerID="", erpSystemID="";
		CommonUtils commonUtils = new CommonUtils();
		JsonObject userPartnersResponse = null;
		JSONObject childObject = new JSONObject();
		Map<String, String> userPartnersResponseMap = new HashMap<String, String>();
		try {
			
			oDataUserName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			
			if(debug){
				response.getWriter().println("getUserPartners.oDataUserName: "+oDataUserName);
				response.getWriter().println("getUserPartners.oDatapassword: "+oDatapassword);
				response.getWriter().println("getUserPartners.userPass: "+userPass);
				response.getWriter().println("getUserPartners.inputPayload: "+inputPayload);
			}
			
			userPartnersResponseMap.put("ErrorCode", "");
			userPartnersResponseMap.put("ErrorMsg", "");

			for (int i = 0; i < inputPayload.length() ; i++) {
				
				executeUrl="";partnerID="";
				userPartnersResponse = new JsonObject();
				childObject =  inputPayload.getJSONObject(i);
				
				partnerID = childObject.getString("PartnerID");
				if (debug)
					response.getWriter().println("getUserPartners.partnerID: "+partnerID);	
				
				erpSystemID = childObject.getString("ERPSystemID");
				if (debug)
					response.getWriter().println("getUserPartners.erpSystemID: "+erpSystemID);	
				
				executeUrl = oDataUrl+"UserPartners?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20PartnerID%20eq%20%27"+partnerID+"%27%20and%20ERPSystemID%20eq%20%27"+erpSystemID+"%27";
				executeUrl = executeUrl.replace(" ", "%20");
				if (debug)
					response.getWriter().println("getUserPartners.executeUrl: "+executeUrl);
				
				userPartnersResponse = executeURL(executeUrl, userPass, response);
				if (debug)
					response.getWriter().println("getUserPartners.userPartnersResponse ("+i+") : "+userPartnersResponse);
				
				if (userPartnersResponse.getAsJsonObject("d").getAsJsonArray("results").size() > 0) {
					userPartnersResponseMap.put("ErrorCode", "080");
					userPartnersResponseMap.put("ErrorMsg", properties.getProperty("080").replace("&", partnerID));
					break;
				}
			}
		} catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			userPartnersResponseMap.put("ErrorCode", "001");
			userPartnersResponseMap.put("ErrorMsg", e.getLocalizedMessage());
		}
		return userPartnersResponseMap;
	}
	
	//added
	public Map<String, String> getUserAuthorizationDetails(HttpServletResponse response, HttpServletRequest request, Properties properties, JSONArray payLoadJSONArray, String oDataUrl,  String aggregatorID,String loginID, String applicationID, boolean debug) throws IOException
	{
		String oDataUserName="", oDatapassword="", userPass="", executeUrl="", errorCode="", authOrgValue="";
		CommonUtils commonUtils = new CommonUtils();
		JsonObject userAuthsetResponse = null;
		JSONObject childObject = new JSONObject();
		String authOrgTypeID="";
		// need to revert back this changes
		//debug=true;
		Map<String, String> userAuthsetResponseMap = new HashMap<String, String>();
		try {
			
			oDataUserName = commonUtils.getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = commonUtils.getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			
			if(debug){
				response.getWriter().println("getUserAuthsetValidate.oDataUserName: "+oDataUserName);
				response.getWriter().println("getUserAuthsetValidate.oDatapassword: "+oDatapassword);
				response.getWriter().println("getUserAuthsetValidate.userPass: "+userPass);
			}
			userAuthsetResponseMap.put("ErrorCode", "");
			userAuthsetResponseMap.put("ErrorMsg", "");

			for (int i = 0; i < payLoadJSONArray.length() ; i++) {
				
				authOrgValue=""; executeUrl ="";
				userAuthsetResponse = new JsonObject();
				childObject = payLoadJSONArray.getJSONObject(i);
				
				authOrgValue = childObject.getString("AuthOrgValue");
				if(childObject.has("AuthOrgTypeID") && !childObject.isNull("AuthOrgTypeID") &&!childObject.getString("AuthOrgTypeID").equalsIgnoreCase("")){
					authOrgTypeID=childObject.getString("AuthOrgTypeID");
				}
				if (debug)
					response.getWriter().println("getUserAuthsetValidate.AuthOrgTypeID: "+authOrgValue);
				if(authOrgValue.contains("&")){
					authOrgValue=authOrgValue.replace("&", "%26");
				}
				if(!authOrgTypeID.equalsIgnoreCase("")){
					executeUrl = oDataUrl+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20AuthOrgValue%20eq%20%27"+authOrgValue+"%27%20and%20AuthOrgTypeID%20eq%20%27"+authOrgTypeID+"%27";
				}else{
					executeUrl = oDataUrl+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27%20and%20AuthOrgValue%20eq%20%27"+authOrgValue+"%27";
	
				}
				executeUrl= executeUrl.replace(" ", "%20");
				if (debug)
					response.getWriter().println("getUserAuthsetValidate.executeUrl: "+executeUrl);
	
				userAuthsetResponse = executeURL(executeUrl, userPass, response);
				if (debug)
					response.getWriter().println("getUserAuthsetValidate.userLoginsResponse ("+i+") : "+userAuthsetResponse);
				
				if (userAuthsetResponse.getAsJsonObject("d").getAsJsonArray("results").size() > 0) {
					userAuthsetResponseMap.put("ErrorCode", "081");
					userAuthsetResponseMap.put("ErrorMsg", properties.getProperty("081").replace("&", authOrgValue));
					break;
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			userAuthsetResponseMap.put("ErrorCode", "001");
			userAuthsetResponseMap.put("ErrorMsg", e.getLocalizedMessage());
		}
		return userAuthsetResponseMap;
	}
	
	public JsonObject validateUserLoginFields(HttpServletRequest request, HttpServletResponse response, Properties properties, JSONObject inputPayload, String loginID, boolean debug) throws IOException
	{
		String partnerID ="";
		JSONObject childObject = null;
		JsonObject validateResponse = new JsonObject();
		boolean isFieldMissing = false;
		try {
			
			try {
				if (debug) {
					response.getWriter().println("validateUserLoginFields.UserPartnersinputArray: "+inputPayload.getJSONArray("UserPartners"));
					response.getWriter().println("validateUserLoginFields.UserAuthSetinputArray: "+inputPayload.getJSONArray("UserAuthSet"));
				}
				
				for (int i = 0; i < inputPayload.getJSONArray("UserPartners").length() ; i++) {
					
					childObject = inputPayload.getJSONArray("UserPartners").getJSONObject(i);
//					if (debug)
//						response.getWriter().println("validateUserLoginFields.childObject: "+childObject);	
					
					if ( childObject.getString("LoginID").trim().length()== 0 ){
						isFieldMissing = true;
						break;
					}
					
					if ( childObject.getString("Application").trim().length() == 0) {
						isFieldMissing = true;
						break;
					}
					
					if ( childObject.getString("PartnerID").trim().length() == 0 ){
						isFieldMissing = true;
						break;
					}
					if ( childObject.getString("ERPSystemID").trim().length() == 0 ){
						isFieldMissing = true;
						break;
					}	
					if ( childObject.getString("PartnerName").trim().length() == 0 ){
						isFieldMissing = true;
						break;
					}
				}
			} catch (Exception e)
			{
				isFieldMissing = true;
			}
			if ( ! isFieldMissing) {
				
				try {
					for (int i = 0; i <inputPayload.getJSONArray("UserAuthSet").length(); i++) {
						
						childObject = new JSONObject();
						childObject = inputPayload.getJSONArray("UserAuthSet").getJSONObject(i);
						if ( childObject.getString("LoginID").trim().length()== 0 ){
							isFieldMissing = true;
							break;
						}
						
						if ( childObject.getString("Application").trim().length() == 0) {
							isFieldMissing = true;
							break;
						}
						
						if ( childObject.getString("AuthOrgValue").trim().length() == 0 ){
							isFieldMissing = true;
							break;
						}
						if ( childObject.getString("AuthOrgTypeID").trim().length() == 0 ){
							isFieldMissing = true;
							break;
						}
						/*if ( childObject.getString("AuthOrgTypeDesc").trim().length() == 0 ){
							isFieldMissing = true;
							break;
						}*/
						
						if ( childObject.getString("ERPSystemID").trim().length() == 0 ){
							isFieldMissing = true;
							break;
						}	
					}
				} catch (Exception e)
				{
					isFieldMissing = true;
				}
				if ( isFieldMissing) {
					
					validateResponse.addProperty("ErrorCode", "058");
					validateResponse.addProperty("ErrorMsg", properties.getProperty("058") +loginID+"");
				} else {
					validateResponse.addProperty("ErrorCode", "");
					validateResponse.addProperty("ErrorMsg", "");
				}
			} else {
				validateResponse.addProperty("ErrorCode", "058");
				validateResponse.addProperty("ErrorMsg", properties.getProperty("058") +loginID+"");
			}
		} 
		catch (Exception e) {
			if (debug) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			validateResponse.addProperty("ErrorCode", "001");
			validateResponse.addProperty("ErrorMsg", e.getLocalizedMessage());
		}
		return validateResponse;
	}
	//added
	public JsonObject buildUserAuthsetResponse(HttpServletRequest request, HttpServletResponse response, JSONObject userAuthJSON, String aggregatorID, String applicationID, String loginId, String oDataUrl, boolean debug) throws IOException
	{
		JsonObject responseJsonUI = new JsonObject();
		JsonArray buildItemResultsArray = new JsonArray();
		JsonObject buildItemJsonObj = null;
		Gson gson = new Gson();
		String appendMetaData ="" , authOrgTypeID="", authOrgTypeDesc="", authOrgValue="",authOrgValDsc="";
		try {
			if (debug) {
				response.getWriter().println("buildUserAuthsetResponse.userAuthJson: "+userAuthJSON);
			}
			JSONObject childUserAuthJson = new JSONObject();
			for (int i = 0; i < userAuthJSON.getJSONArray("UserAuthSet").length(); i++) {
				
				authOrgTypeID="";authOrgTypeDesc="";authOrgValue="";
				buildItemJsonObj = new JsonObject();
				childUserAuthJson = userAuthJSON.getJSONArray("UserAuthSet").getJSONObject(i);
				
				if ( ! childUserAuthJson.isNull("AuthOrgTypeID")) {
					authOrgTypeID = childUserAuthJson.getString("AuthOrgTypeID");
				}
				
				if ( ! childUserAuthJson.isNull("AuthOrgValue")) {
					authOrgValue = childUserAuthJson.getString("AuthOrgValue");
				}
				if ( ! childUserAuthJson.isNull("AuthOrgTypeDesc")) {
					authOrgTypeDesc = childUserAuthJson.getString("AuthOrgTypeDesc");
				}
				if ( ! childUserAuthJson.isNull("AuthOrgValDsc")) {
					authOrgValDsc = childUserAuthJson.getString("AuthOrgValDsc");
				}
				
				appendMetaData = "{\"__metadata\":{\"id\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserAuthSet(Application='"+applicationID+"',"
						+ "LoginID='"+loginId+"',ERPSystemID='"+childUserAuthJson.getString("ERPSystemID")+"',AuthOrgTypeID='"+authOrgTypeID+"',AuthOrgValue='"+authOrgValue+"')\","
						+ "\"uri\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserAuthSet(Application='"+applicationID+"',"
						+ "LoginID='"+loginId+"',"
						+ "ERPSystemID='"+childUserAuthJson.getString("ERPSystemID")+"',"
						+ "AuthOrgTypeID='"+childUserAuthJson.getString("AuthOrgTypeID")+"',"
						+ "AuthOrgValue='"+childUserAuthJson.getString("AuthOrgValue")+"')\","
						+ "\"type\":\"ARTEC.PUGW.UserAuth\"},"
						+ "\"Application\":\""+applicationID+"\","
						+ "\"LoginID\":\""+loginId+"\","
						+ "\"ERPSystemID\":\""+childUserAuthJson.getString("ERPSystemID")+"\","
						+ "\"AuthOrgTypeID\":\""+authOrgTypeID+"\","
						+ "\"AuthOrgValue\":\""+authOrgValue+"\","
						+ "\"AuthOrgTypeDesc\":\""+authOrgTypeDesc+"\","
						+ "\"AuthOrgValDsc\":\""+authOrgValDsc+"\","
						+ "\"CreatedOn\":\"\","
						+ "\"CreatedBy\":\"\","
						+ "\"CreatedAt\":\"PT00H00M00S\","
						+ "\"ChangedOn\":null,\"ChangedBy\":\"\","
						+ "\"ChangedAt\":\"PT00H00M00S\","
						+ "\"TestRun\":\""+childUserAuthJson.getString("TestRun")+"\"}";
				
				buildItemJsonObj = gson.fromJson(appendMetaData, JsonObject.class);
				buildItemResultsArray.add(buildItemJsonObj);
			}
			responseJsonUI.add("results", buildItemResultsArray);
			if (debug) 
				response.getWriter().println("buildUserAuthsetResponse.responseJsonUI: "+responseJsonUI);
			
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return responseJsonUI;
	}
	//added
	public JsonObject buildUserPartnerResponse(HttpServletRequest request, HttpServletResponse response, JSONObject userPartnerJSON, String aggregatorID, String applicationID, String loginId, String oDataUrl, boolean debug) throws IOException
	{
		JsonObject responseJsonUI = new JsonObject();
		JsonArray buildItemResultsArray = new JsonArray();
		JsonObject buildItemJsonObj = null;
		Gson gson = new Gson();
		String appendMetaData ="", partnerTypeDesc="", partnerTypeID="";
		try {
			if (debug) {
				response.getWriter().println("buildUserPartnerResponse.userPartnerJson: "+userPartnerJSON);
			}
			JSONObject childUserPartnerJson = new JSONObject();
			for (int i = 0; i < userPartnerJSON.getJSONArray("UserPartners").length(); i++) {
				
				partnerTypeID="";partnerTypeDesc="";
				buildItemJsonObj = new JsonObject();
				childUserPartnerJson = userPartnerJSON.getJSONArray("UserPartners").getJSONObject(i);
				
				if ( ! childUserPartnerJson.isNull("PartnerTypeID"))
					partnerTypeID = childUserPartnerJson.getString("PartnerTypeID");
				
				if ( ! childUserPartnerJson.isNull("PartnerTypeDesc"))
					partnerTypeDesc = childUserPartnerJson.getString("PartnerTypeDesc");
				
				appendMetaData = "{\"__metadata\":{\"id\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserPartners(Application='"+applicationID+"',"
						+ "LoginID='"+loginId+"',ERPSystemID='"+childUserPartnerJson.getString("ERPSystemID")+"',PartnerID='"+childUserPartnerJson.getString("PartnerID")+"')\","
						+ "\"uri\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserPartners(Application='"+applicationID+"',"
						+ "LoginID='"+loginId+"',ERPSystemID='"+childUserPartnerJson.getString("ERPSystemID")+"',PartnerID='"+childUserPartnerJson.getString("PartnerID")+"')\","
						+ "\"type\":\"ARTEC.PUGW.UserPartner\"},"
						+ "\"Application\":\""+applicationID+"\","
						+ "\"LoginID\":\""+loginId+"\","
						+ "\"ERPSystemID\":\""+childUserPartnerJson.getString("ERPSystemID")+"\","
						+ "\"PartnerID\":\""+childUserPartnerJson.getString("PartnerID")+"\","
						+ "\"PartnerTypeID\":\""+partnerTypeID+"\","
						+ "\"PartnerTypeDesc\":\""+partnerTypeDesc+"\","
						+ "\"PartnerName\":\""+childUserPartnerJson.getString("PartnerName")+"\","
						+ "\"IsActive\":\""+childUserPartnerJson.getString("IsActive")+"\","
						+ "\"CreatedOn\":\"null\","
						+ "\"CreatedBy\":\"\","
						+ "\"CreatedAt\":\"PT00H00M00S\","
						+ "\"ChangedOn\":null,\"ChangedBy\":\"\","
						+ "\"ChangedAt\":\"PT00H00M00S\","
						+ "\"TestRun\":\""+childUserPartnerJson.getString("TestRun")+"\"}";
				
				buildItemJsonObj = gson.fromJson(appendMetaData, JsonObject.class);
				buildItemResultsArray.add(buildItemJsonObj);
			}
			responseJsonUI.add("results", buildItemResultsArray);
			if (debug) 
				response.getWriter().println("buildUserPartnerResponse.responseJsonUI: "+responseJsonUI);
			
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			responseJsonUI.addProperty("ErrorCode", "001");
			responseJsonUI.addProperty("ErrorMsg", e.getMessage());
		}
		return responseJsonUI;
	}
	
	//added
	public JsonObject buildUserLoginResponse(HttpServletRequest request, HttpServletResponse response, String testRun, JSONObject inputPayload, String aggregatorID, String loginID, String applicationID, String oDataUrl, boolean debug) throws IOException
	{
		JsonObject responseJsonUI = new JsonObject();
		JsonArray buildItemResultsArray = new JsonArray();
		JsonObject buildItemJsonObj = null;
		Gson gson = new Gson();
		String appendMetaData ="";
		try {
			if (debug) {
				response.getWriter().println("buildUserLoginResponse.userAuthJson: "+inputPayload);
				response.getWriter().println("buildUserLoginResponse.testRun: "+testRun);
			}
			
			buildItemJsonObj = new JsonObject();
			
			appendMetaData = "{\"d\":{\"__metadata\":{\"id\":"
					+ "\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserLogins(Application='"+applicationID+"',"
					+ "LoginID='"+loginID+"')\","
					+ "\"uri\":\"https://flpnwc-z93y6qtneb.dispatcher.hana.ondemand.com/sap/fiori/ssflpplugin/sap/opu/odata/ARTEC/PUGW/UserLogins(Application='"+applicationID+"',LoginID='"+loginID+"')\","
					+ "\"type\":\"ARTEC.PUGW.UserLogin\"},"
					+ "\"Application\":\""+applicationID+"\","
					+ "\"LoginID\":\""+loginID+"\","
					+ "\"ERPLoginID\":\""+inputPayload.getString("ERPLoginID")+"\","
					+ "\"RoleID\":\""+inputPayload.getString("RoleID")+"\","
					+ "\"LoginName\":\""+inputPayload.getString("LoginName")+"\","
					+ "\"Pref5\":\"\","
					+ "\"Pref1\":\"\","
					+ "\"RoleCatDesc\":\"\","
//					+ "\"IsActive\":\""+inputPayload.getString("IsActive")+"\","
					+ "\"CreatedOn\":\"null\","
					+ "\"CreatedBy\":\"\","
					+ "\"CreatedAt\":\"\","
					+ "\"ChangedOn\":null,\"ChangedBy\":\"\","
					+ "\"ChangedAt\":\"\","
					+ "\"TestRun\":\""+testRun+"\","
					+ "\"Pref2\":\"\","
					+ "\"Pref3\":\"\","
					+ "\"Pref4\":\"\"}}";

			buildItemJsonObj = gson.fromJson(appendMetaData, JsonObject.class);
			
			if ( inputPayload.has("IsActive") &&! inputPayload.isNull("IsActive") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("IsActive", inputPayload.getString("IsActive"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("IsActive", "");
			
			if ( inputPayload.has("RoleCatID") && ! inputPayload.isNull("RoleCatID") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("RoleCatID", inputPayload.getString("RoleCatID"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("RoleCatID", "");
			
			if ( ! inputPayload.isNull("RoleDesc"))
				buildItemJsonObj.getAsJsonObject("d").addProperty("RoleDesc", inputPayload.getString("RoleDesc"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("RoleDesc", "");
			
			if ( ! inputPayload.isNull("UserFunction1ID") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction1ID", inputPayload.getString("UserFunction1ID"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction1ID", "");
			
			if ( ! inputPayload.isNull("UserFunction1Desc") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction1Desc", inputPayload.getString("UserFunction1Desc"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction1Desc", "");
			
			if ( ! inputPayload.isNull("UserFunction2ID") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction2ID", inputPayload.getString("UserFunction2ID"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction2ID", "");
			
			if ( ! inputPayload.isNull("UserFunction2Desc") )
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction2Desc", inputPayload.getString("UserFunction2Desc"));
			else
				buildItemJsonObj.getAsJsonObject("d").addProperty("UserFunction2Desc", "");
			
			if(debug)
				response.getWriter().println("buildUserLoginResponse.buildItemJsonObj:"+ buildItemJsonObj );
			
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return buildItemJsonObj;
	}	
	
	//added
	public JsonObject updateUserLogin(HttpServletRequest request, HttpServletResponse response, Properties properties, String testRun, JSONObject inputPayload, String aggregatorID, String loginID, String oDataURL, String errorResFormat, boolean debug) throws IOException
	{
		String appendUrl="", errorMsg="", errorCode="",payloadRequest="", applicationId="", changedBy="", changedAt="";	
		String oDataUserName="",oDatapassword="",userPass="",executeURL="",successUpdateResponse="";
		JsonObject userLoginUpdateResponse = new JsonObject();
		JsonObject userLoginGETResponse = new JsonObject();
		JSONObject updatePayload = new JSONObject();
		JsonObject childUserLoginJson = new JsonObject();
		JsonObject updateuserLoginResponse= new JsonObject();
		long changedOnLong=0;
		boolean isSuccess = true;
		
		successUpdateResponse ="{\"code\":\"/ARTEC/PC/041\",\"message\":\"User Login entry updated successfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
		
		try {
			 
			oDataUserName = getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			applicationId = inputPayload.getString("Application");
			if (debug) {
				response.getWriter().println("updateUserLogin.loginID: "+loginID);
				response.getWriter().println("updateUserLogin.oDataUserName: "+oDataUserName);
				response.getWriter().println("updateUserLogin.oDatapassword: "+oDatapassword);
				response.getWriter().println("updateUserLogin.userPass: "+userPass);
				response.getWriter().println("updateUserLogin.applicationId: "+applicationId);
			}
			
			changedBy = getUserPrincipal(request, "name", response);
			changedAt = getCreatedAtTime();
			changedOnLong = getCreatedOnDate();
			
//			if (testRun.equalsIgnoreCase("X")) {
//				
//				response.setStatus(HttpServletResponse.SC_NO_CONTENT);
//			} 
//			else 
//			{
			executeURL = oDataURL+"UserLogins?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationId+"%27";
			if(debug)
				response.getWriter().println("updateUserLogin.executeURL: "+executeURL);
			
			userLoginGETResponse = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("updateUserLogin.userLoginGETResponse: "+userLoginGETResponse);
			
			if ( userLoginGETResponse.getAsJsonObject("d").getAsJsonArray("results").size() > 0 ) {
				
				executeURL ="";
				childUserLoginJson = userLoginGETResponse.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject();
				if(debug)
					response.getWriter().println("updateUserLogin.childUserLoginJson: "+childUserLoginJson);
				
				updatePayload.accumulate("AggregatorID", aggregatorID);
				updatePayload.accumulate("LoginID", loginID);
				updatePayload.accumulate("Application", applicationId);
				
				if ( inputPayload.has("ERPLoginID") && ! inputPayload.isNull("ERPLoginID") )
					updatePayload.accumulate("ERPLoginID", inputPayload.getString("ERPLoginID"));
				else
					updatePayload.accumulate("ERPLoginID", "");
				
				if ( inputPayload.has("RoleID") && ! inputPayload.isNull("RoleID") )
					updatePayload.accumulate("RoleID", inputPayload.getString("RoleID"));
				else
					updatePayload.accumulate("RoleID", "");
				
				if ( inputPayload.has("LoginName") && ! inputPayload.isNull("LoginName") )
					updatePayload.accumulate("LoginName", inputPayload.getString("LoginName"));
				else
					updatePayload.accumulate("LoginName", "");
				
				if ( inputPayload.has("IsActive") && ! inputPayload.isNull("IsActive") )
					updatePayload.accumulate("IsActive", inputPayload.getString("IsActive"));
				else
					updatePayload.accumulate("IsActive", "");
				
				if ( inputPayload.has("UserFunction1ID") && ! inputPayload.isNull("UserFunction1ID") )
					updatePayload.accumulate("UserFunction1ID", inputPayload.getString("UserFunction1ID"));
				else
					updatePayload.accumulate("UserFunction1ID", "");
				
				if ( inputPayload.has("UserFunction2ID") && ! inputPayload.isNull("UserFunction2ID") )
					updatePayload.accumulate("UserFunction2ID", inputPayload.getString("UserFunction2ID"));
				else
					updatePayload.accumulate("UserFunction2ID", "");
				
				if ( inputPayload.has("Pref1") && ! inputPayload.isNull("Pref1") )
					updatePayload.accumulate("Pref1", inputPayload.getString("Pref1"));
				else
					updatePayload.accumulate("Pref1", "");
				
				if ( inputPayload.has("Pref2") && ! inputPayload.isNull("Pref2") )
					updatePayload.accumulate("Pref2", inputPayload.getString("Pref2"));
				else
					updatePayload.accumulate("Pref2", "");
				
				if ( inputPayload.has("Pref3") && ! inputPayload.isNull("Pref3") )
					updatePayload.accumulate("Pref3", inputPayload.getString("Pref3"));
				else
					updatePayload.accumulate("Pref3", "");
				
				if ( inputPayload.has("Pref4") && ! inputPayload.isNull("Pref4") )
					updatePayload.accumulate("Pref4", inputPayload.getString("Pref4"));
				else
					updatePayload.accumulate("Pref4", "");
				
				if ( inputPayload.has("Pref5") && ! inputPayload.isNull("Pref5") )
					updatePayload.accumulate("Pref5", inputPayload.getString("Pref5"));
				else
					updatePayload.accumulate("Pref5", "");
				
				if ( ! childUserLoginJson.get("CreatedBy").isJsonNull() )
					updatePayload.accumulate("CreatedBy", childUserLoginJson.get("CreatedBy").getAsString());
				else
					updatePayload.accumulate("CreatedBy", "");
				
				if ( ! childUserLoginJson.get("CreatedAt").isJsonNull() )
					updatePayload.accumulate("CreatedAt", childUserLoginJson.get("CreatedAt").getAsString());
				else
					updatePayload.accumulate("CreatedAt", JSONObject.NULL);
				
				if (  ! childUserLoginJson.get("CreatedOn").isJsonNull() )
					updatePayload.accumulate("CreatedOn", childUserLoginJson.get("CreatedOn").getAsString());
				else
					updatePayload.accumulate("CreatedOn", JSONObject.NULL);
				
				updatePayload.accumulate("ChangedBy", changedBy);
				updatePayload.accumulate("ChangedAt", changedAt);
				updatePayload.accumulate("ChangedOn", "/Date("+changedOnLong+")/");
				
				if ( childUserLoginJson.has("Source") && ! childUserLoginJson.get("Source").isJsonNull())
					updatePayload.accumulate("Source", childUserLoginJson.get("Source").getAsString());
				else
					updatePayload.accumulate("Source", "");
				
				if ( ! childUserLoginJson.get("SourceReferenceID").isJsonNull() )
					updatePayload.accumulate("SourceReferenceID", childUserLoginJson.get("SourceReferenceID").getAsString());
				else
					updatePayload.accumulate("SourceReferenceID", "");
				
				if(debug)
					response.getWriter().println("updateUserLogin.updatePayload: "+updatePayload);
				
				executeURL = oDataURL+"UserLogins(AggregatorID='"+aggregatorID+"',Application='"+applicationId+"',LoginID='"+loginID+"')";
				if(debug)
					response.getWriter().println("updateUserLogin.Update.executeURL: "+executeURL);
				
				userLoginUpdateResponse = executeUpdate(executeURL, userPass, response, updatePayload, request, debug, "PUGWHANA");
				if(debug)
					response.getWriter().println("updateUserLogin.userLoginUpdateResponse: "+userLoginUpdateResponse);
				
				if ( userLoginUpdateResponse.has("error") || userLoginUpdateResponse.get("ErrorCode").getAsString().trim().length() > 0 ) {
					
					response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					errorResFormat = errorResFormat.replaceAll("ERROR_MESSAGE", "034");
					errorResFormat = errorResFormat.replaceAll("ERROR_CODE", "Entry could not be updated");
					response.getWriter().println(errorResFormat);
				}
				else
				{
					response.setStatus(HttpServletResponse.SC_NO_CONTENT);
					response.getWriter().println(new Gson().toJson(successUpdateResponse));
				}
			} else {
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				errorResFormat = errorResFormat.replaceAll("ERROR_CODE", "026");
				errorResFormat = errorResFormat.replaceAll("ERROR_MESSAGE", properties.getProperty("026"));
				response.getWriter().println(errorResFormat);
			}
//			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			errorResFormat = errorResFormat.replaceAll("ERROR_MESSAGE", e.getMessage());
			errorResFormat = errorResFormat.replaceAll("ERROR_CODE", "001");
			response.getWriter().println(errorResFormat);
		}
		return updateuserLoginResponse;
	}
	
	//added
	public JsonObject updateUserPartner(HttpServletRequest request, HttpServletResponse response, Properties properties, String testRun, JSONArray inputPayloadArray, String aggregatorID, String loginID, String oDataURL, String errorResFormatForUserPartner, boolean debug) throws IOException
	{
		String errorMsg="", errorCode="",changedBy="", changedAt="";	
		String oDataUserName="",oDatapassword="",userPass="",executeURL="", successUpdateResponse="",partnerID="",applicationId="",erpSystemId="";
		JsonObject userPartnerUpdateResponse = new JsonObject();
		JsonObject userPartnerGETResponse = new JsonObject();
		JSONObject updatePayload = null;
		long changedOnLong=0;
		boolean isSuccess = true;
		JSONObject inputPayload = new JSONObject();
		
		successUpdateResponse ="{\"code\":\"/ARTEC/PC/029\",\"message\":\"User Partner mapping entry updated successfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
		try {
			
			oDataUserName = getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			if (debug) {
				response.getWriter().println("updateUserPartner.loginID: "+loginID);
				response.getWriter().println("updateUserPartner.oDataUserName: "+oDataUserName);
				response.getWriter().println("updateUserPartner.oDatapassword: "+oDatapassword);
				response.getWriter().println("updateUserPartner.userPass: "+userPass);
			}
			changedBy = getUserPrincipal(request, "name", response);
			changedAt = getCreatedAtTime();
			changedOnLong = getCreatedOnDate();
			
			for (int i = 0; i < inputPayloadArray.length(); i++) {
				
				updatePayload = new JSONObject();
				executeURL ="";
				inputPayload = inputPayloadArray.getJSONObject(i);

//				if (! inputPayload.isNull("TestRun"))
//					testRun = inputPayload.getString("TestRun");
//				if (testRun.equalsIgnoreCase(""))
//				{
				applicationId = inputPayload.getString("Application");
				partnerID=inputPayload.getString("PartnerID");
				
				executeURL = oDataURL+"UserPartners?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationId+"%27%20and%20PartnerID%20eq%20%27"+partnerID+"%27";
				executeURL = executeURL.replace(" ", "%20");
				if(debug)
					response.getWriter().println("updateUserPartner.executeURL: "+executeURL);
				
				userPartnerGETResponse = executeURL(executeURL, userPass, response);
				if(debug)
					response.getWriter().println("updateUserPartner.userPartnerGETResponse: "+userPartnerGETResponse);
				
				if ( userPartnerGETResponse.getAsJsonObject("d").getAsJsonArray("results").size() > 0) {
					
					executeURL ="";
					JsonObject childUserPartnerJson = new JsonObject();
					childUserPartnerJson = userPartnerGETResponse.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject();
					if(debug)
						response.getWriter().println("updateUserPartner.childUserPartnerJson: "+childUserPartnerJson);
					
					erpSystemId = inputPayload.getString("ERPSystemID");
					updatePayload.accumulate("AggregatorID", aggregatorID);
					updatePayload.accumulate("LoginID", loginID);
					updatePayload.accumulate("Application", applicationId);
					updatePayload.accumulate("PartnerID", partnerID);
					updatePayload.accumulate("ERPSystemID", erpSystemId);
					
					if (inputPayload.has("PartnerTypeID") && ! inputPayload.isNull("PartnerTypeID"))
						updatePayload.accumulate("PartnerTypeID", inputPayload.getString("PartnerTypeID"));
					else
						updatePayload.accumulate("PartnerTypeID", "");
					
					if (inputPayload.has("PartnerName") && ! inputPayload.isNull("PartnerName"))
						updatePayload.accumulate("PartnerName", inputPayload.getString("PartnerName"));
					else
						updatePayload.accumulate("PartnerName", "");
					
					if (inputPayload.has("IsActive") && ! inputPayload.isNull("IsActive"))
						updatePayload.accumulate("IsActive", inputPayload.getString("IsActive"));
					else
						updatePayload.accumulate("IsActive", "");
					//----
					if (! childUserPartnerJson.get("CreatedBy").isJsonNull())
						updatePayload.accumulate("CreatedBy", childUserPartnerJson.get("CreatedBy").getAsString());
					else
						updatePayload.accumulate("CreatedBy", "");
					
					if (! childUserPartnerJson.get("CreatedAt").isJsonNull())
						updatePayload.accumulate("CreatedAt", childUserPartnerJson.get("CreatedAt").getAsString());
					else
						updatePayload.accumulate("CreatedAt", JSONObject.NULL);
					
					if (! childUserPartnerJson.get("CreatedOn").isJsonNull())
						updatePayload.accumulate("CreatedOn", childUserPartnerJson.get("CreatedOn").getAsString());
					else
						updatePayload.accumulate("CreatedOn", JSONObject.NULL);
					
					updatePayload.accumulate("ChangedBy", changedBy);
					updatePayload.accumulate("ChangedAt", changedAt);
					updatePayload.accumulate("ChangedOn", "/Date("+changedOnLong+")/");
					
					if ( childUserPartnerJson.has("Source") && ! childUserPartnerJson.get("Source").isJsonNull() )
						updatePayload.accumulate("Source", childUserPartnerJson.get("Source").getAsString());
					else
						updatePayload.accumulate("Source", "");
					
					if (! childUserPartnerJson.get("SourceReferenceID").isJsonNull())
						updatePayload.accumulate("SourceReferenceID", childUserPartnerJson.get("SourceReferenceID").getAsString());
					else
						updatePayload.accumulate("SourceReferenceID", "");	
					
					if(debug)
						response.getWriter().println("updateUserPartner.updatePayload: "+updatePayload);
					
					//UserPartners(AggregatorID='AGGR0008',Application='CFA',LoginID='P2001708053',ERPSystemID='ID4CLNT800',PartnerID='0000100186')
					executeURL = oDataURL+"UserPartners(AggregatorID='"+aggregatorID+"',Application='"+applicationId+"',LoginID='"+loginID+"',ERPSystemID='"+erpSystemId+"',PartnerID='"+partnerID+"')";
					if(debug)
						response.getWriter().println("updateUserPartner.Update.executeURL: "+executeURL);
					
					userPartnerUpdateResponse = executeUpdate(executeURL, userPass, response, updatePayload, request, debug, "PUGWHANA");
					if(debug)
						response.getWriter().println("updateUserPartner.userPartnerUpdateResponse: "+userPartnerUpdateResponse);
					
					if ( userPartnerUpdateResponse.has("error") || userPartnerUpdateResponse.get("ErrorCode").getAsString().trim().length() > 0 ) {
						isSuccess = false;
						errorCode = "034";
						break;
					}
				}else
				{
					//Update Failure
					isSuccess = false;
					errorCode = "026";
					break;
				}
			}
			if ( ! isSuccess) {
				
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				errorResFormatForUserPartner = errorResFormatForUserPartner.replaceAll("ERROR_MESSAGE", properties.getProperty(errorCode));
				errorResFormatForUserPartner = errorResFormatForUserPartner.replaceAll("ERROR_CODE", errorCode);
				response.getWriter().println(errorResFormatForUserPartner);
			}
			else
			{
				response.setStatus(HttpServletResponse.SC_NO_CONTENT);
				response.getWriter().println(new Gson().toJson(successUpdateResponse));
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			errorResFormatForUserPartner = errorResFormatForUserPartner.replaceAll("ERROR_CODE", "001");
			errorResFormatForUserPartner = errorResFormatForUserPartner.replaceAll("ERROR_MESSAGE", e.getMessage());
			response.getWriter().println(errorResFormatForUserPartner);
		}
		return userPartnerUpdateResponse;
	}
	
	public JsonObject getHttpURLConnection(String executeURL,String userPass, JSONObject insertPayload, HttpServletResponse response, boolean debug){
		JsonObject httpPostResponse = new JsonObject();
		try{
			
			byte[] encodedByte = Base64.getEncoder().encode(userPass.getBytes());
			String encodedCredString = new String(encodedByte);
			

			URL url = new URL(executeURL);
			HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

			con.setRequestMethod("POST");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("charset", "utf-8");
			con.setRequestProperty("Content-Length",
					String.valueOf(insertPayload.toString().getBytes("UTF-8").length));
			con.setRequestProperty("Accept", "application/json");
			con.setDoOutput(true);
			con.setDoInput(true);

			String basicAuth = "Basic "+ Base64.getEncoder().encodeToString(userPass.getBytes());
			con.setRequestProperty("Authorization", basicAuth);
			con.connect();

			OutputStream os = con.getOutputStream();
			OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
			osw.write(insertPayload.toString());
			osw.flush();
			osw.close();

			StringBuffer sb = new StringBuffer();
			BufferedReader br = new BufferedReader(
					new InputStreamReader(con.getInputStream(), "utf-8"));
			String line = null;
			while ((line = br.readLine()) != null) {
				sb.append(line + "\n");
			}
			br.close();

			if(debug)
				response.getWriter().println("getHttpURLConnection response sb: " + sb.toString());

//			cpiResponse = sb.toString();
			
			
			JsonParser parser = new JsonParser();
			httpPostResponse = (JsonObject)parser.parse(sb.toString());
			if (debug) {
				response.getWriter().println("getHttpURLConnection.httpPostResponse: "+httpPostResponse);
			}
			
			

		}catch (Exception e) {
//			applicationNo = "";
			httpPostResponse.addProperty("Error", "001");
		}
		return httpPostResponse;
	}
	
	public JsonObject executeODataGet(String executeURL, String userPass, HttpServletResponse response, boolean debug) throws IOException{
		BufferedReader in =null;
		JsonObject jsonObj = null;
		String Data = "";
		try{
			if(debug){
				response.getWriter().println("executeODataGet.executeURL: "+executeURL);
				response.getWriter().println("executeODataGet.userPass: "+userPass);
			}

			HttpClient client = HttpClients.createDefault();
			HttpGet getRequest = new HttpGet(executeURL);
			getRequest.setHeader("Content-Type", "application/json");
			getRequest.setHeader("Accept", "application/json");
			getRequest.setHeader("Authorization","Basic "+Base64.getEncoder().encodeToString(userPass.getBytes()));

			HttpResponse httpPostResponse = client.execute(getRequest);
			HttpEntity countEntity = httpPostResponse.getEntity();
			
			int responseCode = httpPostResponse.getStatusLine().getStatusCode();
			if(debug)
				response.getWriter().println("responseCode: "+responseCode);
			
			Data = EntityUtils.toString(countEntity);
			JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(Data.toString());
			if(debug)
				response.getWriter().println("jsonObj: "+ Data);

		}catch (Exception e) {
//			response.getWriter().println("executeURL.Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeURL.Full Stack Trace: "+buffer.toString());
		}finally{
			if(debug)
				response.getWriter().println("jsonObj: "+ Data);
			return jsonObj;
		}
	}
	
	public JsonObject getUserPartnerTypes(HttpServletResponse response, String loginID, String aggregatorID, boolean debug) throws IOException{
		JsonObject userPartnerJsonrObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		String oDataUrl="", userName="", password="", userPass="", executeURL="";
		try{
			oDataUrl = getODataDestinationProperties("URL", "PUGWHANA");
			userName = getODataDestinationProperties("User", "PUGWHANA");
			password = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("getUserPartnerTypes.oDataUrl: "+oDataUrl);
				response.getWriter().println("getUserPartnerTypes.userName: "+userName);
				response.getWriter().println("getUserPartnerTypes.password: "+password);
				response.getWriter().println("getUserPartnerTypes.userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"UserPartners?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			if(debug)
				response.getWriter().println("getUserPartnerTypes.executeURL: "+executeURL);
			
			userPartnerJsonrObj = executeURL(executeURL, userPass, response);
			if(debug){
				response.getWriter().println("getUserPartnerTypes.userPartnerJsonrObj: "+userPartnerJsonrObj);
			}
			
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println(e.getMessage()+".CommonUtils.getUserPartnerTypes --> "+buffer.toString());
		}
		return userPartnerJsonrObj;
	}
//added
	public JsonObject getVendors(HttpServletResponse response, String loginID, String aggregatorID, boolean debug) throws IOException{
		JsonObject vendorsJsonObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		String oDataUrl="", userName="", password="", userPass="", executeURL="";
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			if (debug) {
				response.getWriter().println("getVendorsDetails.oDataUrl: "+oDataUrl);
				response.getWriter().println("getVendorsDetails.userName: "+userName);
				response.getWriter().println("getVendorsDetails.password: "+password);
				response.getWriter().println("getVendorsDetails.userPass: "+userPass);
			}
			
			executeURL = oDataUrl+"Vendors?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			if(debug)
				response.getWriter().println("getVendorsDetails.executeURL: "+executeURL);
			
			vendorsJsonObj = executeURL(executeURL, userPass, response);
			
			JsonObject results = vendorsJsonObj.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(dresults.size() > 0){
				vendorsJsonObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
				vendorsJsonObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
			}else{
				vendorsJsonObj.get("d").getAsJsonObject().addProperty("ErrorCode", "000");
				vendorsJsonObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "No Records Found in Entity Vendors for the Login ID");
			}
			
			if(debug){
				response.getWriter().println("getVendorsDetails.vendorsJsonObj: "+vendorsJsonObj);
			}
		}catch (Exception e) {
			// TODO: handle exception
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			errorResponseObj.addProperty("ErrorCode", "001");
			errorResponseObj.addProperty("ErrorMessage", e.getMessage()+".CommonUtils.getVendorsDetails --> "+buffer.toString());
			vendorsJsonObj.add("d", errorResponseObj);
		}
		
		return vendorsJsonObj;
	}	
	//added
	public String getGSTStateCodeForVendor(HttpServletResponse response, String cpGuid, String aggregatorID, String loginID, String oDataURL, boolean debug){
		String stateIDOfUser = "", gstStateCode = "";
		Map<String,String> typeSetValues = new HashMap<String,String>();
		try{
			if(debug){
				response.getWriter().println("getGSTStateCodeForVendor.stateIDOfUser: "+stateIDOfUser);
			}
			typeSetValues = getTypeValues(response, aggregatorID, debug);
			stateIDOfUser = getVendorState(response, cpGuid, aggregatorID, "Region", loginID, oDataURL, debug);
			
			for (String keyValue : typeSetValues.keySet()) {
				if(keyValue.equalsIgnoreCase(stateIDOfUser)){
					if(debug){
						response.getWriter().println("getGSTStateCodeForVendor.keyValue: "+keyValue);
						response.getWriter().println("getGSTStateCodeForVendor.stateIDOfUser: "+stateIDOfUser);
					}
					gstStateCode = typeSetValues.get(keyValue);
				}
			}
			
		}catch (Exception e) {
			gstStateCode = "001";
		}
		
		return gstStateCode;
	}
	//added
	public Map<String,String> getVendorDetails(HttpServletResponse response, String cpGuid, String aggregatorID, String loginID, String oDataURL, boolean debug) throws IOException{
		Map<String,String> dealerDetails = new HashMap<String,String>();
		String returnValue ="", executeURL = "", userPass="", userName="", password="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			if(debug){
				response.getWriter().println("userName: "+userName);
				response.getWriter().println("cpGuid: "+cpGuid);
				response.getWriter().println("aggregatorID: "+aggregatorID);
				response.getWriter().println("loginID: "+loginID);
			}
			
			executeURL = oDataURL+"Vendors?$filter=PartnerID%20eq%20%27"+cpGuid+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			if(debug)
				response.getWriter().println("executeURL: "+executeURL);
			httpJsonResult = executeURL(executeURL, userPass, response);
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			if(debug)
				response.getWriter().println("getVendorsEntry-results: "+results);
			JsonArray dresults = results.get("results").getAsJsonArray();
			if(debug)
				response.getWriter().println("getVendorsEntry-dresults: "+dresults);
			JsonObject vendorsJsonObj = null;
			if(debug)
				response.getWriter().println("getVendorsEntry-Size: "+dresults.size());
			for (int i = 0; i <= dresults.size() - 1; i++) {
				vendorsJsonObj = (JsonObject) dresults.get(i);
				if(debug)
					response.getWriter().println("vendorsJsonObj-get(i): "+vendorsJsonObj);
				dealerDetails.put("Status", "000001");
				dealerDetails.put("Message", "");
				if(vendorsJsonObj.get("Application").isJsonNull())
					dealerDetails.put("Application", "");
				else
					dealerDetails.put("Application", vendorsJsonObj.get("Application").getAsString());
				
				if(vendorsJsonObj.get("IsActive").isJsonNull())
					dealerDetails.put("IsActive", "");
				else
					dealerDetails.put("IsActive", vendorsJsonObj.get("IsActive").getAsString());
				
				if(vendorsJsonObj.get("LoginID").isJsonNull())
					dealerDetails.put("LoginID", "");
				else
					dealerDetails.put("LoginID", vendorsJsonObj.get("LoginID").getAsString());
				
				if(vendorsJsonObj.get("PartnerID").isJsonNull())
					dealerDetails.put("PartnerID", "");
				else
					dealerDetails.put("PartnerID", vendorsJsonObj.get("PartnerID").getAsString());
				
				if(vendorsJsonObj.get("Address1").isJsonNull())
					dealerDetails.put("Address1", "");
				else
					dealerDetails.put("Address1", vendorsJsonObj.get("Address1").getAsString());
				
				if(vendorsJsonObj.get("Address2").isJsonNull())
					dealerDetails.put("Address2", "");
				else
					dealerDetails.put("Address2", vendorsJsonObj.get("Address2").getAsString());
				
				if(vendorsJsonObj.get("Address3").isJsonNull())
					dealerDetails.put("Address3", "");
				else
					dealerDetails.put("Address3", vendorsJsonObj.get("Address3").getAsString());
				
				if(vendorsJsonObj.get("Address4").isJsonNull())
					dealerDetails.put("Address4", "");
				else
					dealerDetails.put("Address4", vendorsJsonObj.get("Address4").getAsString());
//						dealerDetails.put("Source", vendorsJsonObj.get("Source").isJsonNull());
				if(vendorsJsonObj.get("City").isJsonNull())
					dealerDetails.put("City", "");
				else
					dealerDetails.put("City", vendorsJsonObj.get("City").getAsString());
				
				if(vendorsJsonObj.get("CountryDesc").isJsonNull())
					dealerDetails.put("CountryDesc", "");
				else
					dealerDetails.put("CountryDesc", vendorsJsonObj.get("CountryDesc").getAsString());
				
				if(vendorsJsonObj.get("CountryID").isJsonNull())
					dealerDetails.put("CountryID", "");
				else
					dealerDetails.put("CountryID", vendorsJsonObj.get("CountryID").getAsString());
				
				if(vendorsJsonObj.get("DateOfIncorporation").isJsonNull())
					dealerDetails.put("DateOfIncorporation", "");
				else
					dealerDetails.put("DateOfIncorporation", vendorsJsonObj.get("DateOfIncorporation").getAsString());
				
				if(vendorsJsonObj.get("District").isJsonNull())
					dealerDetails.put("District", "");
				else
					dealerDetails.put("District", vendorsJsonObj.get("District").getAsString());
				
				if(vendorsJsonObj.get("EmailID").isJsonNull())
					dealerDetails.put("EmailID", "");
				else
					dealerDetails.put("EmailID", vendorsJsonObj.get("EmailID").getAsString());
				
				if(vendorsJsonObj.get("FaxExtn").isJsonNull())
					dealerDetails.put("FaxExtn", "");
				else
					dealerDetails.put("FaxExtn", vendorsJsonObj.get("FaxExtn").getAsString());
				
				if(vendorsJsonObj.get("Fax").isJsonNull())
					dealerDetails.put("Fax", "");
				else
					dealerDetails.put("Fax", vendorsJsonObj.get("Fax").getAsString());
				
				if(vendorsJsonObj.get("GSTIN").isJsonNull())
					dealerDetails.put("GSTIN", "");
				else
					dealerDetails.put("GSTIN", vendorsJsonObj.get("GSTIN").getAsString());
				
				if(vendorsJsonObj.get("ID").isJsonNull())
					dealerDetails.put("ID", "");
				else
					dealerDetails.put("ID", vendorsJsonObj.get("ID").getAsString());
				
				if(vendorsJsonObj.get("Mobile1").isJsonNull())
					dealerDetails.put("Mobile1", "");
				else
					dealerDetails.put("Mobile1", vendorsJsonObj.get("Mobile1").getAsString());
				
				if(vendorsJsonObj.get("Name").isJsonNull())
					dealerDetails.put("Name", "");
				else
					dealerDetails.put("Name", vendorsJsonObj.get("Name").getAsString());
				
				if(vendorsJsonObj.get("Name2").isJsonNull())
					dealerDetails.put("Name2", "");
				else
					dealerDetails.put("Name2", vendorsJsonObj.get("Name2").getAsString());
				
				if(vendorsJsonObj.get("Name3").isJsonNull())
					dealerDetails.put("Name3", "");
				else
					dealerDetails.put("Name3", vendorsJsonObj.get("Name3").getAsString());
				
				if(vendorsJsonObj.get("Name4").isJsonNull())
					dealerDetails.put("Name4", "");
				else
					dealerDetails.put("Name4", vendorsJsonObj.get("Name4").getAsString());
				
				if(vendorsJsonObj.get("PAN").isJsonNull())
					dealerDetails.put("PAN", "");
				else
					dealerDetails.put("PAN", vendorsJsonObj.get("PAN").getAsString());
				
				if(vendorsJsonObj.get("PostalCode").isJsonNull())
					dealerDetails.put("PostalCode", "");
				else
					dealerDetails.put("PostalCode", vendorsJsonObj.get("PostalCode").getAsString());
				
				if(vendorsJsonObj.get("CustomerNo").isJsonNull())
					dealerDetails.put("CustomerNo", "");
				else
					dealerDetails.put("CustomerNo", vendorsJsonObj.get("CustomerNo").getAsString());
				
				if(vendorsJsonObj.get("SupplyChainPartnerType").isJsonNull())
					dealerDetails.put("SupplyChainPartnerType", "");
				else
					dealerDetails.put("SupplyChainPartnerType", vendorsJsonObj.get("SupplyChainPartnerType").getAsString());
				
				
				if(vendorsJsonObj.get("RegionDesc").isJsonNull())
					dealerDetails.put("RegionDesc", "");
				else
					dealerDetails.put("RegionDesc", vendorsJsonObj.get("RegionDesc").getAsString());
				
				if(vendorsJsonObj.get("Region").isJsonNull())
					dealerDetails.put("Region", "");
				else
					dealerDetails.put("Region", vendorsJsonObj.get("Region").getAsString());
				
				if(vendorsJsonObj.get("LandlineExtn").isJsonNull())
					dealerDetails.put("LandlineExtn", "");
				else
					dealerDetails.put("LandlineExtn", vendorsJsonObj.get("LandlineExtn").getAsString());
				
				
				if(vendorsJsonObj.get("Landline").isJsonNull())
					dealerDetails.put("Landline", "");
				else
					dealerDetails.put("Landline", vendorsJsonObj.get("Landline").getAsString());
				
				
				if(vendorsJsonObj.get("LegalStatus").isJsonNull())
					dealerDetails.put("LegalStatus", "");
				else
					dealerDetails.put("LegalStatus", vendorsJsonObj.get("LegalStatus").getAsString());
				
				
				if(vendorsJsonObj.get("LegalStatusDesc").isJsonNull())
					dealerDetails.put("LegalStatusDesc", "");
				else
					dealerDetails.put("LegalStatusDesc", vendorsJsonObj.get("LegalStatusDesc").getAsString());
			}
			if(debug)
				response.getWriter().println("vendorsJsonObj: "+vendorsJsonObj);
		}catch (Exception e) {
//					gstStateCode = "001";
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("Vendors: "+buffer.toString());
		}
		return dealerDetails;
	}	
	//added
	public String getVendorState(HttpServletResponse response, String cpGuid, String aggregatorID, String requiredField, String loginID, String oDataURL, boolean debug){
		String returnValue ="", executeURL = "", userPass="", userName="", password="";
		JsonObject httpJsonResult = new JsonObject();
		
		try{
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataURL+"Vendors?$filter=PartnerID%20eq%20%27"+cpGuid+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20LoginID%20eq%20%27"+loginID+"%27";
			if(debug){
				response.getWriter().println("getVendorState.executeURL: "+executeURL);
			}
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			if(debug){
				response.getWriter().println("getVendorState.httpJsonResult: "+httpJsonResult);
			}
			
			JsonObject results = httpJsonResult.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			for (int i = 0; i <= dresults.size() - 1; i++) {
				JsonObject userCustomersJsonObj = (JsonObject) dresults.get(i);
				
				if(requiredField.equalsIgnoreCase("Region"))
					returnValue = userCustomersJsonObj.get("Region").getAsString();
				else
					returnValue = "";
			}
		}catch (Exception e) {
			returnValue = "001";
		}
		return returnValue;
	}
	
	public JsonObject insertIntoBPHeaders(String aggregatorID, JSONObject inputJsonObject, HttpServletRequest request, 
			HttpServletResponse response, boolean debug)throws IOException {
		String createdOn="", createdAt ="",createdBy="",  iD="", oDataUrl="", executeURL="", customerNo="",userName="", password="", userPass="", panNo="", postalCode="";;
		long createdOnInMillis=0;
		final String failedStatus="999999";
		JSONObject bpInputPayLoadObj = new JSONObject();
		JsonObject scpObject = new JsonObject();
//		JsonObject scpDataChildObj = new JsonObject();
//		JsonObject bpFromERPChildObj = new JsonObject();
		JsonObject bpHeaderObj = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", DestinationUtils.PYGWHANA);
			userName = getODataDestinationProperties("User", DestinationUtils.PYGWHANA);
			password = getODataDestinationProperties("Password", DestinationUtils.PYGWHANA);
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"BPHeader";
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnInMillis = getCreatedOnDate();
			
//			iD = generateGUID(36);
//			scpDataChildObj = scpDataObj.get("CustomerMaster").getAsJsonObject();
//			bpFromERPChildObj = bpFromERPObj.get("BPData").getAsJsonObject().get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
			
			iD = inputJsonObject.getString("ID");
			customerNo = inputJsonObject.getString("CPGuid");
			String formattedStr = "";
			try{
				int number = Integer.parseInt(customerNo);
				formattedStr = ("0000000000" + customerNo).substring(customerNo.length());
				customerNo = formattedStr;
			}catch (NumberFormatException e) {
//				formattedStr = customerNo;
			}
			
			if(debug){
				response.getWriter().println("insertIntoBPHeaders.BPHeader - ID: "+iD);	
				response.getWriter().println("insertIntoBPHeaders.BPHeader - createdBy: "+createdBy);	
				response.getWriter().println("insertIntoBPHeaders.BPHeader - createdAt: "+createdAt);	
				response.getWriter().println("insertIntoBPHeaders.BPHeader - createdOnInMillis: "+createdOnInMillis);	
				response.getWriter().println("insertIntoBPHeaders.BPHeader - PanNo: "+inputJsonObject.getString("PanNo"));	
			}

			scpObject = getSupplyChainPartners(request, response, oDataUrl, userPass, aggregatorID, customerNo, inputJsonObject.getString("CPType"), debug);
			if(debug)
				response.getWriter().println("scpObject: "+scpObject);
			
			if(scpObject.get("Status").getAsString().trim().equalsIgnoreCase("000001")){
				panNo = scpObject.get("PANNo").getAsString();
				postalCode = scpObject.get("PostalCode").getAsString();
			}
			
			if(debug){
				response.getWriter().println("panNo: "+panNo);
				response.getWriter().println("postalCode: "+postalCode);
			}


			// generated Fields
			bpInputPayLoadObj.accumulate("ID", iD);
			bpInputPayLoadObj.accumulate("CreatedBy", createdBy);
			bpInputPayLoadObj.accumulate("CreatedAt", createdAt);
			bpInputPayLoadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			
			// extra Fields
			//bpInputPayLoadObj.accumulate("StatusID", ""); // read it from payload - If field is not available, set value as blank otherwise input value
			bpInputPayLoadObj.accumulate("AggregatorID", aggregatorID);
			bpInputPayLoadObj.accumulate("Mobile2", "");
			bpInputPayLoadObj.accumulate("ApproverRemarks", "");
			bpInputPayLoadObj.accumulate("Source", "");
			bpInputPayLoadObj.accumulate("Address1", "");
			bpInputPayLoadObj.accumulate("Address2", "");
			bpInputPayLoadObj.accumulate("Address3", "");
			bpInputPayLoadObj.accumulate("Address4", "");
			bpInputPayLoadObj.accumulate("District", "");
			bpInputPayLoadObj.accumulate("City", "");
			bpInputPayLoadObj.accumulate("State", "");
			bpInputPayLoadObj.accumulate("StateDesc", "");
			bpInputPayLoadObj.accumulate("CountryDesc", "");
			bpInputPayLoadObj.accumulate("Country", "");
			bpInputPayLoadObj.accumulate("Mobile1", "");
			bpInputPayLoadObj.accumulate("EmailID", "");
			 
			// Fields from SCP Table
			bpInputPayLoadObj.accumulate("Pincode", postalCode);
			bpInputPayLoadObj.accumulate("LandLine1", "");
//			bpInputPayLoadObj.accumulate("PAN", "");

			// fields from ERP(BPHeaders)
			if(inputJsonObject.isNull("GSTIN")){
				bpInputPayLoadObj.accumulate("GSTIN", "");
			}else{
				bpInputPayLoadObj.accumulate("GSTIN",inputJsonObject.getString("GSTIN"));
			}
			if (inputJsonObject.isNull("StatusID"))
				bpInputPayLoadObj.accumulate("StatusID", "");
			else
				bpInputPayLoadObj.accumulate("StatusID", inputJsonObject.getString("StatusID"));
				
			if( inputJsonObject.isNull("CPGuid"))
				bpInputPayLoadObj.accumulate("CPGuid", "");
			else
				bpInputPayLoadObj.accumulate("CPGuid", customerNo);
			
			/*if( inputJsonObject.isNull("PanNo"))
				bpInputPayLoadObj.accumulate("PAN", "");
			else 
				bpInputPayLoadObj.accumulate("PAN", inputJsonObject.getString("PanNo"));*/
//				bpInputPayLoadObj.accumulate("CPGuid", bpFromERPChildObj.get("CPGuid").getAsString());
			
			if(inputJsonObject.isNull("CPName"))
				bpInputPayLoadObj.accumulate("CPName", "");
			else{
				// bpInputPayLoadObj.accumulate("CPName", inputJsonObject.getString("CPName"));
				String cpName = inputJsonObject.getString("CPName");
				Pattern pattern = Pattern.compile("[^a-zA-Z0-9\\s]*");
				Matcher matcher = pattern.matcher(cpName);
				boolean isSpecialCharFound = matcher.find();
				if (isSpecialCharFound) {
					if (debug) {
						response.getWriter().println("Special Character found in the CPName field:" + cpName);
					}
					cpName = updateSpecialCharacter(cpName);
					if (debug) {
						response.getWriter().println("Updated CPName:" + cpName);
					}
				}
				bpInputPayLoadObj.accumulate("CPName", cpName);
			}
				

			if( inputJsonObject.isNull("CPType"))
				bpInputPayLoadObj.accumulate("CPType", "");
			else
				bpInputPayLoadObj.accumulate("CPType",inputJsonObject.getString("CPType"));
			
			if(! inputJsonObject.isNull("IncorporationDate") && inputJsonObject.getString("IncorporationDate").trim().length()>0){
				long dateOfIncorporationMillis=0;
				String incorporationDate = inputJsonObject.getString("IncorporationDate");
				if(incorporationDate.equalsIgnoreCase("")){
					dateOfIncorporationMillis =0;
				}else{
					incorporationDate = incorporationDate.substring(incorporationDate.indexOf("(")+1, incorporationDate.lastIndexOf(")"));
					dateOfIncorporationMillis = Long.parseLong(incorporationDate);
					dateOfIncorporationMillis = formatDateWithoutTime(response, dateOfIncorporationMillis, debug);
				}
				if(debug)
					response.getWriter().println("dateOfIncorporationMillis: "+dateOfIncorporationMillis);

				bpInputPayLoadObj.accumulate("IncorporationDate", "/Date("+dateOfIncorporationMillis+")/");
			}
			
			if( inputJsonObject.isNull("PanNo"))
				bpInputPayLoadObj.accumulate("PAN", panNo);
			else{
				// bpInputPayLoadObj.accumulate("PAN", inputJsonObject.getString("PanNo"));
				if(inputJsonObject.getString("PanNo").trim().length() > 0)
					bpInputPayLoadObj.accumulate("PAN", inputJsonObject.getString("PanNo"));
				else
					bpInputPayLoadObj.accumulate("PAN", panNo);
			}
			
			if( inputJsonObject.isNull("LegalStatus"))
				bpInputPayLoadObj.accumulate("LegalStatus", "");
			else
				bpInputPayLoadObj.accumulate("LegalStatus", inputJsonObject.getString("LegalStatus"));
			
			if(inputJsonObject.isNull("UtilDistrict"))
				bpInputPayLoadObj.accumulate("UtilDistrict", "");
			else
				bpInputPayLoadObj.accumulate("UtilDistrict", inputJsonObject.getString("UtilDistrict"));
			
			if(inputJsonObject.isNull("MSME"))
				bpInputPayLoadObj.accumulate("MSME", "");
			else
				bpInputPayLoadObj.accumulate("MSME", inputJsonObject.getString("MSME"));
			
			if(inputJsonObject.isNull("UdyamRegNo"))
				bpInputPayLoadObj.accumulate("UdyamRegNo", "");
			else
				bpInputPayLoadObj.accumulate("UdyamRegNo", inputJsonObject.getString("UdyamRegNo"));
			
			if(inputJsonObject.isNull("HgdFrgnCurrExposure"))
				bpInputPayLoadObj.accumulate("HgdFrgnCurrExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("HgdFrgnCurrExposure", inputJsonObject.getString("HgdFrgnCurrExposure"));
			
			if(inputJsonObject.isNull("UnHgdFrgnCurrExposure"))
				bpInputPayLoadObj.accumulate("UnHgdFrgnCurrExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("UnHgdFrgnCurrExposure", inputJsonObject.getString("UnHgdFrgnCurrExposure"));
			
			if(inputJsonObject.isNull("TotalFrgnCurrExposure"))
				bpInputPayLoadObj.accumulate("TotalFrgnCurrExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("TotalFrgnCurrExposure", inputJsonObject.getString("TotalFrgnCurrExposure"));
			
			if(inputJsonObject.isNull("FundBasedExposure"))
				bpInputPayLoadObj.accumulate("FundBasedExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("FundBasedExposure", inputJsonObject.getString("FundBasedExposure"));
			
			if(inputJsonObject.isNull("NonFundBasedExposure"))
				bpInputPayLoadObj.accumulate("NonFundBasedExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("NonFundBasedExposure", inputJsonObject.getString("NonFundBasedExposure"));
			
			if(inputJsonObject.isNull("TotalBankingExposure"))
				bpInputPayLoadObj.accumulate("TotalBankingExposure", "0.00");
			else
				bpInputPayLoadObj.accumulate("TotalBankingExposure", inputJsonObject.getString("TotalBankingExposure"));
			
			if(inputJsonObject.isNull("CorporateIdentificationNo"))
				bpInputPayLoadObj.accumulate("CorporateIdentificationNo", "");
			else
				bpInputPayLoadObj.accumulate("CorporateIdentificationNo", inputJsonObject.getString("CorporateIdentificationNo"));
			
				if(inputJsonObject.isNull("ERP_CPName"))
				bpInputPayLoadObj.accumulate("ERP_CPName", "");
			else{
//				bpInputPayLoadObj.accumulate("ERP_CPName", inputJsonObject.getString("ERP_CPName"));
				String erpCpName = inputJsonObject.getString("ERP_CPName");
				Pattern pattern = Pattern.compile("[^a-zA-Z0-9\\s]*");
				Matcher matcher = pattern.matcher(erpCpName);
				boolean isSpecialCharFound = matcher.find();
				if (isSpecialCharFound) {
					if (debug) {
						response.getWriter().println("Special Character found in the CPName field:" + erpCpName);
					}
					erpCpName = updateSpecialCharacter(erpCpName);
					if (debug) {
						response.getWriter().println("Updated CPName:" + erpCpName);
					}
				}
				bpInputPayLoadObj.accumulate("ERP_CPName", erpCpName);
			}
			
			if(inputJsonObject.isNull("URCEntityType"))
				bpInputPayLoadObj.accumulate("URCEntityType", "");
			else
				bpInputPayLoadObj.accumulate("URCEntityType", inputJsonObject.getString("URCEntityType"));
			
			if(inputJsonObject.isNull("URCActivityType"))
				bpInputPayLoadObj.accumulate("URCActivityType", "");
			else
				bpInputPayLoadObj.accumulate("URCActivityType", inputJsonObject.getString("URCActivityType"));
			
			if(inputJsonObject.isNull("URCSectorCode"))
				bpInputPayLoadObj.accumulate("URCSectorCode", "");
			else
				bpInputPayLoadObj.accumulate("URCSectorCode", inputJsonObject.getString("URCSectorCode"));
			
			if(inputJsonObject.isNull("URCSubSectorCode"))
				bpInputPayLoadObj.accumulate("URCSubSectorCode", "");
			else
				bpInputPayLoadObj.accumulate("URCSubSectorCode", inputJsonObject.getString("URCSubSectorCode"));
			
			if(inputJsonObject.isNull("URCDocURL"))
				bpInputPayLoadObj.accumulate("URCDocURL", "");
			else
				bpInputPayLoadObj.accumulate("URCDocURL", inputJsonObject.getString("URCDocURL"));
			
			if(inputJsonObject.isNull("ODAccountNo"))
				bpInputPayLoadObj.accumulate("ODAccountNo", "");
			else
				bpInputPayLoadObj.accumulate("ODAccountNo", inputJsonObject.getString("ODAccountNo"));
			
			if(inputJsonObject.isNull("URCRegistrationDate"))
				bpInputPayLoadObj.accumulate("URCRegistrationDate", "");
			else
				bpInputPayLoadObj.accumulate("URCRegistrationDate", inputJsonObject.getString("URCRegistrationDate"));
			
			if (!inputJsonObject.isNull("StatusID") && inputJsonObject.getString("StatusID").equals(failedStatus)) {
				if (inputJsonObject.isNull("BPRejectionRemarks")) {
					// BPRejectionRemarks is mandatory for Rejection scenario
					throw new BPRejectionRemarksFieldValidationException(
							"BPRejectionRemarks field is mandatory for Rejection Scenario");
				} else {
					// save the BPRejectionRemarksfield
					bpInputPayLoadObj.accumulate("BPRejectionRemarks", inputJsonObject.getString("BPRejectionRemarks"));
				}

			}else{
			if(inputJsonObject.isNull("BPRejectionRemarks"))
				bpInputPayLoadObj.accumulate("BPRejectionRemarks", "");
			else
				bpInputPayLoadObj.accumulate("BPRejectionRemarks", inputJsonObject.getString("BPRejectionRemarks"));
			}
			
			if(inputJsonObject.isNull("FacilityType"))
				bpInputPayLoadObj.accumulate("FacilityType", "");
			else
				bpInputPayLoadObj.accumulate("FacilityType", inputJsonObject.getString("FacilityType"));
			
			if (inputJsonObject.has("LEINumber")) {
				if (inputJsonObject.isNull("LEINumber") || inputJsonObject.getString("LEINumber").equals("")) {
					bpInputPayLoadObj.accumulate("LEINumber", "");
				} else {
					bpInputPayLoadObj.accumulate("LEINumber", inputJsonObject.getString("LEINumber"));
				}
			}
			if (inputJsonObject.has("EntityID")) {
				if (inputJsonObject.isNull("EntityID") || inputJsonObject.getString("EntityID").equals("")) {
					bpInputPayLoadObj.accumulate("EntityID", "");
				} else {
					bpInputPayLoadObj.accumulate("EntityID", inputJsonObject.getString("EntityID"));
				}
			}
			if(debug)
				response.getWriter().println("insertIntoBPHeaders.bpInputPayLoadObj: "+bpInputPayLoadObj);
			bpHeaderObj = executePostURL(executeURL, userPass, response, bpInputPayLoadObj, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("insertIntoBPHeaders.bpHeaderObj: "+bpHeaderObj);
			if(bpHeaderObj.has("error")){
				bpHeaderObj.addProperty("ErrorCode", "001");
				bpHeaderObj.addProperty("Message", "Insertion Failed");
				return bpHeaderObj;
			}else{
				bpHeaderObj.addProperty("ErrorCode", "");
				bpHeaderObj.addProperty("Message", "Success");
				return bpHeaderObj;
			}
		}catch(BPRejectionRemarksFieldValidationException  ex){
			if(debug){
				response.getWriter().println("insertBPHeaderData.xception in insertBPHeaderData: "+ex.getMessage());
				StackTraceElement element[] = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("insertBPHeaderData.Full Stack Trace: "+buffer.toString());
			}
			bpHeaderObj.addProperty("ErrorCode", "001");
			bpHeaderObj.addProperty("Message",ex.getMessage() );
			return bpHeaderObj;
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("insertBPHeaderData.xception in insertBPHeaderData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("insertBPHeaderData.Full Stack Trace: "+buffer.toString());
			}
			bpHeaderObj.addProperty("ErrorCode", "001");
			bpHeaderObj.addProperty("Message", "Insertion Failed");
			return bpHeaderObj;
		}
	}
	//added
	public JsonObject insertIntoBPContactPerson(JSONObject inputPayloadJson, HttpServletRequest request, 
			HttpServletResponse response, boolean debug) throws IOException {
		
		String createdBy="", createdAt="", userPass="", executeURL="", oDataUrl="", errorCode="",userName="",password="";
		long createdOnInMillis=0;
		JSONObject bpCNTPInputPayloadObj = new JSONObject();
		JsonObject bpContactPersonChildObj = new JsonObject();
		JsonObject bpContactPersonObj = new JsonObject();
		
		try{
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"BPContactPerson";
			if(debug){
				response.getWriter().println("insertIntoBPContactPerson.inputPayloadJson: "+inputPayloadJson);
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - oDataUrl: "+oDataUrl);	
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - password: "+userPass);	
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - userPass: "+userPass);	
				response.getWriter().println("insertIntoBPContactPerson.executeURL: "+executeURL);
			}
			
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			if(debug){
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - createdBy: "+createdBy);	
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - createdAt: "+createdAt);	
				response.getWriter().println("insertIntoBPContactPerson.BPCNTP - createdOnInMillis: "+createdOnInMillis);	
			}
			
			// generated fields
			bpCNTPInputPayloadObj.accumulate("CreatedBy", createdBy);
			bpCNTPInputPayloadObj.accumulate("CreatedAt", createdAt);
			bpCNTPInputPayloadObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			bpCNTPInputPayloadObj.accumulate("StatusID", "");
			
			// fields from BPHeader
			if( inputPayloadJson.isNull("BPID"))
				bpCNTPInputPayloadObj.accumulate("BPID", "");
			else
				bpCNTPInputPayloadObj.accumulate("BPID", inputPayloadJson.getString("BPID"));
			
			if( inputPayloadJson.isNull("ID"))
				bpCNTPInputPayloadObj.accumulate("ID", "");
			else
				bpCNTPInputPayloadObj.accumulate("ID", inputPayloadJson.getString("ID"));

			// fields from ERP(BPContactPersons)
//			bpCNTPInputPayloadObj.accumulate("BPType", "");
			
			if( inputPayloadJson.isNull("Name1"))
				bpCNTPInputPayloadObj.accumulate("Name1", "");
			else
				bpCNTPInputPayloadObj.accumulate("Name1", inputPayloadJson.getString("Name1"));
			
			if( inputPayloadJson.isNull("Name2"))
				bpCNTPInputPayloadObj.accumulate("Name2", "");
			else
				bpCNTPInputPayloadObj.accumulate("Name2", inputPayloadJson.getString("Name2"));
			
			if( inputPayloadJson.isNull("DOB"))
				bpCNTPInputPayloadObj.accumulate("DOB", "");
			else{
				long dateOfBirthMillis=0;
				String dateOfBirth = inputPayloadJson.getString("DOB");
//				dateOfBirth = removeSuccessiveZeros(dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")")));
				dateOfBirth = dateOfBirth.substring(dateOfBirth.indexOf("(")+1, dateOfBirth.lastIndexOf(")"));
				/*if(dateOfBirth.contains("-")){
								dateOfBirth = dateOfBirth.replace("-", "");
							}*/
				if(dateOfBirth.equalsIgnoreCase("")){
					dateOfBirthMillis =0;
				}else{
					dateOfBirthMillis = Long.parseLong(dateOfBirth);
				}
				dateOfBirthMillis = formatDateWithoutTime(response, dateOfBirthMillis, debug);
				if(debug)
					response.getWriter().println("dateOfBirthMillis: "+dateOfBirthMillis);
				
				bpCNTPInputPayloadObj.accumulate("DOB", "/Date("+dateOfBirthMillis+")/");
			}
			
			if( inputPayloadJson.isNull("Mobile"))
				bpCNTPInputPayloadObj.accumulate("Mobile", "");
			else
				bpCNTPInputPayloadObj.accumulate("Mobile", inputPayloadJson.getString("Mobile"));
			
			if( inputPayloadJson.isNull("EmailID"))
				bpCNTPInputPayloadObj.accumulate("EmailID", "");
			else
				bpCNTPInputPayloadObj.accumulate("EmailID", inputPayloadJson.getString("EmailID"));
			
			if( inputPayloadJson.isNull("PAN"))
				bpCNTPInputPayloadObj.accumulate("PAN", "");
			else
				bpCNTPInputPayloadObj.accumulate("PAN", inputPayloadJson.getString("PAN"));
			
			if( inputPayloadJson.isNull("GenderID"))
				bpCNTPInputPayloadObj.accumulate("GenderID", "");
			else
				bpCNTPInputPayloadObj.accumulate("GenderID", inputPayloadJson.getString("GenderID"));
			
			if( inputPayloadJson.isNull("SigningOrder"))
				bpCNTPInputPayloadObj.accumulate("SigningOrder", "");
			else
				bpCNTPInputPayloadObj.accumulate("SigningOrder", inputPayloadJson.getString("SigningOrder"));
			
			if( inputPayloadJson.isNull("PostalCode"))
				bpCNTPInputPayloadObj.accumulate("PostalCode", "");
			else
				bpCNTPInputPayloadObj.accumulate("PostalCode", inputPayloadJson.getString("PostalCode"));
			
			if(debug){
				response.getWriter().println("BPType: "+inputPayloadJson.getString("BPType"));
				response.getWriter().println("Designation: "+inputPayloadJson.getString("Designation"));
				response.getWriter().println("UniqueIdentifier1: "+inputPayloadJson.getString("UniqueIdentifier1"));
				response.getWriter().println("AuthorizedSignatory: "+inputPayloadJson.getString("AuthorizedSignatory"));
			}
			
			String contactPersonType="";
			
			/*if(inputPayloadJson.has("ContactPersonType")){
				if(inputPayloadJson.isNull("ContactPersonType")){
					bpCNTPInputPayloadObj.accumulate("ContactPersonType", "");
				}else{
					bpCNTPInputPayloadObj.accumulate("ContactPersonType", inputPayloadJson.getString("ContactPersonType"));
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("BPType", "");
			}*/
			/*if(inputPayloadJson.has("ContactPersonType")){
				contactPersonType = inputPayloadJson.getString("ContactPersonType");
				if(debug){
					response.getWriter().println("contactPersonType: "+contactPersonType);
				}
				if(null == contactPersonType){
					bpCNTPInputPayloadObj.accumulate("ContactPersonType", "");
				}else{
//					bpCNTPInputPayloadObj.accumulate("BPType", bpType);
					bpCNTPInputPayloadObj.accumulate("ContactPersonType", contactPersonType);
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("ContactPersonType", "");
			}*/
			
			if(inputPayloadJson.has("BPType")){
				contactPersonType = inputPayloadJson.getString("BPType");
				if(debug){
					response.getWriter().println("BPType: "+contactPersonType);
				}
				if(null == contactPersonType){
					bpCNTPInputPayloadObj.accumulate("BPType", "");
				}else{
//					bpCNTPInputPayloadObj.accumulate("BPType", bpType);
					bpCNTPInputPayloadObj.accumulate("BPType", contactPersonType);
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("BPType", "");
			}
			
			if(inputPayloadJson.has("Designation")){
				if(inputPayloadJson.isNull("Designation")){
					bpCNTPInputPayloadObj.accumulate("Designation", "");
				}else{
					bpCNTPInputPayloadObj.accumulate("Designation", inputPayloadJson.getString("Designation"));
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("Designation", "");
			}
			
			if(inputPayloadJson.has("UniqueIdentifier1")){
				if(inputPayloadJson.isNull("UniqueIdentifier1")){
					bpCNTPInputPayloadObj.accumulate("UniqueIdentifier1", "");
				}else{
					bpCNTPInputPayloadObj.accumulate("UniqueIdentifier1", inputPayloadJson.getString("UniqueIdentifier1"));
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("UniqueIdentifier1", "");
			}
			
			if(inputPayloadJson.has("AuthorizedSignatory")){
				if(inputPayloadJson.isNull("AuthorizedSignatory")){
					bpCNTPInputPayloadObj.accumulate("AuthorizedSignatory", "");
				}else{
					bpCNTPInputPayloadObj.accumulate("AuthorizedSignatory", inputPayloadJson.getString("AuthorizedSignatory"));
				}
			}else{
				bpCNTPInputPayloadObj.accumulate("AuthorizedSignatory", "");
			}
			
			
			if(debug)
				response.getWriter().println("insertIntoBPContactPerson.bpCNTPInputPayloadObj: "+bpCNTPInputPayloadObj);
			bpContactPersonChildObj = executePostURL(executeURL, userPass, response, bpCNTPInputPayloadObj, request, debug, "PYGWHANA");
			if(debug)
				response.getWriter().println("insertIntoBPContactPerson.bpContactPersonChildObj: "+bpContactPersonChildObj);
			
			if(bpContactPersonChildObj.has("error")){
				errorCode = "001";
				bpContactPersonChildObj.addProperty("ErrorCode", errorCode);
				bpContactPersonChildObj.addProperty("Message", "Insertion Failed");
			}
			
			if(errorCode.equalsIgnoreCase("")){
				bpContactPersonChildObj.addProperty("ErrorCode", errorCode);
				bpContactPersonChildObj.addProperty("Message", "Success");
			}
			return bpContactPersonChildObj;
			
		}catch (Exception e) {
			if(debug){
				response.getWriter().println("Exception in insertBPContactPersonData: "+e.getMessage());
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Full Stack Trace: "+buffer.toString());
			}
			bpContactPersonChildObj.addProperty("ErrorCode", "001");
			bpContactPersonChildObj.addProperty("Message", "Insertion Failed");
			return bpContactPersonChildObj;
		}
	}
	
	public Date dateinTimeZone(Date date, String format,
			String timeZone) {
		// null check
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		if (date == null) return null;
		// create SimpleDateFormat object with input format
		try {
		
		// default system timezone if passed null or empty
		if (timeZone == null || "".equalsIgnoreCase(timeZone.trim())) {
			timeZone = Calendar.getInstance().getTimeZone().getID();
		}
		// set timezone to SimpleDateFormat
		sdf.setTimeZone(TimeZone.getTimeZone(timeZone));
		// return Date in required format with timezone as String
//		return sdf.format(date);
		
			Date returnDate = new SimpleDateFormat(format).parse(sdf.format(date));
			return returnDate;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	public int dateDifference(Date latestDate, Date oldestDate){
		int days = 0;
		try{
			long diff = latestDate.getTime() - oldestDate.getTime();
	        long diffSeconds = diff / 1000 % 60;
	        long diffMinutes = diff / (60 * 1000) % 60;
	        long diffHours = diff / (60 * 60 * 1000);
	        int diffInDays = (int) ((latestDate.getTime() - oldestDate.getTime()) / (1000 * 60 * 60 * 24));
	        
	        /*response.getWriter().println("diff: "+diff);
	        response.getWriter().println("diffSeconds: "+diffSeconds);
	        response.getWriter().println("diffMinutes: "+diffMinutes);
	        response.getWriter().println("diffHours: "+diffHours);
	        response.getWriter().println("diffInDays: "+diffInDays);*/
			
			
			return diffInDays;
		}catch (Exception e) {
			return days;
		}
	}
	
	public JsonObject updateUserAuthorization(HttpServletRequest request, HttpServletResponse response, Properties properties, String testRun, JSONArray inputPayloadArray, String aggregatorID, String loginID, String applicationId, String oDataURL, String errorResponseFormat,boolean debug) throws IOException
	{
		String appendUrl="", errorMsg="", errorCode="",payloadRequest="", partnerID="", changedBy="", changedAt="";	
		String oDataUserName="",oDatapassword="",userPass="",executeURL="", successUpdateResponse="",authOrgValue="",authOrgTypeID="", eRPSystemID="",AuthOrgTypeDesc="";
		JsonObject userAuthUpdateResponse = new JsonObject();
		JsonObject userAuthGETResponse = new JsonObject();
		JSONObject updatePayload = null;
		JSONArray payLoadJSONArray = new JSONArray();
		long changedOnLong=0;
		boolean isSuccess = true;
		JSONObject childInputJSON = new JSONObject();
		
		successUpdateResponse ="{\"code\":\"/ARTEC/PC/031\",\"message\":\"User Auth entry updated successfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
		
		try {
			
			oDataUserName = getODataDestinationProperties("User", "PUGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			if (debug) {
				response.getWriter().println("updateUserAuthorization.loginID: "+loginID);
				response.getWriter().println("updateUserAuthorization.oDataUserName: "+oDataUserName);
				response.getWriter().println("updateUserAuthorization.oDatapassword: "+oDatapassword);
				response.getWriter().println("updateUserAuthorization.userPass: "+userPass);
			}
			
			changedBy = getUserPrincipal(request, "name", response);
			changedAt = getCreatedAtTime();
			changedOnLong = getCreatedOnDate();
			
			for (int i = 0; i < inputPayloadArray.length(); i++) {
				
				updatePayload = new JSONObject();
				authOrgValue="";AuthOrgTypeDesc="";
				childInputJSON = inputPayloadArray.getJSONObject(i);
				
//				applicationId = childInputJSON.getString("Application");
				authOrgValue = childInputJSON.getString("AuthOrgValue");
				authOrgTypeID = childInputJSON.getString("AuthOrgTypeID");
				eRPSystemID = childInputJSON.getString("ERPSystemID");
				
				if(authOrgValue.contains("&")){
					authOrgValue=authOrgValue.replace("&", "%26");
				}
				
				if (!childInputJSON.isNull("AuthOrgTypeDesc"))
					AuthOrgTypeDesc = childInputJSON.getString("AuthOrgTypeDesc");
				
				executeURL = oDataURL+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationId+"%27%20and%20AuthOrgValue%20eq%20%27"+authOrgValue+"%27";
				executeURL = executeURL.replace(" ", "%20");
				if (debug)
					response.getWriter().println("updateUserAuthorization.executeUrl: "+executeURL);
				
				userAuthGETResponse = executeURL(executeURL, userPass, response);
				if(debug)
					response.getWriter().println("updateUserAuthorization.userAuthGETResponse: "+userAuthGETResponse);
				
				//GET User Partner
				if(debug)
					response.getWriter().println("updateUserAuthorization.userAuthGETResponse: "+userAuthGETResponse);
				if ( userAuthGETResponse.getAsJsonObject("d").getAsJsonArray("results").size() >0) {
					
					executeURL ="";
					JsonObject childUserAuth = userAuthGETResponse.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject();
					updatePayload.accumulate("AggregatorID", aggregatorID);
					updatePayload.accumulate("LoginID", loginID);
					updatePayload.accumulate("Application", applicationId);
					updatePayload.accumulate("ERPSystemID", eRPSystemID);
					updatePayload.accumulate("AuthOrgTypeID", authOrgTypeID);
					updatePayload.accumulate("AuthOrgValue", authOrgValue);
					
					if ( ! childInputJSON.isNull("AuthOrgValDsc") )
						updatePayload.accumulate("AuthOrgValDsc", childInputJSON.getString("AuthOrgValDsc"));
					else
						updatePayload.accumulate("AuthOrgValDsc", "");
					//----
					if ( ! childUserAuth.get("CreatedBy").isJsonNull() )
						updatePayload.accumulate("CreatedBy", childUserAuth.get("CreatedBy").getAsString());
					else
						updatePayload.accumulate("CreatedBy", "");
					
					if ( ! childUserAuth.get("CreatedAt").isJsonNull() )					
						updatePayload.accumulate("CreatedAt", childUserAuth.get("CreatedAt").getAsString());
					else
						updatePayload.accumulate("CreatedAt", JSONObject.NULL);
					
					if (  ! childUserAuth.get("CreatedOn").isJsonNull() )
						updatePayload.accumulate("CreatedOn", childUserAuth.get("CreatedOn").getAsString());
					else
						updatePayload.accumulate("CreatedOn", JSONObject.NULL);
					
					if (! childUserAuth.get("SourceReferenceID").isJsonNull())
						updatePayload.accumulate("SourceReferenceID", childUserAuth.get("SourceReferenceID").getAsString());
					else
						updatePayload.accumulate("SourceReferenceID", "");
					
					updatePayload.accumulate("ChangedBy", changedBy);
					updatePayload.accumulate("ChangedAt", changedAt);
					updatePayload.accumulate("ChangedOn", "/Date("+changedOnLong+")/"); 
					
					if(debug)
						response.getWriter().println("updateUserAuthorization.updatePayload-("+i+"): "+updatePayload);
					//UserAuthSet(AggregatorID='AGGR0008',Application='MR',LoginID='P2000278306',ERPSystemID='E0Arteria',AuthOrgTypeID='000014',AuthOrgValue='KAM2')
					executeURL =oDataURL+"UserAuthSet(AggregatorID='"+aggregatorID+"',Application='"+applicationId+"',LoginID='"+loginID+"',ERPSystemID='"+eRPSystemID+"',AuthOrgTypeID='"+authOrgTypeID+"',AuthOrgValue='"+authOrgValue+"')";
					userAuthUpdateResponse =executeUpdate(executeURL, userPass, response, updatePayload, request, debug, "PUGWHANA");
					if(debug)
						response.getWriter().println("updateUserAuthorization.userAuthUpdateResponse: "+userAuthUpdateResponse);
					
					if ( userAuthUpdateResponse.has("error") || userAuthUpdateResponse.get("ErrorCode").getAsString().trim().length() > 0 ) {
						isSuccess = false;
						errorCode = "034";
						break;
					}
				} else {
					//Update Failure
					isSuccess = false;
					errorCode = "026";
					break;
				}
			}
			if ( ! isSuccess) {
				
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				errorResponseFormat = errorResponseFormat.replaceAll("ERROR_MESSAGE", properties.getProperty(errorCode));
				errorResponseFormat = errorResponseFormat.replaceAll("ERROR_CODE", errorCode);
				response.getWriter().println(errorResponseFormat);
			}
			else
			{
				response.setStatus(HttpServletResponse.SC_NO_CONTENT);
				response.getWriter().println(new Gson().toJson(successUpdateResponse));
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			}
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			errorResponseFormat = errorResponseFormat.replaceAll("ERROR_MESSAGE", e.getMessage());
			errorResponseFormat = errorResponseFormat.replaceAll("ERROR_CODE", "001");
			response.getWriter().println(errorResponseFormat);
		}
		return userAuthUpdateResponse;
	}
	
	public JsonObject deleteUserLogin(HttpServletRequest request, HttpServletResponse response, Properties properties, String applicationID, JSONObject inputPayload, String aggregatorID, 
			String loginID, String oDataUrl, String errorFormatResponse, boolean debug) throws IOException{
		
		String userName ="",password="",userPass="", executeURL="", errorCode= "", errorMsg="";
		boolean isSuccess = true;
		JsonObject userPartnerDeleteResponse = new JsonObject();
		JsonObject userLoginDeleteresponse = new JsonObject();
		JsonObject userLoginResponseUI = new JsonObject();
		Map<String, String> userLoginGETResponseMap = new HashMap<String, String>();
		
		try {
			
			oDataUrl = getODataDestinationProperties("URL", "PUGWHANA");
			userName = getODataDestinationProperties("User", "PUGWHANA");
			password = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			userLoginGETResponseMap = getUserLoginsDetails(response, request, oDataUrl, aggregatorID, loginID, applicationID, debug);
			if(debug)
				response.getWriter().println("deleteUserLogin.userLoginGETResponseMap: "+userLoginGETResponseMap);
			
			if ( null != userLoginGETResponseMap.get("ErrorCode") && userLoginGETResponseMap.get("ErrorCode").equalsIgnoreCase("079")) {
				
				//UserLogins(AggregatorID='AGGR0008',Application='CL',LoginID='P2000278306')
				executeURL = oDataUrl+"UserLogins(AggregatorID='"+aggregatorID+"',Application='"+applicationID+"',LoginID='"+loginID+"')";
				if(debug)
					response.getWriter().println("deleteUserLogin.executeURL: "+executeURL);
				
				userLoginDeleteresponse = executeDelete(executeURL, userPass, response, request, debug, "PUGWHANA");
				if(debug)
					response.getWriter().println("deleteUserLogin.userLoginDeleteresponse: "+userLoginDeleteresponse);
				
				if( ! userLoginDeleteresponse.get("ErrorCode").isJsonNull() 
						&& userLoginDeleteresponse.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")){
					//Delete Success	
					
					
					
					userPartnerDeleteResponse = deleteUserPartnerDetails(request, response, properties, applicationID, aggregatorID, loginID, oDataUrl, errorFormatResponse, debug);
					if(debug)
						response.getWriter().println("deleteUserLogin.userPartnerDeleteResponse: "+userPartnerDeleteResponse);
					
					if ( ! userPartnerDeleteResponse.get("ErrorCode").isJsonNull())	
						errorCode =  userPartnerDeleteResponse.get("ErrorCode").getAsString();
						
					if ( errorCode.equalsIgnoreCase("026") || errorCode.equalsIgnoreCase("027") ) {
						
						JsonObject userAuthDeleteResponse = new JsonObject();
						
						userAuthDeleteResponse = deleteUserAuthorizationDetails(request, response, properties, applicationID, aggregatorID, loginID, oDataUrl, errorFormatResponse, debug);
						if (debug)
							response.getWriter().println("deleteUserLogin.userAuthDeleteResponse: "+userAuthDeleteResponse);
						
						if ( ! userAuthDeleteResponse.get("ErrorCode").isJsonNull())	
							errorCode =  userAuthDeleteResponse.get("ErrorCode").getAsString(); 	
							
						if ( errorCode.equalsIgnoreCase("026") || errorCode.equalsIgnoreCase("032")) {
							
							isSuccess =true;
							String successResponse = "{\"code\":\"/ARTEC/PC/040\",\"message\":\"User Login entry deleted successfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
							
							userLoginResponseUI = new JsonParser().parse(successResponse).getAsJsonObject();
							response.setStatus(HttpServletResponse.SC_NO_CONTENT);
							response.getWriter().println(userLoginResponseUI);

						} else {
							errorCode = userAuthDeleteResponse.get("ErrorCode").getAsString();
							errorMsg = userAuthDeleteResponse.get("ErrorMsg").getAsString();
							isSuccess = false;
						}
					} else {
						errorCode = userPartnerDeleteResponse.get("ErrorCode").getAsString();
						errorMsg = userPartnerDeleteResponse.get("ErrorMsg").getAsString();
						isSuccess = false;
					}

				}else{
					//Delete Failure
					errorCode = userLoginDeleteresponse.get("ErrorCode").getAsString();
					errorMsg = userLoginDeleteresponse.get("ErrorMessage").getAsString();
					isSuccess = false;
				}
				
				if ( ! isSuccess) {
					
					if(errorMsg.equalsIgnoreCase(""))
						errorMsg = "035";

					errorFormatResponse = errorFormatResponse.replaceAll("ERROR_MESSAGE", properties.getProperty(errorMsg));
					errorFormatResponse = errorFormatResponse.replaceAll("ERROR_CODE", errorCode);
					
					userLoginResponseUI = new JsonParser().parse(errorFormatResponse).getAsJsonObject();
					if(debug)
						response.getWriter().println("deleteUserLogin.Failure Response.userLoginResponseUI: "+userLoginResponseUI);
					
					response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
					response.getWriter().println(userLoginResponseUI);
				}
				
			} else {
				errorFormatResponse = errorFormatResponse.replaceAll("ERROR_CODE", "026");
				errorFormatResponse = errorFormatResponse.replaceAll("ERROR_MESSAGE", properties.getProperty("026"));
				
				userLoginResponseUI = new JsonParser().parse(errorFormatResponse).getAsJsonObject();
				if(debug)
					response.getWriter().println("deleteUserLogin.Failure Response.userLoginResponseUI: "+userLoginResponseUI);

				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				response.getWriter().println(userLoginResponseUI);
			}
			
		} catch (Exception e) {
//			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in deleteUserLogin.message: "+buffer.toString());
//			}
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			errorFormatResponse = errorFormatResponse.replaceAll("ERROR_CODE", "001");
			errorFormatResponse = errorFormatResponse.replaceAll("ERROR_MESSAGE", buffer.toString());
			userLoginResponseUI = new JsonParser().parse(errorFormatResponse).getAsJsonObject();
			response.getWriter().println(userLoginResponseUI);
		}
		return userLoginResponseUI;
	}
	
	//adedd
	public JsonObject deleteUserPartnerDetails(HttpServletRequest request, HttpServletResponse response, Properties properties, String applicationID, String aggregatorID, String loginID, String oDataUrl, 
			String errorFormatResponse, boolean debug) throws IOException{
		
		String userName ="",password="",userPass="", executeURL="", erpSystemID ="",partnerID="";
		JsonObject userPartnerDeleteresponse = null;
		boolean isSuccess = true;
		JsonObject userpartnerResponseUI = new JsonObject();
//		Map<String, String> userPartnerGETResponseMap = new HashMap<String, String>();
		JsonArray userParterArray = new JsonArray();
		JsonObject userPartnersResponse = new JsonObject();
		
		try {
//			oDataUrl = getODataDestinationProperties("URL", "PUGWHANA");
			userName = getODataDestinationProperties("User", "PUGWHANA");
			password = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserPartners?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27";
			if (debug)
				response.getWriter().println("deleteUserPartnerDetails.executeUrl : "+executeURL);
			
			userPartnersResponse = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("deleteUserPartnerDetails.userPartnersResponse: "+userPartnersResponse);
			
			userParterArray = userPartnersResponse.getAsJsonObject("d").getAsJsonArray("results");
			
//			userPartnerGETResponseMap = getUserPartnersDetails(response, request, properties, userParterArray, oDataUrl, aggregatorID, loginID, applicationID, debug);
			if ( userParterArray.size() > 0) {
				JsonObject childPartnerJsonObj = new JsonObject();
				
				for (int i = 0; i < userParterArray.size() ; i++) {
					
					userPartnerDeleteresponse = new JsonObject();
					executeURL =""; erpSystemID= ""; partnerID="";
					childPartnerJsonObj = userParterArray.get(i).getAsJsonObject();
					
					if( ! childPartnerJsonObj.get("ERPSystemID").isJsonNull())
						erpSystemID = childPartnerJsonObj.get("ERPSystemID").getAsString();
					
					if( ! childPartnerJsonObj.get("PartnerID").isJsonNull())
						partnerID = childPartnerJsonObj.get("PartnerID").getAsString();
						
					executeURL = oDataUrl+"UserPartners(AggregatorID='"+aggregatorID+"',Application='"+applicationID+"',LoginID='"+loginID+"',ERPSystemID='"+erpSystemID+"',PartnerID='"+partnerID+"')";
					if(debug)
						response.getWriter().println("deleteUserPartnerDetails.executeURL: "+executeURL);
					
					userPartnerDeleteresponse = executeDelete(executeURL, userPass, response, request, debug, "PUGWHANA");
					if(debug){
						response.getWriter().println("deleteUserPartnerDetails.userPartnerDeleteresponse: "+userPartnerDeleteresponse);
					}
					
					if(! userPartnerDeleteresponse.get("ErrorCode").isJsonNull() 
							&& ! userPartnerDeleteresponse.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")){
						//Update Failure
						isSuccess = false;
						break;
					}
				}
				if ( ! isSuccess) {
					
					userpartnerResponseUI.addProperty("ErrorCode", "035");
					userpartnerResponseUI.addProperty("ErrorMsg", properties.getProperty("035"));
				}
				else
				{
					//Update Success	
					userpartnerResponseUI.addProperty("ErrorCode", "027");
					userpartnerResponseUI.addProperty("ErrorMsg", "User Partner mapping entry deleted successfully");
//					String successResponse = "{\"code\":\"/ARTEC/PC/027\",\"message\":\"User Partner mapping entry deleted successfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
//					userpartnerResponseUI = new JsonParser().parse(successResponse).getAsJsonObject();
				}
			}
			else {
				userpartnerResponseUI.addProperty("ErrorCode", "026");
				userpartnerResponseUI.addProperty("ErrorMsg", properties.getProperty("026"));
			}
			
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in deleteUserPartner.message: "+buffer.toString());
			}
				userpartnerResponseUI.addProperty("ErrorCode", "001");
				userpartnerResponseUI.addProperty("ErrorMsg", e.getMessage());
		}
		return userpartnerResponseUI;
	}
	
	//added
	public JsonObject deleteUserAuthorizationDetails(HttpServletRequest request, HttpServletResponse response, Properties properties, String applicationID, String aggregatorID, String loginID, String oDataUrl, 
			String errorFormatResponse, boolean debug) throws IOException{
		
		String userName ="",password="",userPass="", executeURL="", erpSystemID ="",AuthOrgTypeID="", AuthOrgValue="";
		JsonObject userAuthDeleteresponse = null;
		boolean isSuccess = true;
		JsonObject userAuthResponseUI = new JsonObject();
		JsonArray useAuthArray = new JsonArray();
		JsonObject userAuthResponse = new JsonObject();
		
		try {
//			oDataUrl = getODataDestinationProperties("URL", "PUGWHANA");
			userName = getODataDestinationProperties("User", "PUGWHANA");
			password = getODataDestinationProperties("Password", "PUGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"UserAuthSet?$filter=LoginID%20eq%20%27"+loginID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Application%20eq%20%27"+applicationID+"%27";
			if (debug)
			response.getWriter().println("deleteUserAuthorizationDetails.executeUrl : "+executeURL);
			
			userAuthResponse = executeURL(executeURL, userPass, response);
			if(debug)
			response.getWriter().println("deleteUserAuthorizationDetails.userAuthResponse: "+userAuthResponse);
			
			useAuthArray = userAuthResponse.getAsJsonObject("d").getAsJsonArray("results");
			
			if ( useAuthArray.size() > 0) {
				
				JsonObject childAuthJsonObj = new JsonObject();

				for (int i = 0; i < useAuthArray.size() ; i++) {
					
					userAuthDeleteresponse = new JsonObject();
					executeURL =""; erpSystemID= ""; AuthOrgTypeID=""; AuthOrgValue="";
					childAuthJsonObj = useAuthArray.get(i).getAsJsonObject();
					
					if( ! childAuthJsonObj.get("ERPSystemID").isJsonNull())
						erpSystemID = childAuthJsonObj.get("ERPSystemID").getAsString();
					
					if( ! childAuthJsonObj.get("AuthOrgTypeID").isJsonNull())
						AuthOrgTypeID = childAuthJsonObj.get("AuthOrgTypeID").getAsString();
					
					if( ! childAuthJsonObj.get("AuthOrgValue").isJsonNull())
						AuthOrgValue = childAuthJsonObj.get("AuthOrgValue").getAsString();
					
					//UserAuthSet(AggregatorID='AGGR0008',Application='MR',LoginID='P2000278306',ERPSystemID='E0Arteria',AuthOrgTypeID='000014',AuthOrgValue='KAM2')
					executeURL = oDataUrl+"UserAuthSet(AggregatorID='"+aggregatorID+"',Application='"+applicationID+"',LoginID='"+loginID+"',ERPSystemID='"+erpSystemID+"',AuthOrgTypeID='"+AuthOrgTypeID+"',AuthOrgValue='"+AuthOrgValue+"')";
					if(debug)
						response.getWriter().println("deleteUserAuthorizationDetails.executeURL: "+executeURL);
					
					userAuthDeleteresponse = executeDelete(executeURL, userPass, response, request, debug, "PUGWHANA");
					if(debug){
						response.getWriter().println("deleteUserAuthorizationDetails.userAuthDeleteresponse: "+userAuthDeleteresponse);
					}
					
					if(! userAuthDeleteresponse.get("ErrorCode").isJsonNull() 
							&& ! userAuthDeleteresponse.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")){
						//Update Failure
						isSuccess = false;
						break;
					}
				}
				if ( ! isSuccess) {
					userAuthResponseUI.addProperty("ErrorCode", "035");
					userAuthResponseUI.addProperty("ErrorMsg", properties.getProperty("035"));
				}
				else{
					//Update Success	
					userAuthResponseUI.addProperty("ErrorCode", "032");
					userAuthResponseUI.addProperty("ErrorMsg", "User Auth entry deleted successfully");
				}
			} 
			else {
				userAuthResponseUI.addProperty("ErrorCode", "026");
				userAuthResponseUI.addProperty("ErrorMsg", properties.getProperty("026"));
			}
			
		} catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception in deleteUserPartner.message: "+buffer.toString());
			}
			userAuthResponseUI.addProperty("ErrorCode", "001");
			userAuthResponseUI.addProperty("ErrorMsg", e.getMessage());
		}
		return userAuthResponseUI;
	}
	
	public JsonArray getUserPartnerDescriptionArray(HttpServletRequest request, HttpServletResponse response, JsonObject userPartnerJson, String oDataURL, String aggregatorID,  String authParam,boolean debug) throws IOException
	{
		String executeURL="", partnerTypeID="";
		JsonArray userPartnerArray = new JsonArray();
		JsonObject partnerTypesJson = new JsonObject();
		CommonUtils commonUtils = new CommonUtils();
		JsonArray userPartnerDescripArray = new JsonArray();
		try {
			
			userPartnerArray = userPartnerJson.getAsJsonObject("d").getAsJsonArray("results");
			JsonObject childuserPartnerObj = new JsonObject();
			for ( int i = 0; i < userPartnerArray.size(); i++ ) {
				partnerTypeID ="";
				childuserPartnerObj = new JsonObject();
				partnerTypesJson = new JsonObject();
				
				if( ! userPartnerArray.get(i).getAsJsonObject().get("PartnerTypeID").isJsonNull())
					partnerTypeID = userPartnerArray.get(i).getAsJsonObject().get("PartnerTypeID").getAsString();
				if(debug)
					response.getWriter().println("getUserPartnerDescriptionArray.partnerTypeID: "+partnerTypeID);
				
				executeURL = oDataURL+"PartnerTypes?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PartnerTypeID%20eq%20%27"+partnerTypeID+"%27";
				executeURL = executeURL.replace(" ", "%20");
				partnerTypesJson = commonUtils.executeURL(executeURL, authParam, response);
				if(debug)
					response.getWriter().println("getUserPartnerDescriptionArray.partnerTypesJson: "+partnerTypesJson);
				
				if ( partnerTypesJson.getAsJsonObject("d").getAsJsonArray("results").size()>0 ) {
					
					if ( ! partnerTypesJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("PartnerTypeDesc").isJsonNull()) 
						childuserPartnerObj.addProperty("PartnerTypeDesc", partnerTypesJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("PartnerTypeDesc").getAsString());
					else
						childuserPartnerObj.addProperty("PartnerTypeDesc","");
					
				}else
				{
					childuserPartnerObj.addProperty("PartnerTypeDesc","");
				}
				userPartnerDescripArray.add(childuserPartnerObj);
			}
			
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return userPartnerDescripArray;
	}
	
	public JsonArray getUserAuthDescriptionArray(HttpServletRequest request, HttpServletResponse response, JsonObject userAuthJson, String oDataURL, String aggregatorID,  String authParam,boolean debug) throws IOException
	{
		String executeURL="", authOrgTypeID="";
		JsonArray userAuthArray = new JsonArray();
		JsonObject orgTypesJson = new JsonObject();
		CommonUtils commonUtils = new CommonUtils();
		JsonArray userAuthDescripArray = new JsonArray();
		try {
			
			userAuthArray = userAuthJson.getAsJsonObject("d").getAsJsonArray("results");
			JsonObject childuserAuthObj = new JsonObject();
			for ( int i = 0; i < userAuthArray.size(); i++ ) {
				authOrgTypeID ="";
				childuserAuthObj = new JsonObject();
				orgTypesJson = new JsonObject();
				
				if( ! userAuthArray.get(i).getAsJsonObject().get("AuthOrgTypeID").isJsonNull())
					authOrgTypeID = userAuthArray.get(i).getAsJsonObject().get("AuthOrgTypeID").getAsString();
				if(debug)
					response.getWriter().println("getUserAuthDescriptionArray.authOrgTypeID: "+authOrgTypeID);
				
				executeURL = oDataURL+"OrgTypes?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20OrgTypeID%20eq%20%27"+authOrgTypeID+"%27";
				executeURL = executeURL.replace(" ", "%20");
				
				orgTypesJson = commonUtils.executeURL(executeURL, authParam, response);
				if(debug)
					response.getWriter().println("getUserAuthDescriptionArray.orgTypesJson: "+orgTypesJson);
				
				if ( orgTypesJson.getAsJsonObject("d").getAsJsonArray("results").size()>0 ) {
					
					if ( ! orgTypesJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OrgTypeDesc").isJsonNull()) 
						childuserAuthObj.addProperty("OrgTypeDesc", orgTypesJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("OrgTypeDesc").getAsString());
					else
						childuserAuthObj.addProperty("OrgTypeDesc","");
					
				}else
				{
					childuserAuthObj.addProperty("OrgTypeDesc","");
				}
				userAuthDescripArray.add(childuserAuthObj);
			}
			
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
	
		return userAuthDescripArray;
	}
	
	public JsonArray getUserLoginDescriptionArray(HttpServletRequest request, HttpServletResponse response, JsonObject userLoginJson, String oDataURL, String aggregatorID,  String authParam,boolean debug) throws IOException
	{
		String roleID ="",userFunction1ID="",userFunction2ID="",pcgwUrl="", executeConfigURL= "",executeURL="",userFunction1IDTypeName= "",userFunction2IDTypeName="";
		JsonObject partnerRoleJson = new JsonObject();
		JsonObject configTypesetJson = new JsonObject();
		JsonArray userLoginArray = new JsonArray();
		JsonArray userLoginDescripArray = new JsonArray();
		CommonUtils commonUtils = new CommonUtils();
		JsonObject childuserLoginObj = new JsonObject();;
		
		try {
			userFunction1ID="USRFN1";userFunction2ID="USRFN2";
			pcgwUrl = commonUtils.getODataDestinationProperties("URL", "PCGWHANA");

			userLoginArray = userLoginJson.getAsJsonObject("d").getAsJsonArray("results");
			
			//USRFN1
			executeConfigURL = pcgwUrl+"ConfigTypesetTypes?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Typeset%20eq%20%27"+userFunction1ID+"%27";
			configTypesetJson = commonUtils.executeURL(executeConfigURL, authParam, response);
			
			if (configTypesetJson.getAsJsonObject("d").getAsJsonArray("results").size() > 0) 
				userFunction1IDTypeName = configTypesetJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("TypesName").getAsString();
			else 
				userFunction1IDTypeName = "";
			
			executeConfigURL  = "";
			configTypesetJson = new JsonObject();
			//USRFN2
			executeConfigURL = pcgwUrl+"ConfigTypesetTypes?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20Typeset%20eq%20%27"+userFunction2ID+"%27";
			configTypesetJson = commonUtils.executeURL(executeConfigURL, authParam, response);
			
			if (configTypesetJson.getAsJsonObject("d").getAsJsonArray("results").size() >0)
				userFunction2IDTypeName = configTypesetJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("TypesName").getAsString();
			else 
				userFunction2IDTypeName ="";
			
			for ( int i = 0; i < userLoginArray.size(); i++ ) {
				
				roleID ="";
				childuserLoginObj = new JsonObject();
				partnerRoleJson = new JsonObject();
				userLoginArray.get(i).getAsJsonObject().remove("Source");
				userLoginArray.get(i).getAsJsonObject().remove("AggregatorID");

				if( ! userLoginArray.get(i).getAsJsonObject().get("RoleID").isJsonNull())
					roleID = userLoginArray.get(i).getAsJsonObject().get("RoleID").getAsString();
				if(debug)
					response.getWriter().println("getUserLoginDescriptionArray.roleID: "+roleID);
				
				executeURL = oDataURL+"PartnerRoles?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20RoleID%20eq%20%27"+roleID+"%27";
				if(debug)
					response.getWriter().println("getUserLoginDescriptionArray.executeURL.1: "+executeURL);
				
				partnerRoleJson = commonUtils.executeURL(executeURL, authParam, response) ;
				if(debug)
					response.getWriter().println("getUserLoginDescriptionArray.partnerRoleJson: "+partnerRoleJson);
				
				if ( partnerRoleJson.getAsJsonObject("d").getAsJsonArray("results").size()>0 ) {
					
					if ( ! partnerRoleJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("RoleDesc").isJsonNull()) 
						childuserLoginObj.addProperty("RoleDesc", partnerRoleJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("RoleDesc").getAsString());
					else
						childuserLoginObj.addProperty("RoleDesc","");
					
					if ( ! partnerRoleJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("RoleCatID").isJsonNull()) 
						childuserLoginObj.addProperty("RoleCatID", partnerRoleJson.getAsJsonObject("d").getAsJsonArray("results").get(0).getAsJsonObject().get("RoleCatID").getAsString());
					else
						childuserLoginObj.addProperty("RoleCatID","");
				}else
				{
					childuserLoginObj.addProperty("RoleDesc","");
					childuserLoginObj.addProperty("RoleCatID","");
				}
				
				//UserFunction1ID
				if( ! userLoginArray.get(i).getAsJsonObject().get("UserFunction1ID").isJsonNull() && 
						userLoginArray.get(i).getAsJsonObject().get("UserFunction1ID").getAsString().trim().length() > 0){
					childuserLoginObj.addProperty("UserFunction1Desc", userFunction1IDTypeName);
				}else
					childuserLoginObj.addProperty("UserFunction1Desc","");
				
				//UserFunction2ID
				if (! userLoginArray.get(i).getAsJsonObject().get("UserFunction2ID").isJsonNull() && 
						userLoginArray.get(i).getAsJsonObject().get("UserFunction2ID").getAsString().trim().length() > 0) {
					
					childuserLoginObj.addProperty("UserFunction2Desc",userFunction2IDTypeName);
				} else 
					childuserLoginObj.addProperty("UserFunction2Desc","");
				
				userLoginDescripArray.add(childuserLoginObj);
			}
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return userLoginDescripArray;
	}
	
	public JsonArray getRepaymentsDescriptionByTypeset(HttpServletRequest request, HttpServletResponse response, String typeset, String StatusID, String oDataURL, 
			String aggregatorID,  String authParam,boolean debug) throws IOException
	{
		String PGCategoryDesc= "",PGTxnStatusDesc="", PaymnetStatusDesc="",PGPaymentPostingStatusDesc="", executeURL="";
		JsonObject configTypesetJson = new JsonObject();
		JsonArray configTypesetJsonArray = new JsonArray();
//		Map<String, String> paymentStatusMap = new HashMap<String, String>();
		
		try {
			 executeURL = oDataURL+"ConfigTypesetTypes?$filter=Typeset%20eq%20%27"+typeset+"%27%20and%20Types%20eq%20%27"+StatusID+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
			 executeURL = executeURL.replace(" ", "%20");
			 if(debug)
				 response.getWriter().println("getRepaymentsDescription.executeURL.1: "+executeURL);
			 
			 configTypesetJson = executeURL(executeURL, authParam, response);
			 if(debug)
				 response.getWriter().println("getRepaymentsDescription.configTypesetJson"+configTypesetJson);
			 
			 configTypesetJsonArray = configTypesetJson.getAsJsonObject("d").getAsJsonArray("results");
//			 if(debug)
//				 response.getWriter().println("getRepaymentsDescription.configTypesetJsonArray.: "+configTypesetJsonArray);
			 
		} catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
		}
		return configTypesetJsonArray;
	}
	
	public Destination getCPIDestination(HttpServletRequest request, HttpServletResponse response) throws IOException{
		//get the destination name from the request
		String destinationName = "";
//		LOGGER.info("4. destination name from request: "+destinationName);	
		//check destination null condition
		destinationName = CPI_CONNECT_DEST_NAME;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;

		try {
			// look up the connectivity configuration API "connectivityConfiguration"
//			Context ctxConnConfgn = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxConnConfgn.lookup("java:comp/env/connectivityConfiguration");
//			destConfiguration = configuration.getConfiguration(destinationName);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destinationName, options);
			destConfiguration = destinationAccessor.get();
//			LOGGER.info("5. destination configuration object created");	
		} catch (Exception e) {
			// Lookup of destination failed
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
					String.format("Destination %s is not found. Hint:"
							+ " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
//			LOGGER.error("Lookup of destination failed", e);
			//response.getWriter().println(" " +  errorMessage);
		} 
		return destConfiguration;
	}
	
	public JsonObject fetchByCIN(HttpServletRequest request, HttpServletResponse response, String aggregatorId, String cpGuid, String corpIdNo, Properties properties, 
			String cpType, String cpName, boolean debug) throws IOException{
		JsonObject responseJsonObject = new JsonObject();
		String userName="", passWord="", userpass = "", cpiEndPoint="", cpiDestUrl="", cpiResponse="", wsURL="";
		try{
			String destName = CPI_CONNECT_DEST_NAME;
			
			// Context ctxDestFact = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxDestFact.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration cpiDestConfig = configuration.getConfiguration(destName);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destName, options);
			Destination cpiDestConfig = destinationAccessor.get();

			wsURL = cpiDestConfig.get("URL").get().toString();
			
			userName = cpiDestConfig.get("User").get().toString();
			passWord = cpiDestConfig.get("Password").get().toString();
			userpass = userName+":"+passWord;
			cpiEndPoint = properties.getProperty("FetchbyCIN");
			
			cpiDestUrl = wsURL+cpiEndPoint;
			
			if(debug){
				response.getWriter().println("fetchByCIN.aggregatorId: "+aggregatorId);
				response.getWriter().println("fetchByCIN.cpiDestUrl: "+cpiDestUrl);
			}
			
			JsonObject dataPayload = new JsonObject();
			dataPayload.addProperty("AggregatorID", aggregatorId);
			dataPayload.addProperty("CPGuid", cpGuid);
			dataPayload.addProperty("CIN", corpIdNo);
			dataPayload.addProperty("CPType", cpType);
			dataPayload.addProperty("CPName", cpName);
			
			if(debug){
				response.getWriter().println("fetchByCIN.dataPayload: "+dataPayload);
			}
			
			JsonObject finalPayload = new JsonObject();
			finalPayload.add("FetchbyCIN", dataPayload);
			
			if(debug){
				response.getWriter().println("fetchByCIN.finalPayload: "+finalPayload);
			}
			
			try{
				URL url = new URL(cpiDestUrl);
				HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
				byte[] postDataBytes = finalPayload.toString().getBytes("UTF-8");
				urlConnection.setRequestMethod("GET");
				urlConnection.setRequestProperty("Content-Type", "application/json");
				urlConnection.setRequestProperty("charset", "utf-8");
				urlConnection.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
				urlConnection.setRequestProperty("Accept", "application/json");
				urlConnection.setDoOutput(true);
				urlConnection.setDoInput(true);
				
				String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userpass.getBytes());
				urlConnection.setRequestProperty("Authorization", basicAuth);
				urlConnection.connect();
				
				OutputStream os = urlConnection.getOutputStream();
				OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
				osw.write(finalPayload.toString());
				osw.flush();
				osw.close();
				
				if(debug){
					response.getWriter().println("getResponseCode: "+urlConnection.getResponseCode());
					response.getWriter().println("getResponseMessage: "+urlConnection.getResponseMessage());
				}
				
				StringBuffer sb = new StringBuffer();
				BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), "utf-8"));
				String line = null;
				while ((line = br.readLine()) != null) {
					sb.append(line + "\n");
				}
				br.close();
				
				if (debug)
					response.getWriter().println("sb: " + sb.toString());
				
				cpiResponse = sb.toString();
				
				JsonParser cpiResponseParser = new JsonParser();
				responseJsonObject = (JsonObject)cpiResponseParser.parse(cpiResponse); 
				
				
				if (debug)
					response.getWriter().println("responseJsonObject: "+responseJsonObject);
				
				if(responseJsonObject.has("Status")){
					if(responseJsonObject.get("Status").getAsString().trim().length() > 0){
						return responseJsonObject;
					}else{
						responseJsonObject = new JsonObject();
						responseJsonObject.addProperty("Status", "000002");
						responseJsonObject.addProperty("Message", "Unable to get response, please try after sometime");
						responseJsonObject.addProperty("ErrorCode", "J001");
						return responseJsonObject;
					}
				}else{
					responseJsonObject = new JsonObject();
					responseJsonObject.addProperty("Status", "000002");
					responseJsonObject.addProperty("Message", "Unable to get response, please try after sometime");
					responseJsonObject.addProperty("ErrorCode", "J001");
					return responseJsonObject;
				}
			}catch (Exception e) {
				responseJsonObject = new JsonObject();
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				if(debug){
					response.getWriter().print(new Gson().toJson("Exceptioj:"+e.getClass()));
					response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
				}
				
				responseJsonObject.addProperty("errorCode", "J002");
				responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
				responseJsonObject.addProperty("Status", properties.getProperty("ErrorStatus"));
				responseJsonObject.addProperty("Valid", "false");
				
				return responseJsonObject;
			}
		}catch (Exception e) {
			responseJsonObject = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			responseJsonObject.addProperty("Status", "000002");
			responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
			responseJsonObject.addProperty("Full Trace", buffer.toString());
			responseJsonObject.addProperty("ErrorCode", "J002");
			
			return responseJsonObject;
		}
	}
	
	public Destination getDestinationURL(HttpServletRequest request, HttpServletResponse response) throws IOException{
		//get the destination name from the request
		String destinationName = "";
//			LOGGER.info("4. destination name from request: "+destinationName);	
		//check destination null condition
		destinationName = PCGW_UTIL_DEST_NAME;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		try {
			// look up the connectivity configuration API "connectivityConfiguration"
//			Context ctxConnConfgn = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxConnConfgn.lookup("java:comp/env/connectivityConfiguration");
//			destConfiguration = configuration.getConfiguration(destinationName);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destinationName, options);
			destConfiguration = destinationAccessor.get();
//				LOGGER.info("5. destination configuration object created");	
		} catch (Exception e) {
			// Lookup of destination failed
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
					String.format("Destination %s is not found. Hint:"
							+ " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
//				LOGGER.error("Lookup of destination failed", e);
			//response.getWriter().println(" " +  errorMessage);
		} 
		return destConfiguration;
	}
	
	public String updatePGTransactionTest(HttpServletRequest request, HttpServletResponse response, String pgHdrGUID, String txnRefNo, String bankRefNo,
			String pgTxnStatus, String paymentStatus, String configHdrGuid, String csrfToken, boolean debug) throws IOException{
		JsonObject responseJsonObject = new JsonObject();
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", paymentConfigService="", paymentUpdateQuery="", basicAuth="", 
				sapclient="", sessionID="", loginMethod="", txnAmount="", cookie=""; 
		
		String returnMessage="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpPut pgPymntUpdate = null;
		HttpEntity pgPymntUpdateEntity = null;
		// CloseableHttpClient closableHttpClient = null;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		
		try{
			
			destConfiguration = getDestinationURL(request, response);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if(debug){
				response.getWriter().println("updatePGTransaction.pgHdrGUID:" + pgHdrGUID);
				response.getWriter().println("updatePGTransaction.pgTxnStatus:" + pgTxnStatus);
				response.getWriter().println("updatePGTransaction.configHdrGuid:" + configHdrGuid);
			}
			
			String loginID = commonUtils.getUserPrincipal(request, "name", response);
			
//			sapclient = destConfiguration.get("sap-client");
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			sapclient = destConfiguration.get("sap-client").get().toString();
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if (debug){
				response.getWriter().println("sapclient:" + sapclient);
				response.getWriter().println("authMethod:" + authMethod);
				response.getWriter().println("destURL:" + destURL);
			}
			
			if( null != authMethod && authMethod.equalsIgnoreCase("BasicAuthentication")){
				String url = commonUtils.getDestinationURL(request, response, "URL");
				if (debug)
					response.getWriter().println("url1:" + url);
				sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
			} else{
				loginMethod = destConfiguration.get("LoginMethod").get().toString();
				if(null != loginMethod && loginMethod.equalsIgnoreCase("Hybrid")){
					String url = commonUtils.getDestinationURL(request, response, "URL");
					if (debug){
						response.getWriter().println("url:" + url);
						response.getWriter().println("loginMethod:" + loginMethod);
					}
					sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
				}else{
					sessionID ="";
				}
			}
			
			if (debug)
				response.getWriter().println("sessionID1:" + sessionID);
			
			paymentUpdateQuery = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments(guid'"+pgHdrGUID+"')";
//	        paymentConfigService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPaymentConfigStats?sap-client="+ sapclient +"&$filter="+ paymentConfigFilter;
//	        paymentConfigFilter = "CHGuid eq guid'"+configHdrGuid+"' and PGTxnStatus eq '"+pgTxnStatus+"'";
			if (debug)
				response.getWriter().println("paymentUpdateQuery:" + paymentUpdateQuery);
			
			/*paymentUpdateQuery = URLEncoder.encode(paymentUpdateQuery, "UTF-8");
			
			paymentUpdateQuery = paymentUpdateQuery.replaceAll("%26", "&");
			paymentUpdateQuery = paymentUpdateQuery.replaceAll("%3D", "=");*/
			
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT")); */
		    if(debug){
			    /* response.getWriter().println("updatePGTransaction.proxyType: "+proxyType);
			    response.getWriter().println("updatePGTransaction.proxyHost: "+proxyHost);
			    response.getWriter().println("updatePGTransaction.proxyPort: "+proxyPort); */
			    response.getWriter().println("updatePGTransaction.csrfToken: "+csrfToken);
			    response.getWriter().println("updatePGTransaction.Cookie: "+request.getHeader("Cookie"));
		    }
		    cookie = request.getHeader("Cookie");
		    String[] splitResult = cookie.split(";");
		    
		    String key="", value="", prefix="JTENANTSESSIONID_", compareKey="", tenantSessionIDValue="";
		    /* compareKey = prefix+tenantContext.getTenant().getAccount().getId();
			for(String s : splitResult){
				key = s.substring(0, s.indexOf("="));
	        	value = s.substring(s.indexOf("=")+1,s.length());
	        	response.getWriter().println("Cookie Key: "+key+"|Value: "+value);
	        	
	        	if(key.equalsIgnoreCase(compareKey)){
	        		tenantSessionIDValue = value;
	        		response.getWriter().println("Required value: "+tenantSessionIDValue);
	        	}
			}
			
			if(debug)
				response.getWriter().println("tenantSessionIDValue: "+prefix+tenantSessionIDValue); */
			
		   /*  HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        
	        JSONObject updatePayLoad = new JSONObject();
	        updatePayLoad.accumulate("PGPaymentGUID", pgHdrGUID);
	        updatePayLoad.accumulate("PGTransactionID", bankRefNo);
	        updatePayLoad.accumulate("PGTxnStatusID", pgTxnStatus);
	        updatePayLoad.accumulate("TestRun", false);
	        
	        /* prefix = "SAP_SESSIONID_GWQ_300="+tenantSessionIDValue+"; Path=/;";
	        
	        if(debug){
				response.getWriter().println("updatePayLoad: "+updatePayLoad);
				response.getWriter().println("prefix: "+prefix);
	        } */
	        
	        pgPymntUpdateEntity = new StringEntity(updatePayLoad.toString());
	        
	        pgPymntUpdate = new HttpPut(paymentUpdateQuery);
	        
	        // pgPymntUpdate.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        pgPymntUpdate.setHeader("Content-Type", "application/json; charset=utf-8");
	        pgPymntUpdate.setHeader("Accept", "application/json");
	        pgPymntUpdate.setHeader("x-csrf-token", csrfToken);
//	        pgPymntUpdate.setHeader("X-Requested-With", "XMLHttpRequest");
//	        pgPymntUpdate.setHeader("Cookie", prefix);
//	        pgPymntUpdate.setHeader("Cookie", request.getHeader("Cookie"));
//	        pgPymntUpdate.setHeader("Set-Cookie", prefix+tenantSessionIDValue);
	        
//	        pgPymntUpdate.ad
	        
	        
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	pgPymntUpdate.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	pgPymntUpdate.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        pgPymntUpdate.setEntity(pgPymntUpdateEntity);
	        
	        if(debug){
	        	response.getWriter().println("pgPymntUpdate: "+pgPymntUpdate);
//	        	response.getWriter().println("pgPymntUpdate: "+pgPymntUpdate.get);
	        	Header[] headers = pgPymntUpdate.getAllHeaders();
	            for (Header header: headers) {
	            	response.getWriter().println("pgPymntUpdate Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
		        }
	        }
	        
	        HttpClientContext httpClientContext = HttpClientContext.create();
//	        cookieStore = httpClientContext.getCookieStore();
	        httpClientContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);
	        
	        try {
	            List<Cookie> cookies = cookieStore.getCookies();
	            if (cookies.isEmpty()) {
	            	response.getWriter().println("No cookies in Update");
	            } else {
	                for (int i = 0; i < cookies.size(); i++) {
	                	response.getWriter().println("Got Cookies in Update toString: " + cookies.get(i).toString());
	                	response.getWriter().println("Got Cookies in Update getName: " + cookies.get(i).getName());
	                	response.getWriter().println("Got Cookies in Update getValue: " + cookies.get(i).getValue());
	                }
	            }
//	            EntityUtils.consume(httpResponse.getEntity());
	        } catch (Exception e) {
//	        	StackTraceElement element[] = e.getStackTrace();
//				StringBuffer buffer = new StringBuffer();
//				for(int i=0;i<element.length;i++)
//				{
//					buffer.append(element[i]);
//				}
//				if(debug)
//					response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
				
				response.getWriter().println("updatePGTransaction.getMessage: "+e.getMessage());
				response.getWriter().println("updatePGTransaction.getClass: "+e.getClass());
				response.getWriter().println("updatePGTransaction.getCause: "+e.getCause());
			} 
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(pgPymntUpdate, httpClientContext);
	        HttpResponse httpResponse = client.execute(pgPymntUpdate, httpClientContext);
	        if(debug)
	        	response.getWriter().println("httpResponse: "+httpResponse);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        if(debug)
	        	response.getWriter().println("validatePaymentReq.statusCode: "+statusCode);
			
	        pgPymntUpdateEntity = httpResponse.getEntity();
	        
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
			}
			
			String retSrc = EntityUtils.toString(pgPymntUpdateEntity);
			if(debug)
	        	response.getWriter().println("updatePGTransaction.retSrc: "+retSrc);
			
			
//			-----------------------
//			httpResponse.getHeaders("set-cookie");
			String sessionValue="";
//			if(debug){
	        	Header[] headers = httpResponse.getAllHeaders();
	            for (Header header: headers) {
	            	response.getWriter().println("httpResponse Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
	            	
//	            	if()
		        }
//	        }
	        String cookieValue = "";
			HttpEntity tempEntity = new StringEntity(updatePayLoad.toString());
			HttpPut tempPut = new HttpPut(paymentUpdateQuery);
			// tempPut.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
			tempPut.setHeader("Content-Type", "application/json; charset=utf-8");
			tempPut.setHeader("Accept", "application/json");
			tempPut.setHeader("x-csrf-token", csrfToken);
//			tempPut.setHeader("set-cookie", prefix);
			Header[] header1 = httpResponse.getAllHeaders();
            for (Header header: header1) {
            	if(header.getName().equalsIgnoreCase("set-cookie")){
            		if(cookieValue.trim().length() > 0)
            			cookieValue = cookieValue+"; "+header.getValue();
            		else
            			cookieValue = cookieValue+header.getValue();
            	}
	        }
            tempPut.setHeader("Cookie", cookieValue);
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	tempPut.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	tempPut.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        tempPut.setEntity(tempEntity);
	        
	        
	        response.getWriter().println("tempPut.getHeader: "+tempPut.getHeaders("set-cookie"));
//	        response.getWriter().println("tempPut.getHeader: "+response.geth);
	        
	        if(debug){
	        	response.getWriter().println("sent cookieValue: "+cookieValue);
	        	response.getWriter().println("tempPut: "+tempPut);
//	        	response.getWriter().println("pgPymntUpdate: "+pgPymntUpdate.get);
	        	Header[] headers3 = tempPut.getAllHeaders();
	            for (Header header: headers3) {
	            	response.getWriter().println("tempPut Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
		        }
	        }
	        
	        // HttpResponse httpResponse1 = closableHttpClient.execute(tempPut);
			HttpResponse httpResponse1 = client.execute(tempPut);
	        
	        if(debug)
	        	response.getWriter().println("httpResponse1: "+httpResponse1);
	        
	        int statusCode1 = httpResponse1.getStatusLine().getStatusCode();
	        if(debug)
	        	response.getWriter().println("validatePaymentReq.statusCode1: "+statusCode1);
			
	        tempEntity = httpResponse1.getEntity();
	        
			if(debug){
				response.getWriter().println("httpResponse1.getStatusCode: "+httpResponse1.getStatusLine().getStatusCode());
			}
			
			String retSrc1 = EntityUtils.toString(tempEntity);
			if(debug)
	        	response.getWriter().println("updatePGTransaction.retSrc1: "+retSrc1);
	        
		}catch (Exception e) {
			responseJsonObject = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			response.getWriter().println("updatePGTransaction.getMessage: "+e.getMessage());
			response.getWriter().println("updatePGTransaction.getClass: "+e.getClass());
			response.getWriter().println("updatePGTransaction.getCause: "+e.getCause());
			
			responseJsonObject.addProperty("Status", "000002");
			responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
			responseJsonObject.addProperty("Full Trace", buffer.toString());
			responseJsonObject.addProperty("ErrorCode", "J002");
			
			returnMessage = e.getMessage();
			return returnMessage;
		}
		
		return returnMessage;
	}
	
	public String isBankTrackIDProcessed(HttpServletRequest request, HttpServletResponse response, String encrPGGuid, String bankRefNo, boolean debug) throws IOException{
		JsonObject responseJsonObject = new JsonObject();
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", paymentGetService="", paymentGetFilter="", basicAuth="", 
				sapclient="", sessionID="", loginMethod="", txnRefNo="", txnAmount=""; 
		
		String returnMessage="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet pgPymntTxnGet = null;
		HttpEntity pgPymntTxnGetEntity = null;
		// CloseableHttpClient closableHttpClient = null;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		try{
			destConfiguration = getDestinationURL(request, response);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if(debug){
				response.getWriter().println("isBankTrackIDProcessed.encrPGGuid:" + encrPGGuid);
				response.getWriter().println("isBankTrackIDProcessed.bankRefNo:" + bankRefNo);
			}
			
			String loginID = commonUtils.getUserPrincipal(request, "name", response);
			
//			sapclient = destConfiguration.get("sap-client");
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			sapclient = destConfiguration.get("sap-client").get().toString();
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if (debug){
				response.getWriter().println("sapclient:" + sapclient);
				response.getWriter().println("authMethod:" + authMethod);
				response.getWriter().println("destURL:" + destURL);
			}
			
			if( null != authMethod && authMethod.equalsIgnoreCase("BasicAuthentication")){
				String url = commonUtils.getDestinationURL(request, response, "URL");
				if (debug)
					response.getWriter().println("url1:" + url);
				sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
			} else{
				loginMethod = destConfiguration.get("LoginMethod").get().toString();
				if(null != loginMethod && loginMethod.equalsIgnoreCase("Hybrid")){
					String url = commonUtils.getDestinationURL(request, response, "URL");
					if (debug){
						response.getWriter().println("url:" + url);
						response.getWriter().println("loginMethod:" + loginMethod);
					}
					sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
				}else{
					sessionID ="";
				}
			}
			if (debug)
				response.getWriter().println("sessionID1:" + sessionID);
			
			paymentGetFilter = "PGTransactionID eq '"+bankRefNo+"'";
			if (debug)
				response.getWriter().println("paymentGetFilter:" + paymentGetFilter);
			
			paymentGetFilter = URLEncoder.encode(paymentGetFilter, "UTF-8");
			
			paymentGetFilter = paymentGetFilter.replaceAll("%26", "&");
			paymentGetFilter = paymentGetFilter.replaceAll("%3D", "=");
			
			if (debug)
				response.getWriter().println("paymentGetFilter: "+paymentGetFilter);
			
			if(sapclient != null){
				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments?sap-client="+ sapclient +"&$filter="+ paymentGetFilter;
			}
			else{
				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments?$filter="+ paymentGetFilter;
			}
			
			if (debug)
				response.getWriter().println("paymentGetService 1: "+paymentGetService);
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
//				userName = destConfiguration.get("User");
//				password = destConfiguration.get("Password");
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("isBankTrackIDProcessed.proxyType: "+proxyType);
			    response.getWriter().println("isBankTrackIDProcessed.proxyHost: "+proxyHost);
			    response.getWriter().println("isBankTrackIDProcessed.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        pgPymntTxnGet = new HttpGet(paymentGetService);
	        // pgPymntTxnGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        pgPymntTxnGet.setHeader("content-type", "application/json");
	        pgPymntTxnGet.setHeader("Accept", "application/json");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	pgPymntTxnGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	pgPymntTxnGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
//	        if(debug)
//	        	response.getWriter().println("pgPymntConfigStats: "+pgPymntConfigStats);
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(pgPymntTxnGet);
			HttpResponse httpResponse = client.execute(pgPymntTxnGet);
	        
	        if(debug)
	        	response.getWriter().println("httpResponse: "+httpResponse);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        if(debug)
	        	response.getWriter().println("isBankTrackIDProcessed.statusCode: "+statusCode);
	        
	        pgPymntTxnGetEntity = httpResponse.getEntity();
	        
	        if(pgPymntTxnGetEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		       
				String retSrc = EntityUtils.toString(pgPymntTxnGetEntity);
				if(debug)
		        	response.getWriter().println("isBankTrackIDProcessed.retSrc: "+retSrc);
				
				JsonParser parser = new JsonParser();
				JsonObject pymntConfigStatsObj = (JsonObject)parser.parse(retSrc);
				
				if(pymntConfigStatsObj.has("d")){
					if(pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
						returnMessage = pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("PGTransactionID").getAsString();
						
						if(pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("PaymentStatusID").getAsString().equalsIgnoreCase("000100")){
							returnMessage = "No";
							return returnMessage;
						}else{
							returnMessage = "Transaction with Bank Reference No: "+bankRefNo+" is already processed with the TrackID: "+pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("TrackID").getAsString();
							return returnMessage;
						}
					}else{
						returnMessage = "No";
						return returnMessage;
					}
				}else{
					return "Error: "+retSrc;
				}
			}else{
				returnMessage = "PGPymntConfigStatsEntity returned null when trying to connect to the backend";
				return returnMessage;
			}
		}catch (Exception e) {
			responseJsonObject = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			responseJsonObject.addProperty("Status", "000002");
			responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
			responseJsonObject.addProperty("Full Trace", buffer.toString());
			responseJsonObject.addProperty("ErrorCode", "J002");
			
			returnMessage = "Exception: "+e.getMessage();
			return returnMessage;
		}
	}
	
	public String getConfigStatus(HttpServletRequest request, HttpServletResponse response, String pgHdrGUID, String pgTxnStatus, String configHdrGuid, boolean debug) throws IOException{
		JsonObject responseJsonObject = new JsonObject();
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", paymentConfigService="", paymentConfigFilter="", basicAuth="", 
				sapclient="", sessionID="", loginMethod="", txnRefNo="", txnAmount=""; 
		
		String returnMessage="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet pgPymntConfigStats = null;
		HttpEntity pgPymntConfigStatsEntity = null;
		// CloseableHttpClient closableHttpClient = null;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		
		try{
			destConfiguration = getDestinationURL(request, response);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			if(debug){
				response.getWriter().println("postPGTransaction.pgHdrGUID:" + pgHdrGUID);
				response.getWriter().println("postPGTransaction.pgTxnStatus:" + pgTxnStatus);
				response.getWriter().println("postPGTransaction.configHdrGuid:" + configHdrGuid);
			}
			
			String loginID = commonUtils.getUserPrincipal(request, "name", response);
			
//			sapclient = destConfiguration.get("sap-client");
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			sapclient = destConfiguration.get("sap-client").get().toString();
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if (debug){
				response.getWriter().println("sapclient:" + sapclient);
				response.getWriter().println("authMethod:" + authMethod);
				response.getWriter().println("destURL:" + destURL);
			}
			
			if( null != authMethod && authMethod.equalsIgnoreCase("BasicAuthentication")){
				String url = commonUtils.getDestinationURL(request, response, "URL");
				if (debug)
					response.getWriter().println("url1:" + url);
				sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
			} else{
				loginMethod = destConfiguration.get("LoginMethod").get().toString();
				if(null != loginMethod && loginMethod.equalsIgnoreCase("Hybrid")){
					String url = commonUtils.getDestinationURL(request, response, "URL");
					if (debug){
						response.getWriter().println("url:" + url);
						response.getWriter().println("loginMethod:" + loginMethod);
					}
					sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
				}else{
					sessionID ="";
				}
			}
			if (debug)
				response.getWriter().println("sessionID1:" + sessionID);
			
			paymentConfigFilter = "CHGuid eq guid'"+configHdrGuid+"' and PGTxnStatus eq '"+pgTxnStatus+"'";
			if (debug)
				response.getWriter().println("paymentFilter:" + paymentConfigFilter);
			
			paymentConfigFilter = URLEncoder.encode(paymentConfigFilter, "UTF-8");
			
			paymentConfigFilter = paymentConfigFilter.replaceAll("%26", "&");
			paymentConfigFilter = paymentConfigFilter.replaceAll("%3D", "=");
			
			if (debug)
				response.getWriter().println("paymentConfigFilter: "+paymentConfigFilter);
			
			
			if(sapclient != null){
				paymentConfigService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPaymentConfigStats?sap-client="+ sapclient +"&$filter="+ paymentConfigFilter;
			}
			else{
				paymentConfigService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPaymentConfigStats?$filter="+ paymentConfigFilter;
			}
			
			if (debug)
				response.getWriter().println("paymentConfigService 1: "+paymentConfigService);
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("paymentConfigService.proxyType: "+proxyType);
			    response.getWriter().println("paymentConfigService.proxyHost: "+proxyHost);
			    response.getWriter().println("paymentConfigService.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
//	        response.getWriter().println("routePlanner: "+routePlanner);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        pgPymntConfigStats = new HttpGet(paymentConfigService);
	        // pgPymntConfigStats.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        pgPymntConfigStats.setHeader("content-type", "application/json");
	        pgPymntConfigStats.setHeader("Accept", "application/json");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	pgPymntConfigStats.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	pgPymntConfigStats.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
//	        if(debug)
//	        	response.getWriter().println("pgPymntConfigStats: "+pgPymntConfigStats);
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(pgPymntConfigStats);
			HttpResponse httpResponse = client.execute(pgPymntConfigStats);
	        
	        if(debug)
	        	response.getWriter().println("httpResponse: "+httpResponse);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        if(debug)
	        	response.getWriter().println("paymentConfigService.statusCode: "+statusCode);
			
	        pgPymntConfigStatsEntity = httpResponse.getEntity();
	        
	        if(pgPymntConfigStatsEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		       
				String retSrc = EntityUtils.toString(pgPymntConfigStatsEntity);
//				if(debug)
//		        	response.getWriter().println("paymentConfigService.retSrc: "+retSrc);
				
				JsonParser parser = new JsonParser();
				JsonObject pymntConfigStatsObj = (JsonObject)parser.parse(retSrc);
				
				if(pymntConfigStatsObj.has("d")){
					if(pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
						returnMessage = pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("PymntStatus").getAsString();
						return returnMessage;
						/*
						if(pymntConfigStatsObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject().get("PGTxnAmount").getAsString().trim().equalsIgnoreCase(txnAmount)){
							returnMessage = "Success";
							return returnMessage;
						}else{
							returnMessage = "Payment Amount mismatch";
							return returnMessage;
						}
					*/}else{
						returnMessage = "Status configurations not maintained";
						return returnMessage;
					}
				}else{
					return "Error: "+retSrc;
				}
			}else{
				returnMessage = "PGPymntConfigStatsEntity returned null when trying to connect to the backend";
				return returnMessage;
			}
		}catch (Exception e) {
			responseJsonObject = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			responseJsonObject.addProperty("Status", "000002");
			responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
			responseJsonObject.addProperty("Full Trace", buffer.toString());
			responseJsonObject.addProperty("ErrorCode", "J002");
			
			returnMessage = "Exception: "+e.getMessage();
			return returnMessage;
		}
	}
	
	public String generateCSRFTokenForPCGW(HttpServletRequest request, HttpServletResponse response, boolean debug) throws IOException{
		JsonObject responseJsonObject = new JsonObject();
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", csrfTokenService="", csrfTokenServiceURL="", basicAuth="", 
			csrfToken="", sapclient=""; 
		
		boolean csrfFetchSuccess = false;
		
		String returnMessage="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet csrfTokenGet = null;
		HttpEntity csrfFetchEntity = null;
		// CloseableHttpClient closableHttpClient = null;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		
		try{
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			destConfiguration = getDestinationURL(request, response);
			
			String loginID = commonUtils.getUserPrincipal(request, "name", response);
			
//			sapclient = destConfiguration.get("sap-client");
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			sapclient = destConfiguration.get("sap-client").get().toString();
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if (debug){
				response.getWriter().println("sapclient:" + sapclient);
				response.getWriter().println("authMethod:" + authMethod);
				response.getWriter().println("destURL:" + destURL);
			}
			
			csrfTokenService = destURL+"/sap/opu/odata/ARTEC/PCGW";
			
			if (debug)
				response.getWriter().println("csrfTokenService: "+csrfTokenService);
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("validateCustomer.proxyType: "+proxyType);
			    response.getWriter().println("validateCustomer.proxyHost: "+proxyHost);
			    response.getWriter().println("validateCustomer.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        
	        csrfTokenGet = new HttpGet(csrfTokenService);
	        // csrfTokenGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        csrfTokenGet.setHeader("x-csrf-token", "Fetch");
//	        csrfTokenGet.setHeader("Accept-Encoding", "gzip, deflate, br");
	        // csrfTokenGet.setHeader("x-csrf-token", "Fetch");
	        csrfTokenGet.setHeader("X-Requested-With", "XMLHttpRequest");
	        
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	csrfTokenGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	csrfTokenGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        if(debug)
	        	response.getWriter().println("csrfTokenGet: "+csrfTokenGet);
	        
	        HttpClientContext httpClientContext = HttpClientContext.create();
	        // HttpResponse httpResponse = closableHttpClient.execute(csrfTokenGet, httpClientContext);
			HttpResponse httpResponse = client.execute(csrfTokenGet, httpClientContext);
	        
	        CookieStore cookieStore = httpClientContext.getCookieStore();
	        httpClientContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);
	        
	        /*try {
	            List<Cookie> cookies = cookieStore.getCookies();
	            if (cookies.isEmpty()) {
	            	response.getWriter().println("No cookies");
	            } else {
	                for (int i = 0; i < cookies.size(); i++) {
	                	response.getWriter().println("Got Cookies toString: " + cookies.get(i).toString());
	                	response.getWriter().println("Got Cookies getName: " + cookies.get(i).getName());
	                	response.getWriter().println("Got Cookies getValue: " + cookies.get(i).getValue());
	                }
	            }
//	            EntityUtils.consume(httpResponse.getEntity());
	        } finally {
//	        	httpResponse.getClass()
	        }*/
	        
	        if(debug)
	        	response.getWriter().println("httpResponse: "+httpResponse);
	        
	        /*List<Cookie> cookies = ((CookieStore)request.getServletContext().getAttribute(HttpClientContext.COOKIE_STORE)).getCookies();
//	        List<Cookie> cookies = ((CookieStore)csrfTokenGet. Attribute(HttpClientContext.COOKIE_STORE)).getCookies();
	        
	        for(Cookie cookie : cookies) {
	        	response.getWriter().println("cookie.getName: "+cookie.getName());
	        	response.getWriter().println("cookie.getValue: "+cookie.getValue());
	        	response.getWriter().println("cookie.getDomain: "+cookie.getDomain());
	        	response.getWriter().println("cookie.getPath: "+cookie.getPath());
	        }*/
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        
	        Header[] headers = httpResponse.getAllHeaders();
            for (Header header: headers) {
            	response.getWriter().println("Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
            	
            	if(header.getName().trim().equalsIgnoreCase("x-csrf-token")){
	            	csrfToken = header.getValue().toString();
            		csrfFetchSuccess = true;
//            		break;
            	}
	        }
            
            if(! csrfFetchSuccess){
            	csrfToken = "Failure";
            }
	        
	        if(debug){
	        	response.getWriter().println("csrfTokenGet.statusCode: "+statusCode);
	        	response.getWriter().println("csrfTokenGet.csrfToken: "+csrfToken);
	        }
			
	        csrfFetchEntity = httpResponse.getEntity();
	        
	        if(csrfFetchEntity != null)
			{
				String retSrc = EntityUtils.toString(csrfFetchEntity);
				
				if(debug)
		        	response.getWriter().println("csrfFetchEntity.retSrc: "+retSrc);
			}else{
				returnMessage = "PGPymntConfigStatsEntity returned null when trying to connect to the backend";
				return returnMessage;
			}
		
		}catch (Exception e) {
			responseJsonObject = new JsonObject();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			responseJsonObject.addProperty("Status", "000002");
			responseJsonObject.addProperty("Message", e.getMessage()+">"+e.getClass());
			responseJsonObject.addProperty("Full Trace", buffer.toString());
			responseJsonObject.addProperty("ErrorCode", "J002");
			
			returnMessage = "Exception: "+e.getMessage();
			return returnMessage;
		}
		
		return csrfToken;
	}
	
	public String getSecretKeyForCreds(HttpServletRequest request, HttpServletResponse response, boolean debug) throws IOException{
		String returnValue = "", message = "", executeURL="", aggregatorID = "", cpType = "", userPass="", userName="", password="", oDataUrl="", cpGuid="";
		JsonObject httpJsonResult = new JsonObject();
		JsonObject returnObject = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"H2HApplicationConfigs?$filter=SenderID%20eq%20%27"+aggregatorID+"%27%20and%ApplicationID%20eq%20%27CREDENTIAL%27";
			if(debug){
				response.getWriter().println("getSecretKeyForCreds.executeURL: "+executeURL);
			}
			
			httpJsonResult = executeURL(executeURL, userPass, response);
			if(debug){
				response.getWriter().println("getSecretKeyForCreds.httpJsonResult: "+httpJsonResult);
			}
			
			if(httpJsonResult.has("d") && httpJsonResult.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
				for(int i=0 ; i<httpJsonResult.get("d").getAsJsonObject().get("results").getAsJsonArray().size() ; i++){
					returnValue = httpJsonResult.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("EncryptionKey").getAsString();
					
					break;
				}
				return returnValue;
			}else{
				returnValue = "Encryption Key Not Found";
				return returnValue;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().print(new Gson().toJson("Full Stack Trace:"+buffer.toString()));
			
			returnValue = "Exception: "+e.getClass()+"|"+e.getMessage()+"|"+e.getCause();
			
			return returnValue;
		}
	}
	
	public String encrypt(HttpServletRequest request, HttpServletResponse response, String textToEncrypt, String encryptionKey, boolean debug) throws Exception {
		byte[] ivBytes;
		String returnValue = "";
		
		try{
			SecureRandom random = new SecureRandom();
		    byte bytes[] = new byte[20];
		    random.nextBytes(bytes);
		    byte[] saltBytes = bytes;
		    
		    SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
		    PBEKeySpec spec = new PBEKeySpec(encryptionKey.toCharArray(),saltBytes,PBKDF2_ITERATIONS,HASH_BYTE_SIZE);
		    
		    SecretKey secretKey = factory.generateSecret(spec);
		    SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), "AES");
		    
		    //encrypting the word
		     Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		     cipher.init(Cipher.ENCRYPT_MODE, secret);
		     AlgorithmParameters params = cipher.getParameters();
		     ivBytes =   params.getParameterSpec(IvParameterSpec.class).getIV();
		     byte[] encryptedTextBytes = cipher.doFinal(textToEncrypt.getBytes("UTF-8"));
		     
		     //prepend salt and vi
		     byte[] buffer = new byte[saltBytes.length + ivBytes.length + encryptedTextBytes.length];
		     System.arraycopy(saltBytes, 0, buffer, 0, saltBytes.length);
		     System.arraycopy(ivBytes, 0, buffer, saltBytes.length, ivBytes.length);
		     
		     System.arraycopy(encryptedTextBytes, 0, buffer, saltBytes.length + ivBytes.length, encryptedTextBytes.length);
		     
		     if(debug)
		    	 response.getWriter().println("encodeToString: "+Base64.getEncoder().encodeToString(buffer));
//		     return buffer.toString();
//		     return new Base64().encodeToString(buffer);
		     return Base64.getEncoder().encodeToString(buffer);
		}catch(Exception e) {
			e.printStackTrace();
//			System.out.println(e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug){
				response.getWriter().println("Exception Trace: "+buffer.toString());
//	    		System.out.println("Main Exception: "+buffer.toString());
				response.getWriter().println("getMessage: "+e.getMessage());
				response.getWriter().println("getClass: "+e.getClass().getSimpleName());
				response.getWriter().println("getCause: "+e.getCause());
			}
			returnValue = "Exception: "+e.getClass()+"|"+e.getMessage()+"|"+e.getCause();
			return returnValue;
		}
	}
	
	public String getGetBody(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String body = "";
		
		StringBuffer jb = new StringBuffer();
		String line = null;
		try {
			BufferedReader reader = request.getReader();
			while ((line = reader.readLine()) != null)
				jb.append(line);
		} catch (Exception e) { /*report an error*/ }
		body = jb.toString();
		return body;
	}
	
	public String aesEncode(String jsonText, String key, byte[] ivBytes)
			throws java.io.UnsupportedEncodingException,
			NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException,
			IllegalBlockSizeException, BadPaddingException 
	{
		byte[] textBytes = jsonText.getBytes("UTF-8");
		AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivBytes);
		SecretKeySpec newKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
		Cipher cipher = null;
		cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, newKey, ivSpec);
		return Base64.getEncoder().encodeToString(cipher.doFinal(textBytes));
	}
	
	public String aesDecode(String encryptedText, String key, byte[] ivBytes)
			throws java.io.UnsupportedEncodingException,
			NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException,
			IllegalBlockSizeException, BadPaddingException 
	{
		byte[] textBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encryptedText);
		AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivBytes);
		SecretKeySpec newKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, newKey, ivSpec);
		return new String(cipher.doFinal(textBytes), "UTF-8");
	}
	
	public String generateCsrfTokenForCredStore(HttpServletRequest request, HttpServletResponse response, boolean debug) throws IOException{
		String csrfToken="";
		String cpiUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="", authMethod="", authParam="", basicAuth="";
		
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet csrfFetch = null;
		HttpEntity csrfFetchEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		
		try{
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(ARTERIA_CPIDEST);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(ARTERIA_CPIDEST, options);
			Destination destConfiguration = destinationAccessor.get();
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", ARTERIA_CPIDEST));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			cpiUrl = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			executeURL = cpiUrl+"api/v1";
//			executeURL="https://arteriatest.apimanagement.ap1.hana.ondemand.com/FetchCSRFToken";
			if(debug){
				response.getWriter().println("generateCsrfTokenForCredStore.executeURL: "+executeURL);
				response.getWriter().println("generateCsrfTokenForCredStore.userName: "+userName);
				response.getWriter().println("generateCsrfTokenForCredStore.password: "+password);
				response.getWriter().println("generateCsrfTokenForCredStore.authMethod: "+authMethod);
//				response.getWriter().println("generateCsrfTokenForCredStore.authParam: "+authParam);
				response.getWriter().println("generateCsrfTokenForCredStore.authParam: "+basicAuth);
			}
	        
	        HttpClient client = HttpClients.createDefault();
	        csrfFetch = new HttpGet(executeURL);
	        csrfFetch.setHeader("X-CSRF-Token", "Fetch");
	        csrfFetch.setHeader("Authorization",basicAuth);

	        HttpResponse httpResponse = client.execute(csrfFetch);
			csrfFetchEntity = httpResponse.getEntity();
			
			int responseCode = httpResponse.getStatusLine().getStatusCode();
			if(debug)
				response.getWriter().println("generateCsrfTokenForCredStore.responseCode: "+responseCode);
			
			Header[] headers = httpResponse.getAllHeaders();
            for (Header header: headers) {
            	response.getWriter().println("generateCsrfTokenForCredStore Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
            	if(header.getName().equalsIgnoreCase("X-CSRF-Token")){
            		csrfToken = header.getValue();
            	}
	        }
			
            if(csrfToken.equalsIgnoreCase("")){
            	csrfToken = "Unable to fetch CSRF Token";
            }
//			String retSrc = EntityUtils.toString(csrfFetchEntity);
//			response.getWriter().println("generateCsrfTokenForCredStore.retSrc: "+retSrc);
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("generateCsrfTokenForCredStore-Exception Stack Trace: "+buffer.toString());
				response.getWriter().println("generateCsrfTokenForCredStore-getMessage: "+e.getMessage());
				response.getWriter().println("generateCsrfTokenForCredStore-getCause: "+e.getCause());
				response.getWriter().println("generateCsrfTokenForCredStore-getClass: "+e.getClass());
				response.getWriter().println("generateCsrfTokenForCredStore-getLocalizedMessage: "+e.getLocalizedMessage());
			}
			
			csrfToken = "Exception when generating CSRF Token: "+e.getCause()+"::"+e.getMessage();
		}
		return csrfToken;
	}
	
	public String createCredential(HttpServletRequest request, HttpServletResponse response, String csrfToken, 
			JsonObject insertPayload, boolean debug) throws IOException{
		String cpiUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="", authMethod="", authParam="", basicAuth="";
		String createStatus="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpPost createCredentials = null;
		HttpEntity requestEntity = null;
		HttpEntity createCredentialsEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		
		try{
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(ARTERIA_CPIDEST);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(ARTERIA_CPIDEST, options);
			Destination destConfiguration = destinationAccessor.get();
			
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", ARTERIA_CPIDEST));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			cpiUrl = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			executeURL = cpiUrl+"api/v1/UserCredentials";
//			executeURL = "https://arteriatest.apimanagement.ap1.hana.ondemand.com/CreateCredentials";
			if(debug){
				response.getWriter().println("createCredential.executeURL: "+executeURL);
				response.getWriter().println("createCredential.userName: "+userName);
				response.getWriter().println("createCredential.csrfToken: "+csrfToken);
				response.getWriter().println("createCredential.authMethod: "+authMethod);
				response.getWriter().println("createCredential.basicAuth: "+basicAuth);
			}
	        
	        HttpClient client = HttpClients.createDefault();
	        createCredentials = new HttpPost(executeURL);
	        createCredentials.setHeader("X-CSRF-Token", csrfToken);
	        createCredentials.setHeader("Authorization",basicAuth);
	        createCredentials.setHeader("Content-Type","application/json");
	        requestEntity = new StringEntity(insertPayload.toString());
	        createCredentials.setEntity(requestEntity);

	        HttpResponse httpResponse = client.execute(createCredentials);
	        createCredentialsEntity = httpResponse.getEntity();
			
			int responseCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println("createCredential.responseCode: "+responseCode);
				response.getWriter().println("createCredential.getStatusLine: "+httpResponse.getStatusLine());
				response.getWriter().println("createCredential.getContent: "+createCredentialsEntity.getContent());
			}
			
			Header[] headers = httpResponse.getAllHeaders();
            for (Header header: headers) {
            	response.getWriter().println("createCredential Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
	        }
			
            if(responseCode == 200 || responseCode == 201 || responseCode == 202 || responseCode == 203 || responseCode == 204){
            	createStatus = "Success";
            }else{
            	createStatus = "Creation Failed with http status: "+responseCode;
            }
            
            String retSrc = EntityUtils.toString(createCredentialsEntity);
			response.getWriter().println("createCredentialsEntity.retSrc: "+retSrc);
           /* if(csrfToken.equalsIgnoreCase("")){
            	csrfToken = "Unable to fetch CSRF Token";
            }*/
//			String retSrc = EntityUtils.toString(csrfFetchEntity);
//			response.getWriter().println("generateCsrfTokenForCredStore.retSrc: "+retSrc);
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("createCredential-Exception Stack Trace: "+buffer.toString());
				response.getWriter().println("createCredential-getMessage: "+e.getMessage());
				response.getWriter().println("createCredential-getCause: "+e.getCause());
				response.getWriter().println("createCredential-getClass: "+e.getClass());
				response.getWriter().println("createCredential-getLocalizedMessage: "+e.getLocalizedMessage());
			}
			
			createStatus = "Exception when creating: "+e.getCause()+"::"+e.getMessage();
		}
		return createStatus;
	}
	
	public String updateCredential(HttpServletRequest request, HttpServletResponse response, String csrfToken, 
			JsonObject updatePayload, boolean debug) throws IOException{
		String cpiUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="", authMethod="", authParam="", basicAuth="";
		String createStatus="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpPut createCredentials = null;
		HttpEntity requestEntity = null;
		HttpEntity createCredentialsEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		
		try{
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(ARTERIA_CPIDEST);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(ARTERIA_CPIDEST, options);
			Destination destConfiguration = destinationAccessor.get();
			
			if (destConfiguration == null) {
				 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", ARTERIA_CPIDEST));
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			cpiUrl = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			executeURL = cpiUrl+"api/v1/UserCredentials";
			if(debug){
				response.getWriter().println("updateCredential.executeURL: "+executeURL);
				response.getWriter().println("updateCredential.userName: "+userName);
				response.getWriter().println("updateCredential.csrfToken: "+csrfToken);
				response.getWriter().println("updateCredential.authMethod: "+authMethod);
				response.getWriter().println("updateCredential.basicAuth: "+basicAuth);
			}
	        
	        HttpClient client = HttpClients.createDefault();
	        createCredentials = new HttpPut(executeURL);
	        createCredentials.setHeader("X-CSRF-Token", csrfToken);
	        createCredentials.setHeader("Authorization",basicAuth);
	        createCredentials.setHeader("Content-Type","application/json");
	        requestEntity = new StringEntity(updatePayload.toString());
	        createCredentials.setEntity(requestEntity);

	        HttpResponse httpResponse = client.execute(createCredentials);
	        createCredentialsEntity = httpResponse.getEntity();
			
			int responseCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println("updateCredential.responseCode: "+responseCode);
				response.getWriter().println("updateCredential.getStatusLine: "+httpResponse.getStatusLine());
				response.getWriter().println("updateCredential.getContent: "+createCredentialsEntity.getContent());
			}
			
			Header[] headers = httpResponse.getAllHeaders();
            for (Header header: headers) {
            	response.getWriter().println("updateCredential Key [" + header.getName() + "], Value[" + header.getValue() + " ]");
	        }
			
            if(responseCode == 200 || responseCode == 201 || responseCode == 202 || responseCode == 203 || responseCode == 204){
            	createStatus = "Success";
            }else{
            	createStatus = "Updation Failed with http status: "+responseCode;
            }
            
            String retSrc = EntityUtils.toString(createCredentialsEntity);
			response.getWriter().println("updateCredential.retSrc: "+retSrc);
           /* if(csrfToken.equalsIgnoreCase("")){
            	csrfToken = "Unable to fetch CSRF Token";
            }*/
//			String retSrc = EntityUtils.toString(csrfFetchEntity);
//			response.getWriter().println("generateCsrfTokenForCredStore.retSrc: "+retSrc);
		}catch (Exception e) {
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("updateCredential-Exception Stack Trace: "+buffer.toString());
				response.getWriter().println("updateCredential-getMessage: "+e.getMessage());
				response.getWriter().println("updateCredential-getCause: "+e.getCause());
				response.getWriter().println("updateCredential-getClass: "+e.getClass());
				response.getWriter().println("updateCredential-getLocalizedMessage: "+e.getLocalizedMessage());
			}
			
			createStatus = "Exception when Updating: "+e.getCause()+"::"+e.getMessage();
		}
		return createStatus;
	}
	
	public JsonObject getUserCustomerDetails(HttpServletRequest request, HttpServletResponse response, String customerService, Destination destConfiguration, boolean debug) throws IOException, URISyntaxException
	{
		String userName="", password="", authParam="", authMethod="", basicAuth=""; 
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		JsonObject userCustomerJson = new JsonObject();
		
		HttpGet userCustomersGet = null;
		HttpEntity customerEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		try{
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			authMethod = destConfiguration.get("Authentication").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
			int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
			if(debug){
				response.getWriter().println("validateCustomer.proxyType: "+proxyType);
				response.getWriter().println("validateCustomer.proxyHost: "+proxyHost);
				response.getWriter().println("validateCustomer.proxyPort: "+proxyPort);
			}
			
			HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
			DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
			
			closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
			userCustomersGet = new HttpGet(customerService);
			// userCustomersGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
			userCustomersGet.setHeader("content-type", "text/xml; charset=UTF-8");
			userCustomersGet.setHeader("Accept", "application/json");
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userCustomersGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
			}else{
				userCustomersGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
			}
			
			// HttpResponse httpResponse = closableHttpClient.execute(userCustomersGet);
			HttpResponse httpResponse = client.execute(userCustomersGet);
			
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println("validateCustomer.statusCode: "+statusCode);
				
				Header headers[] = httpResponse.getAllHeaders();
                for(Header h:headers){
                	response.getWriter().println("Response Headers:" +h.getName() + ": " + h.getValue());
                }
//				response.getWriter().println("validateCustomer.statusCode: "+httpResponse.getv);
			}
			
			customerEntity = httpResponse.getEntity();
			
			if(customerEntity != null)
			{
				String retSrc = EntityUtils.toString(customerEntity);
				
//				if (debug)
//					response.getWriter().println("retSrc: "+retSrc);
				
				JsonParser parser = new JsonParser();
				userCustomerJson = (JsonObject)parser.parse(retSrc);

				if(userCustomerJson.has("d")){
					if(userCustomerJson.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
						userCustomerJson.addProperty("Status", "000001");
						userCustomerJson.addProperty("ErrorCode", "");
						userCustomerJson.addProperty("Message", "Success");
						return userCustomerJson;
					}else{
						userCustomerJson.addProperty("Status", "000002");
						userCustomerJson.addProperty("ErrorCode", "J001");
						userCustomerJson.addProperty("Message", "No Records Found in User Customers");
						return userCustomerJson;
					}
				}else{
					userCustomerJson.addProperty("Status", "000002");
					userCustomerJson.addProperty("ErrorCode", "J002");
					userCustomerJson.add("Message", userCustomerJson);
					return userCustomerJson;
				}
			}else{
				userCustomerJson.addProperty("Status", "000002");
				userCustomerJson.addProperty("ErrorCode", "J002");
				userCustomerJson.addProperty("Message", "customerEntity returned null while trying to fetch from UserCustomers");
				return userCustomerJson;
			}
		}catch (RuntimeException e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			userCustomerJson.addProperty("Status", "000002");
			userCustomerJson.addProperty("ErrorCode", "E001");
			userCustomerJson.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			userCustomerJson.addProperty("FullTrace", buffer.toString());
			return userCustomerJson;
			
		} /* catch (NamingException e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			userCustomerJson.addProperty("Status", "000002");
			userCustomerJson.addProperty("ErrorCode", "E001");
			userCustomerJson.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			userCustomerJson.addProperty("FullTrace", buffer.toString());
			return userCustomerJson;
		} */ catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			userCustomerJson.addProperty("Status", "000002");
			userCustomerJson.addProperty("ErrorCode", "E001");
			userCustomerJson.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			userCustomerJson.addProperty("FullTrace", buffer.toString());
			return userCustomerJson;
		}
		/* finally
		{
			// closableHttpClient.close();
		} */
	}
	
	public JsonObject getCustomerFromCloud(HttpServletRequest request, HttpServletResponse response,String executeURL, boolean debug) throws IOException
	{
		CommonUtils commonUtils = new CommonUtils();
		String userName="", password="",userPass="";
		JsonObject userCustomerResponse = new JsonObject();
		try {
			
			userName = commonUtils.getODataDestinationProperties("User", "PYGWHANA");
			password = commonUtils.getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName+":"+password;
			
			if (debug) {
				response.getWriter().println("getCustomerFromCloud.userName: "+userName);
				response.getWriter().println("getCustomerFromCloud.password: "+password);
				response.getWriter().println("getCustomerFromCloud.userPass: "+userPass);
			}
			userCustomerResponse = commonUtils.executeURL(executeURL, userPass, response);
			if (debug)
				response.getWriter().println("getCustomerFromCloud.userCustomerResponse: "+userCustomerResponse);
			
			if(userCustomerResponse.has("d")){
				if(userCustomerResponse.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
					userCustomerResponse.addProperty("Status", "000001");
					userCustomerResponse.addProperty("ErrorCode", "");
					userCustomerResponse.addProperty("Message", "Success");
					return userCustomerResponse;
				}else{
					userCustomerResponse.addProperty("Status", "000002");
					userCustomerResponse.addProperty("ErrorCode", "J001");
					userCustomerResponse.addProperty("Message", "No Records Found in User Customers");
					return userCustomerResponse;
				}
			}else{
				userCustomerResponse.addProperty("Status", "000002");
				userCustomerResponse.addProperty("ErrorCode", "J002");
				userCustomerResponse.add("Message", userCustomerResponse);
				return userCustomerResponse;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			userCustomerResponse.addProperty("Status", "000002");
			userCustomerResponse.addProperty("ErrorCode", "E001");
			userCustomerResponse.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			userCustomerResponse.addProperty("FullTrace", buffer.toString());
			return userCustomerResponse;
		}
	}
	
	public JsonObject getCPReferenceFromCloud(HttpServletRequest request, HttpServletResponse response, String pgProvider, String pgID, String cpGuid, boolean debug) throws IOException{
		JsonObject returnJson = new JsonObject();
		JsonObject pgConfigJson = new JsonObject();
		
		String oDataUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="";
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName+":"+password;
			
			executeURL = oDataUrl+"PGCPReference?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PGProvider%20eq%20%27"+pgProvider+"%27%20and%20CPNo%20eq%20%27"+cpGuid+"%27";
			if(debug)
				response.getWriter().println("getCPReferenceFromCloud-executeURL: "+executeURL);
			
			pgConfigJson = executeURL(executeURL, userPass, response);
			
			if(pgConfigJson.has("d")){
				JsonObject results = pgConfigJson.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
				
				if(dresults.size() > 0){
					returnJson.add("CPReference", dresults.get(0).getAsJsonObject());
					returnJson.addProperty("Status", "000001");
					returnJson.addProperty("ErrorCode", "");
					returnJson.addProperty("Message", "");
					return returnJson;
				}else{
//					returnJson = pgConfigJson;
					returnJson.addProperty("Status", "000002");
					returnJson.addProperty("ErrorCode", "J001");
					returnJson.addProperty("Message", "BFL Dealer Code Not Configured for this Dealer: "+cpGuid);
					return returnJson;
				}
			}else{
				returnJson.addProperty("Status", "000002");
				returnJson.addProperty("ErrorCode", "J002");
				returnJson.add("Message", pgConfigJson);
				return returnJson;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			returnJson.addProperty("Status", "000002");
			returnJson.addProperty("ErrorCode", "E001");
			returnJson.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			returnJson.addProperty("FullTrace", buffer.toString());
			return returnJson;
		}
		
//		return new JsonObject();
	}
	
	public JsonObject getCloudPGPaymentConfigs(HttpServletRequest request, HttpServletResponse response, String pgID, boolean debug) throws IOException{
		JsonObject returnJson = new JsonObject();
		String oDataUserName= "", oDatapassword="", userPass="", executeURL="", oDataUrl="", aggregatorID="";
		try{
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			aggregatorID = getODataDestinationProperties("AggregatorID", "PCGWHANA");
			oDataUserName = getODataDestinationProperties("User", "PCGWHANA");
			oDatapassword = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = oDataUserName+":"+oDatapassword;
			JsonObject pgPymntConfig = new JsonObject();
			
			if (debug) {
				response.getWriter().println("validatePGCategory.oDataUrl: "+oDataUrl);
				response.getWriter().println("validatePGCategory.oDataUserName: "+oDataUserName);
				response.getWriter().println("validatePGCategory.oDatapassword: "+oDatapassword);
				response.getWriter().println("validatePGCategory.userPass: "+userPass);
			}
			executeURL = oDataUrl+"PGPaymentConfigs?$filter=AggregatorID%20eq%20%27"+aggregatorID+"%27%20and%20PGID%20eq%20%27"+pgID+"%27";
			if(debug)
				response.getWriter().println("getCloudPGPaymentConfigs.executeURL1: "+executeURL);
			
			pgPymntConfig = executeURL(executeURL, userPass, response);
			if(debug)
				response.getWriter().println("getCloudPGPaymentConfigs.pgPymntConfig: "+pgPymntConfig);
			
			JsonObject results = pgPymntConfig.get("d").getAsJsonObject();
			JsonArray dresults = results.get("results").getAsJsonArray();
			
			if(dresults.size() > 0){
				returnJson = dresults.get(0).getAsJsonObject();
				returnJson.addProperty("Status", "000001");
				returnJson.addProperty("ErrorCode", "");
				returnJson.addProperty("Message", "");
				return returnJson;
			}else{
				returnJson = pgPymntConfig;
				returnJson.addProperty("Status", "000002");
				returnJson.addProperty("ErrorCode", "J001");
				returnJson.addProperty("Message", "No Records Found");
				return returnJson;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			returnJson.addProperty("Status", "000002");
			returnJson.addProperty("ErrorCode", "E001");
			returnJson.addProperty("Message", "Exception: "+e.getClass()+": "+e.getCause()+". Message "+e.getMessage());
			returnJson.addProperty("FullTrace", buffer.toString());
			return returnJson;
		}
	}
	
	public JsonObject getPaymentTransaction(HttpServletRequest request, HttpServletResponse response, String pgGuid, boolean debug) throws IOException{
		JsonObject returnJson = new JsonObject();
		String destURL="", pgID="", userName="", password="", authParam="", authMethod="", paymentGetService="", paymentGetFilter="", basicAuth="", 
				sapclient="", sessionID="", loginMethod="", txnRefNo="", txnAmount=""; 
		
		String returnMessage="";
		byte[] encodedByte = null;
		AuthenticationHeader principalPropagationHeader = null;
		CommonUtils commonUtils = new CommonUtils();
		
		HttpGet pgPymntTxnGet = null;
		HttpEntity pgPymntTxnGetEntity = null;
		// CloseableHttpClient closableHttpClient = null;
//		DestinationConfiguration destConfiguration = null;
		Destination destConfiguration = null;
		
		try{
			destConfiguration = getDestinationURL(request, response);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			if(debug){
				response.getWriter().println("getPaymentTransaction.pgGuid:" + pgGuid);
			}
			
			String loginID = commonUtils.getUserPrincipal(request, "name", response);
			
//			sapclient = destConfiguration.get("sap-client");
//			authMethod = destConfiguration.get("Authentication");
//			destURL = destConfiguration.get("URL");
			sapclient = destConfiguration.get("sap-client").get().toString();
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if (debug){
				response.getWriter().println("getPaymentTransaction.sapclient:" + sapclient);
				response.getWriter().println("getPaymentTransaction.authMethod:" + authMethod);
				response.getWriter().println("getPaymentTransaction.destURL:" + destURL);
			}
			
			if( null != authMethod && authMethod.equalsIgnoreCase("BasicAuthentication")){
				String url = commonUtils.getDestinationURL(request, response, "URL");
				if (debug)
					response.getWriter().println("getPaymentTransaction.url1:" + url);
				sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
			} else{
				loginMethod = destConfiguration.get("LoginMethod").get().toString();
				if(null != loginMethod && loginMethod.equalsIgnoreCase("Hybrid")){
					String url = commonUtils.getDestinationURL(request, response, "URL");
					if (debug){
						response.getWriter().println("url:" + url);
						response.getWriter().println("loginMethod:" + loginMethod);
					}
					sessionID = commonUtils.createUserSession(request, response, url, loginID, debug);
				}else{
					sessionID ="";
				}
			}
			if (debug)
				response.getWriter().println("sessionID1:" + sessionID);
			
//			paymentGetFilter = "PGPaymentGUID eq '"+pgGuid+"'";
			paymentGetFilter = "PGPaymentGUID guid'"+pgGuid+"'";
			
			if (debug)
				response.getWriter().println("paymentGetFilter:" + paymentGetFilter);
			
			paymentGetFilter = URLEncoder.encode(paymentGetFilter, "UTF-8");
			
			paymentGetFilter = paymentGetFilter.replaceAll("%26", "&");
			paymentGetFilter = paymentGetFilter.replaceAll("%3D", "=");
			
			if (debug)
				response.getWriter().println("getPaymentTransaction.paymentGetFilter: "+paymentGetFilter);
			
			if(sapclient != null){
//				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments?sap-client="+ sapclient +"&$filter="+ paymentGetFilter;
				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments(PGPaymentGUID=guid'"+pgGuid+"')?sap-client="+sapclient;
			}
			else{
//				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments?$filter="+ paymentGetFilter;
				paymentGetService = destURL+"/sap/opu/odata/ARTEC/PCGW/PGPayments(PGPaymentGUID=guid'"+pgGuid+"')";
			}
			
			if (debug)
				response.getWriter().println("getPaymentTransaction.paymentGetService 1: "+paymentGetService);
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getPaymentTransaction.getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getPaymentTransaction.getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getPaymentTransaction.getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("getPaymentTransaction.proxyType: "+proxyType);
			    response.getWriter().println("getPaymentTransaction.proxyHost: "+proxyHost);
			    response.getWriter().println("getPaymentTransaction.proxyPort: "+proxyPort);
		    }
			
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        pgPymntTxnGet = new HttpGet(paymentGetService);
	        // pgPymntTxnGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        pgPymntTxnGet.setHeader("content-type", "application/json");
	        pgPymntTxnGet.setHeader("Accept", "application/json");
	        pgPymntTxnGet.setHeader("x-arteria-loginid", sessionID);
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	pgPymntTxnGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	pgPymntTxnGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(pgPymntTxnGet);
			HttpResponse httpResponse = client.execute(pgPymntTxnGet);
	        
	        if(debug)
	        	response.getWriter().println("getPaymentTransaction.httpResponse: "+httpResponse);
	        
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        if(debug)
	        	response.getWriter().println("getPaymentTransaction.statusCode: "+statusCode);
	        
	        pgPymntTxnGetEntity = httpResponse.getEntity();
	        
	        if(pgPymntTxnGetEntity != null)
			{
		        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder docBuilder;
		        InputSource inputSource;
		       
				String retSrc = EntityUtils.toString(pgPymntTxnGetEntity);
				if(debug)
		        	response.getWriter().println("getPaymentTransaction.retSrc: "+retSrc);
				
				JsonParser parser = new JsonParser();
				JsonObject pymntTxnObj = (JsonObject)parser.parse(retSrc);
				
				if(pymntTxnObj.has("d")){
					returnJson.add("Payment", pymntTxnObj.get("d").getAsJsonObject());
					returnJson.addProperty("Status", "000001");
					returnJson.addProperty("ErrorCode", "");
					returnJson.addProperty("Message", "Success");
					return returnJson;
					/*if(pymntTxnObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
						returnJson.add("Payment", pymntTxnObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject());
						returnJson.addProperty("Status", "000001");
						returnJson.addProperty("ErrorCode", "");
						returnJson.addProperty("Message", "Success");
						return returnJson;
					}else{
						returnMessage = "No records found";
						returnJson.add("Payment", pymntTxnObj);
						returnJson.addProperty("Status", "000002");
						returnJson.addProperty("ErrorCode", "P001");
						returnJson.addProperty("Message", returnMessage);
						return returnJson;
					}*/
				}else{
					returnMessage = "Error while fetching data";
//					returnJson.add("Payment", pymntTxnObj);
					returnJson.addProperty("Status", "000002");
					returnJson.addProperty("ErrorCode", "P001");
					returnJson.add("Message", pymntTxnObj);
					return returnJson;
				}
			}else{
				returnMessage = "PGPymntConfigStatsEntity returned null when trying to connect to the backend";
				returnJson.addProperty("Status", "000002");
				returnJson.addProperty("ErrorCode", "P001");
				returnJson.addProperty("Message", returnMessage);
				return returnJson;
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println(e.getMessage()+"---> in doGet. Full Stack Trace: "+buffer.toString());
			
			returnJson.addProperty("Status", "000002");
			returnJson.addProperty("ErrorCode", "E001");
			returnJson.addProperty("Message", "Exception: "+e.getClass()+" - "+e.getCause()+". Message: "+e.getMessage());
			returnJson.addProperty("FullTrace", buffer.toString());
			return returnJson;
		}
	}
	
	public static String getSealValue(String jsonEncAndSecKey){
		MessageDigest md;
		String hashText = null;
		try 
		{
			md = MessageDigest.getInstance("MD5");
			md.reset();
			md.update(jsonEncAndSecKey.getBytes());
			hashText = String.format("%032x", new Object[] { new BigInteger(1,
					md.digest()) });
		}
		catch (NoSuchAlgorithmException e) 
		{
			e.printStackTrace();
		}
		return hashText;
	}
	
	public static String AES_Encode(String jsonText, String key, String ivValue)
			throws java.io.UnsupportedEncodingException,
			NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException,
			IllegalBlockSizeException, BadPaddingException{
		byte[] textBytes = jsonText.getBytes("UTF-8");
		AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivValue.getBytes());
		SecretKeySpec newKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
		Cipher cipher = null;
		cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, newKey, ivSpec);
		return Base64.getEncoder().encodeToString(cipher.doFinal(textBytes));
	}
	
	public static String AES_Decode(String encryptedText, String key, String ivText)
			throws java.io.UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {
		byte[] textBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encryptedText);
		AlgorithmParameterSpec ivSpec = new IvParameterSpec(ivText.getBytes());
		SecretKeySpec newKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, newKey, ivSpec);
		return new String(cipher.doFinal(textBytes), "UTF-8");
	}
	public String convertAmtToWords(double number) {
	    if (number == 0){ 
	    	return "zero"; 
	    } else if(number > 0 && number < 1){
	    	String snumber = Double.toString(number);

		    String mask = "0000000000.00";
		    DecimalFormat df = new DecimalFormat(mask);
		    snumber = df.format(number);
		    
		    int decimals = Integer.parseInt(snumber.substring(11,13));
		    String tradDecimals;
		    switch (decimals) {
		    case 0:
		    	tradDecimals = "";
		      break;
		    case 1 :
		    	tradDecimals = convertNumToString(decimals)
		         + " Paise ";
		      break;
		    default :
		    	tradDecimals = convertNumToString(decimals)
		         + " Paise ";
		    }
		    String result = "";
		    result = result + tradDecimals;
		    
		    return result;
	    }

	    String snumber = Double.toString(number);

	    String mask = "0000000000.00";
	    DecimalFormat df = new DecimalFormat(mask);
	    snumber = df.format(number);

	    int crores = Integer.parseInt(snumber.substring(0,3));
	    int lakhs  = Integer.parseInt(snumber.substring(3,5));
	    int tenThousands = Integer.parseInt(snumber.substring(5,7));
	    int thousands = Integer.parseInt(snumber.substring(7,10));
	    int decimals = Integer.parseInt(snumber.substring(11,13));
	    String tradCrores;
	    switch (crores) {
	    case 0:
	    	tradCrores = "";
	      break;
	    case 1 :
	    	tradCrores = convertNumToString(crores)
	      + " Crore ";
	      break;
	    default :
	    	tradCrores = convertNumToString(crores)
	      + " Crore ";
	    }
	    String result =  tradCrores;

	    String tradLakhs;
	    switch (lakhs) {
	    case 0:
	    	tradLakhs = "";
	      break;
	    case 1 :
	    	tradLakhs = convertNumToString(lakhs)
	         + " Lakh ";
	      break;
	    default :
	    	tradLakhs = convertNumToString(lakhs)
	         + " Lakh ";
	    }
	    result =  result + tradLakhs;

	    String tradTenThousands;
	    switch (tenThousands) {
	    case 0:
	    	tradTenThousands = "";
	      break;
	    case 1 :
	    	tradTenThousands = " One Thousand ";
	      break;
	    default :
	    	tradTenThousands = convertNumToString(tenThousands)
	         + " Thousand ";
	    }
	    result =  result + tradTenThousands;

	    String tradThousand;
	    tradThousand = convertNumToString(thousands);
	    result =  "Rupees "+result + tradThousand;
	    
	    String tradDecimals;
	    switch (decimals) {
	    case 0:
	    	tradDecimals = "";
	      break;
	    case 1 :
	    	tradDecimals = " and "+convertNumToString(decimals)
	         + " Paise ";
	      break;
	    default :
	    	tradDecimals = " and "+convertNumToString(decimals)
	         + " Paise ";
	    }
	    result =  result + tradDecimals;

	    return result.replaceAll("^\\s+", "").replaceAll("\\b\\s{2,}\\b", " ");
	}
	
	private static String convertNumToString(int number) {
	    String soFar;

	    if (number % 100 < 20){
	      soFar = numNames[number % 100];
	      number /= 100;
	    }
	    else {
	      soFar = numNames[number % 10];
	      number /= 10;

	      soFar = tensNames[number % 10] + soFar;
	      number /= 10;
	    }
	    if (number == 0) return soFar;
	    return numNames[number] + " Hundred" + soFar;
	}
	
	private static final String[] tensNames = {
		    "",
		    " Ten",
		    " Twenty",
		    " Thirty",
		    " Forty",
		    " Fifty",
		    " Sixty",
		    " Seventy",
		    " Eighty",
		    " Ninety"
		};
		
		private static final String[] numNames = {
		    "",
		    " One",
		    " Two",
		    " Three",
		    " Four",
		    " Five",
		    " Six",
		    " Seven",
		    " Eight",
		    " Nine",
		    " Ten",
		    " Eleven",
		    " Twelve",
		    " Thirteen",
		    " Fourteen",
		    " Fifteen",
		    " Sixteen",
		    " Seventeen",
		    " Eighteen",
		    " Nineteen"
		};
		
		public JsonObject insertIntoApproval(JSONObject inputPayload,HttpServletRequest request,HttpServletResponse response,boolean debug)throws IOException{
			String createdOn="", createdAt ="",createdBy="",  iD="", oDataUrl="", executeURL="", customerNo="",userName="", password="", userPass="";
			long createdOnInMillis=0;
			String id="",remarks="";
			JSONObject approvalObj = new JSONObject();
			JsonObject apprvlResponse=new JsonObject();
		try {
			oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
			userName = getODataDestinationProperties("User", "PCGWHANA");
			password = getODataDestinationProperties("Password", "PCGWHANA");
			userPass = userName + ":" + password;
			executeURL = oDataUrl + "Approval";
			createdBy = getUserPrincipal(request, "name", response);
			createdAt = getCreatedAtTime();
			createdOnInMillis = getCreatedOnDate();
			id = generateGUID(36);
			approvalObj.accumulate("ID", id);
			approvalObj.accumulate("CreatedBy", createdBy);
			approvalObj.accumulate("CreatedAt", createdAt);
			approvalObj.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
			if (inputPayload.has("AggregatorID") && !inputPayload.isNull("AggregatorID")) {
				approvalObj.accumulate("AggregatorID", inputPayload.getString("AggregatorID"));
			} else {
				approvalObj.accumulate("AggregatorID", "");
			}
			if (inputPayload.has("StatusID") && !inputPayload.isNull("StatusID")) {
				approvalObj.accumulate("StatusID", inputPayload.getString("StatusID"));
			} else {
				approvalObj.accumulate("StatusID", "");
			}
			if (inputPayload.has("ProcessReference3") && !inputPayload.isNull("ProcessReference3")) {
				approvalObj.accumulate("ProcessReference3", inputPayload.getString("ProcessReference3"));
			} else {
				approvalObj.accumulate("ProcessReference3", "");

			}
			if (inputPayload.has("ProcessReference4") && !inputPayload.isNull("ProcessReference4")) {
				approvalObj.accumulate("ProcessReference4", inputPayload.getString("ProcessReference4"));
			} else {
				approvalObj.accumulate("ProcessReference4", "");
			}
			if (inputPayload.has("ProcessReference7") && !inputPayload.isNull("ProcessReference7")) {
				approvalObj.accumulate("ProcessReference7", inputPayload.getString("ProcessReference7"));
			} else {
				approvalObj.accumulate("ProcessReference7", "");
			}
			approvalObj.accumulate("ProcessID","");
			approvalObj.accumulate("ProcessReference1", "");
			approvalObj.accumulate("ProcessReference2", "");
			approvalObj.accumulate("ProcessReference5", "");
			approvalObj.accumulate("ProcessReference6", "");
			approvalObj.accumulate("ProcessReference8", "");
			approvalObj.accumulate("ProcessReference9", "");
			approvalObj.accumulate("ProcessReference10", "");
			approvalObj.accumulate("Source", "");
			approvalObj.accumulate("SourceReferenceID", "");
			approvalObj.accumulate("Remarks","");
			
			if (debug) {
				response.getWriter().print("Insert into Approval payload :" + approvalObj);
			}
			apprvlResponse = executePostURL(executeURL, userPass, response, approvalObj, request, debug, "PCGWHANA");
			if (debug)
				response.getWriter().println("Insert into Approval Obj" + apprvlResponse);
			if (apprvlResponse.has("error")) {
				apprvlResponse.addProperty("ErrorCode", "001");
				apprvlResponse.addProperty("Message", "Insertion Failed");
				return apprvlResponse;
			} else {
				apprvlResponse.addProperty("ErrorCode", "");
				apprvlResponse.addProperty("Message", "Success");
				return apprvlResponse;
			}

		} catch (Exception ex) {
			if (debug) {
				response.getWriter()
						.println("insertApprovalData.xception in Insering a Approval Table: " + ex.getMessage());
				StackTraceElement element[] = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for (int i = 0; i < element.length; i++) {
					buffer.append(element[i]);
				}
				response.getWriter().println("insertBPHeaderData.Full Stack Trace: " + buffer.toString());
			}
			apprvlResponse.addProperty("ErrorCode", "001");
			apprvlResponse.addProperty("Message", "Insertion Failed");
			return apprvlResponse;

		}
			
		}
	public JsonObject deleteBpHeaderRecord(String bpguid,HttpServletResponse response,HttpServletRequest request,boolean debug)throws Exception{
		String oDataUrl="",userName="",password="",userPass="",executeURL="";
		JsonObject retrnRes=new JsonObject();
		try {
			oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
			userName = getODataDestinationProperties("User", "PYGWHANA");
			password = getODataDestinationProperties("Password", "PYGWHANA");
			userPass = userName + ":" + password;
			executeURL = oDataUrl + "BPHeader('" + bpguid + "')";
			if (debug)
				response.getWriter().println("deleteBpHeader.executeURL: " + executeURL);
			retrnRes = executeDelete(executeURL, userPass, response, request, debug, "PYGWHANA");

			if (debug) {
				response.getWriter().println("delete BpHeader response " + retrnRes);
			}

			if (!retrnRes.get("ErrorCode").isJsonNull()
					&& retrnRes.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")) {
				// need to send the Success Response
				JsonObject retnObj = new JsonObject();
				retnObj.addProperty("ErrorCode", "");
				retnObj.addProperty("message", "Record Deleted Successfully " + bpguid);
				retnObj.addProperty("Status", "000001");
				return retnObj;

			} else {
				// send the failure response
				JsonObject retnObj = new JsonObject();
				retnObj.addProperty("ErrorCode", "001");
				retnObj.addProperty("message", "Records not  Deleted " + bpguid);
				retnObj.addProperty("Status", "000002");
				return retnObj;
			}

		} catch (Exception ex) {
			JsonObject responseObj = new JsonObject();
			StackTraceElement element[] = ex.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < element.length; i++) {
				buffer.append(element[i]);
			}
			responseObj.addProperty("Exception", ex.getClass().getCanonicalName());
			responseObj.addProperty("Message",
					ex.getClass().getCanonicalName() + "--->" + ex.getMessage() + "--->" + buffer.toString());
			responseObj.addProperty("Status", "000002");
			responseObj.addProperty("ErrorCode", "001");
			response.getWriter().println(responseObj);
			throw ex;

		}
		
	}
	
	public JsonObject deleteBPContactPerson(String bpGuid,HttpServletRequest request,HttpServletResponse response,boolean debug)throws IOException{
		String oDataUrl="",userName="",password="",userPass="",executeURL="",bpCntId="";
		JsonObject retrnRes=new JsonObject();
		JsonObject deleteRes=new JsonObject();
		JsonObject BpcontractRes=new JsonObject();
		JsonArray BpcontractArray=new JsonArray();
		try {
		oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
		userName = getODataDestinationProperties("User", "PYGWHANA");
		password = getODataDestinationProperties("Password", "PYGWHANA");
		userPass = userName+":"+password;
		executeURL=oDataUrl+"BPContactPerson?$filter=BPID%20eq%20%27"+bpGuid+"%27";
		BpcontractRes=executeURL(executeURL, userPass, response);
		if (BpcontractRes != null
					&& BpcontractRes.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0) {
				BpcontractArray = BpcontractRes.get("d").getAsJsonObject().get("results").getAsJsonArray();
				for (int i = 0; i < BpcontractArray.size(); i++) {
					bpCntId = BpcontractArray.get(i).getAsJsonObject().get("ID").getAsString();
					executeURL = oDataUrl + "BPContactPerson('" + bpCntId + "')";
					retrnRes = executeDelete(executeURL, userPass, response, request, debug, "PYGWHANA");

				}
				if (!retrnRes.get("ErrorCode").isJsonNull()
						&& retrnRes.get("ErrorCode").getAsString().trim().equalsIgnoreCase("")) {
					// need to send the Success Response
					JsonObject retnObj = new JsonObject();
					retnObj.addProperty("ErrorCode", "");
					retnObj.addProperty("message", "Record Deleted Successfully " + bpGuid);
					retnObj.addProperty("Status", "000001");
					return retnObj;

				} else {
					// send the failure response
					JsonObject retnObj = new JsonObject();
					retnObj.addProperty("ErrorCode", "001");
					retnObj.addProperty("message", "Records not  Deleted " + bpGuid);
					retnObj.addProperty("Status", "000002");
					return retnObj;
				}

			} else {
				JsonObject result = new JsonObject();
				result.addProperty("ErrorCode", "J001");
				result.addProperty("Status", "000002");
				result.addProperty("Message", bpGuid + " BpGuid is Not Exist BPContactPerson Table");
				return result;

			}
		} catch (Exception ex) {
			JsonObject responseObj = new JsonObject();
			StackTraceElement element[] = ex.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < element.length; i++) {
				buffer.append(element[i]);
			}
			responseObj.addProperty("Exception", ex.getClass().getCanonicalName());
			responseObj.addProperty("Message",
					ex.getClass().getCanonicalName() + "--->" + ex.getMessage() + "--->" + buffer.toString());
			responseObj.addProperty("Status", "000002");
			responseObj.addProperty("ErrorCode", "001");
			response.getWriter().println(responseObj);
			throw ex;

		}
		
	}
	
	public Map<String,String> getConstantValues(HttpServletRequest request, HttpServletResponse response, String PGID) throws IOException, URISyntaxException
	{
		String configurableValues="", basicAuth="", authMethod="", destURL="", userName="", password="", authParam="", constantValuesService="", constantValuesFilter="";
		byte[] encodedByte = null;
		CommonUtils commonUtils = new CommonUtils();
		AuthenticationHeader principalPropagationHeader = null;
		boolean debug = false;
		HttpGet configValuesGet = null;
		HttpEntity configValuesEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		Map<String,String> configValue=new HashMap<>();
		try
		{
			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				debug = true;
			
//			Context tenCtx = new InitialContext();
//			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
//			if(debug){
//				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
//				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
//				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
//			}
			
//			Context ctx = new InitialContext();
//			ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
//			DestinationConfiguration destConfiguration = configuration.getConfiguration(PCGW_UTIL_DEST_NAME);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(PCGW_UTIL_DEST_NAME, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", PCGW_UTIL_DEST_NAME));
				 
				 return configValue;
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				// encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				// String encodedStr = new String(encodedByte);
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();

			constantValuesService = "/sap/opu/odata/ARTEC/PCGW/PGPaymentConfigs";
			constantValuesFilter = "";
			
			String pgCatID="000001";
			constantValuesFilter = constantValuesFilter+"PGID eq '"+PGID+"' and PGCategoryID eq '"+pgCatID+"'";//PGCategoryID
			if(debug)
				response.getWriter().println("constantValuesFilter: "+constantValuesFilter);
			
			constantValuesFilter = URLEncoder.encode(constantValuesFilter, "UTF-8");
			if(sapclient != null)
			{
				constantValuesService =  destURL+constantValuesService+"?sap-client="+ sapclient +"&$filter="+constantValuesFilter;
			}
			else
			{
				constantValuesService =  destURL+constantValuesService+"?$filter="+constantValuesFilter;
			}

			if (debug){
				response.getWriter().println("pgPaymentConfigs.constantValuesService: "+constantValuesService);
				response.getWriter().println("pgPaymentConfigs.destURL: "+destURL);
				response.getWriter().println("User Name: "+userName);
				response.getWriter().println("Password : "+password);
				
			}
			
			/* String proxyType = destConfiguration.get("ProxyType").get().toString();
			if(debug)
				response.getWriter().println("pgPaymentConfigs.proxyType: "+proxyType);
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("pgPaymentConfigs.proxyHost: "+proxyHost);
			    response.getWriter().println("pgPaymentConfigs.proxyPort: "+proxyPort);
		    }
		    
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        configValuesGet = new HttpGet(constantValuesService);
//	        configValuesGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        configValuesGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        configValuesGet.setHeader("Accept", "application/atom+xml");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	configValuesGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	configValuesGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(configValuesGet);
			HttpResponse httpResponse = client.execute(configValuesGet);
	        
	        if(debug){
		        int statusCode = httpResponse.getStatusLine().getStatusCode();
				response.getWriter().println("pgPaymentConfigs.statusCode: "+statusCode);
	        }
			
			configValuesEntity = httpResponse.getEntity();
			
			if(configValuesEntity != null)
			{
				configurableValues = "";
				if(PGID.equalsIgnoreCase("B2BIZ"))
				{
			        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
			        DocumentBuilder docBuilder;
			        InputSource inputSource;
					String retSrc = EntityUtils.toString(configValuesEntity);
					if(debug)
						response.getWriter().println("retSrc: "+retSrc);
					
					docBuilder = docBuilderFactory.newDocumentBuilder();
					inputSource = new InputSource(new StringReader(retSrc));
		            Document document = docBuilder.parse(inputSource);
		            NodeList merchantCodeList = document.getElementsByTagName("d:MerchantCode");
		            NodeList pgCategoryList1 = document.getElementsByTagName("d:PGCategoryID");
		            NodeList pdIDList = document.getElementsByTagName("d:PGID");
		            NodeList wsUrlList = document.getElementsByTagName("d:AccBalURL");
		            NodeList clientCodeList = document.getElementsByTagName("d:ClientCode");
		            NodeList chGuidList = document.getElementsByTagName("d:ConfigHeaderGUID");        
		            for(int i=0 ; i<pdIDList.getLength() ; i++)
		            {
//			            	response.getWriter().println("nodeList Customer: "+nodeList.item(i).getTextContent());
		            	if(PGID.equalsIgnoreCase(pdIDList.item(i).getTextContent()))
	        			{
		            		configValue.put("MerchantCode", merchantCodeList.item(i).getTextContent());
		            		configValue.put("PGID", pdIDList.item(i).getTextContent());
		            		configValue.put("WSURL", wsUrlList.item(i).getTextContent());
		            		configValue.put("ClientCode", clientCodeList.item(i).getTextContent());
		            		configValue.put("CHGUID", chGuidList.item(i).getTextContent());
		            		break;
	        			}
		            }
				}
			}
			
			if(debug){
				for(String key:configValue.keySet()){
					response.getWriter().println("Configuration key "+key+"  values "+configValue.get(key));
				}
			}
				
			return configValue;
		}
		catch (Exception e)
		{
			if(debug)
				response.getWriter().println("Exception in getConfigValues: "+e.getLocalizedMessage());
			return configValue;
		}
		/* finally
		{
			closableHttpClient.close();
		} */
	
	}
	
	public JsonObject executePostURLTemp(String executeURL, String userPass, HttpServletResponse response, JSONObject insertPayLoad, 
			HttpServletRequest request, boolean debug, String destination) throws IOException{
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String authParam="",userName="",password="";
		JsonObject jsonObj = new JsonObject();
		String data = "";
		try{
			if(debug){
				response.getWriter().println("executePostURL-insertPayLoad: "+insertPayLoad);
			}
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			
			if(debug)
				response.getWriter().println("executePostURL-executeURL: "+executeURL);
			
			String[] split = userPass.split(":");
			userName=split[0];
			password=split[1];
			authParam = userName + ":"+ password ;
			
			
//			byte[] encodedByte = Base64.getEncoder().encode(authParam.getBytes());
//			String encodedStr = new String(encodedByte);
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		    //    response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
			/*String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
	        int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
	        HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);*/
	        
	        /* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials); */
			
			requestEntity = new StringEntity(insertPayLoad.toString());
			
//			httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
			// httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
			HttpPost postRequest = new HttpPost(executeURL);
			postRequest.setHeader("Content-Type", "application/json");
			postRequest.setHeader("Accept", "application/json");
//			postRequest.setHeader("X-CSRF-Token", csrfToken);
			postRequest.setEntity(requestEntity);
			
			// HttpResponse httpPostResponse = httpClient.execute(postRequest);
			HttpResponse httpPostResponse = client.execute(postRequest);
			responseEntity = httpPostResponse.getEntity();
			
			if(httpPostResponse.getEntity().getContentType() != null && httpPostResponse.getEntity().getContentType().toString() != "") {
				String contentType = httpPostResponse.getEntity().getContentType().toString().replaceAll("content-type:", "").trim();
				if(contentType.equalsIgnoreCase("application/xml;charset=utf-8")) {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
//					response.getOutputStream().print(EntityUtils.toString(countEntity));
					if(debug)
						response.getWriter().println(EntityUtils.toString(responseEntity));
				}else{
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
//					response.getOutputStream().print(Data);	
					if(debug)
						response.getWriter().println(data);
				}
			}else{
				response.setContentType("application/pdf");
				data = EntityUtils.toString(responseEntity);
//				response.getOutputStream().print(EntityUtils.toString(countEntity));
				if(debug)
					response.getWriter().println(EntityUtils.toString(responseEntity));
			}
			JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(data);
			
		}catch (Exception e) {
			response.getWriter().println("Data: "+data);
			response.getWriter().println("Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executePostURL-Exception Stack Trace: "+buffer.toString());
		}finally{
			// httpClient.close();
		}
		return jsonObj;
	}
	
	public JSONObject executeMetadatURL(String executeURL, String userPass, HttpServletResponse response){
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		String  xmlStr = null;
		JSONObject metadata=null;
		
		try{

			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type","application/xml");
			connection.setRequestProperty("Accept","application/xml");
//			connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encode(userPass.getBytes()));
			connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encodeToString(userPass.getBytes()));
			connection.setDoInput(true);
			
			in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String inputLine;
			StringBuffer responseStrBuffer = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				responseStrBuffer.append(inputLine);
			}
			//response.getWriter().println(responseStrBuffer.toString());
			metadata = XML.toJSONObject(responseStrBuffer.toString());
			return metadata;
		}catch (Exception e) {
			response.getWriter().println("executeURL.Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeURL.Full Stack Trace: "+buffer.toString());
		}finally{
			return metadata;
		}
	}
	
	public JsonObject executeODataURL(String executeURL, String token, HttpServletResponse response,boolean debug)throws IOException{
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		JsonObject resObj = new JsonObject();
		JsonObject dbResObj=null;
		try {
			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setRequestProperty("Accept", "application/json");
			connection.setRequestProperty("Authorization",
					"Bearer " + token);
			connection.setDoInput(true);
			int responseCode = connection.getResponseCode();
			if (debug) {
				response.getWriter().println("responseCode:" + responseCode);
			}

			in = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
			String inputLine;
			StringBuffer responseStrBuffer = new StringBuffer();
			while ((inputLine = in.readLine()) != null) {
				responseStrBuffer.append(inputLine);
			}
			if (debug) {
				response.getWriter().println("responseStrBuffer:" + responseStrBuffer);
			}
			
			if ((responseCode / 100) == 2 || (responseCode / 100) == 3) {
				JsonParser parser = new JsonParser();
				dbResObj = (JsonObject) parser.parse(responseStrBuffer.toString());
				resObj.add("Message", dbResObj);
				resObj.addProperty("ErrorCode", "");
				resObj.addProperty("Status", "000001");
			} else {
				resObj.addProperty("Message", responseStrBuffer.toString());
				resObj.addProperty("ErrorCode", responseCode);
				resObj.addProperty("Status", "000002");
			}
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			resObj.addProperty("ExceptionMessage", buffer.toString());
			resObj.addProperty("Message", e.getLocalizedMessage()+"");
			resObj.addProperty("ErrorCode", "J002");
			resObj.addProperty("Status", "000002");
		}finally{
			if(in!=null){
				in.close();
			}
			if(dataOut!=null){
				dataOut.close();
			}
			return resObj;
		}
	}

	public JsonObject executeODataDelete(String executeURL, String userPass, HttpServletResponse response, HttpServletRequest request, boolean debug, String destination) throws IOException{
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		
		try{
			if(debug){
				response.getWriter().println("executeDelete-executeURL: "+executeURL);
			}
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
			}
			
			// String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			byte[] encodedByte = Base64.getEncoder().encode(authParam.getBytes());
			String encodedStr = new String(encodedByte);
			String bearerAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeDelete.executeURL: "+ executeURL);
				// response.getWriter().println("executeDelete.proxyType: "+ proxyType);
				response.getWriter().println("executeDelete.userName: "+ userName);
				response.getWriter().println("executeDelete.password: "+ password);
				response.getWriter().println("executeDelete.authParam: "+ authParam);
				response.getWriter().println("executeDelete.bearerAuth: "+ bearerAuth);
			}
			
			/* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
			UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
			credentialsProvider.setCredentials(AuthScope.ANY, credentials);
			
			httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build(); */
		  
			HttpDelete deleteRequest = new HttpDelete(executeURL);
			// deleteRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
			deleteRequest.setHeader(HttpHeaders.AUTHORIZATION, bearerAuth);
			deleteRequest.setHeader("Content-Type", "application/json");
			deleteRequest.setHeader("Accept", "application/json");
			deleteRequest.setHeader("X-HTTP-Method", "DELETE");

			// HttpResponse httpResponse = httpClient.execute(deleteRequest);
			HttpResponse httpResponse = client.execute(deleteRequest);

			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println(" httpResponse response "+httpResponse.toString());
				response.getWriter().println("Http Response status Code "+statusCode);
			}
			if ((statusCode/100)==2) {
				jsonObj.addProperty("ErrorCode", "");
				jsonObj.addProperty("Message", "Record deleted Successfully");
				jsonObj.addProperty("Status", "000001");
			}else{
				String resEntity="";
				if (httpResponse != null && httpResponse.getEntity() != null) {
					responseEntity = httpResponse.getEntity();
					resEntity= EntityUtils.toString(responseEntity);
				}
				jsonObj.addProperty("ErrorCode", statusCode);
				jsonObj.addProperty("Message", resEntity);
				jsonObj.addProperty("Status", "000002");
				jsonObj.addProperty("Remarks", "Records not deleted Successfully");
			}
			return jsonObj;
			
		}catch (Exception e) {
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("executeUpdate-Exception Stack Trace: "+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
			}
			jsonObj.addProperty("Status", "000002");
			jsonObj.addProperty("ErrorCode", "J001");
			jsonObj.addProperty("Message", buffer.toString());
		}/* finally{
			httpClient.close();
		} */
		
		return jsonObj;
	}

	public String convertLongDateToString(HttpServletResponse response, String dateString, String dateFormat, boolean debug){
		String returnValue = "", longDateValue = "";
		long dateValue=0;
		try{
			if(debug)
			response.getWriter().println("convertLongDateToString-dateString: "+dateString);
			
			longDateValue = dateString.substring((dateString.indexOf("(")+1), dateString.lastIndexOf(")"));
			if(debug)
				response.getWriter().println("convertLongDateToString-longDateValue: "+longDateValue);
			
			dateValue = Long.parseLong(longDateValue);
			if(debug)
				response.getWriter().println("convertLongDateToString-dateValue: "+dateValue);
			
			Date date=new Date(dateValue);
			SimpleDateFormat df2 = new SimpleDateFormat(dateFormat);
			returnValue = df2.format(date);
			if(debug)
				response.getWriter().println("convertLongDateToString-returnValue: "+returnValue);
		}catch (Exception e) {
			returnValue = "";
		}
		return returnValue;
	}

	public Date getDate(int days){
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, days);
		java.util.Date additionalDay = cal.getTime();
		return additionalDay;
	}

	public JsonObject executeUpdate(String executeURL, String userPass, HttpServletResponse response, JsonObject updatePayLoad, 
				HttpServletRequest request, boolean debug, String destination) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);

			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			
			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
			}
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			
			String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			String bearerAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());;
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
				response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
				response.getWriter().println("executeHttpPost.userName: "+ userName);
				response.getWriter().println("executeHttpPost.password: "+ password);
				response.getWriter().println("executeHttpPost.authParam: "+ authParam);
				response.getWriter().println("executeHttpPost.basicAuth: "+ bearerAuth);
			}
			
			/* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
			UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
			credentialsProvider.setCredentials(AuthScope.ANY, credentials);
			
//		        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
			httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build(); */
//		        HttpPost updateRequest = new HttpPost(executeURL);
			HttpPut updateRequest = new HttpPut(executeURL);
			// updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
			updateRequest.setHeader(HttpHeaders.AUTHORIZATION, bearerAuth);
			updateRequest.setHeader("Content-Type", "application/json");
			updateRequest.setHeader("Accept", "application/json");
			updateRequest.setHeader("X-HTTP-Method", "PUT");
			updateRequest.setEntity(requestEntity);
//				updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			// HttpResponse httpResponse = httpClient.execute(updateRequest);
			HttpResponse httpResponse = client.execute(updateRequest);
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println("statusCode:"+statusCode);
			}
			if((statusCode/100)==2){
				jsonObj.addProperty("ErrorCode", "");
				jsonObj.addProperty("Message", "Record Updated Successfully");
				jsonObj.addProperty("Status", "000001");
			}else{
			responseEntity = httpResponse.getEntity();
			String errorResponse = EntityUtils.toString(responseEntity);
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
				response.getWriter().println("error response: "+errorResponse);
			}
			jsonObj.addProperty("ErrorCode", statusCode);
			jsonObj.addProperty("Message", errorResponse);
			jsonObj.addProperty("Status", "000002");
			}
		}catch (RuntimeException e) {
			httpPost.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		} /* catch (NamingException e) {
			// TODO Auto-generated catch block
			httpPost.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug)
			response.getWriter().println("executeHttpPost.NamingException:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage",e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		}  */catch (Exception e) {
			// TODO Auto-generated catch block
//				e.printStackTrace();
			httpPost.abort();
			
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage",e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		}/* finally{
			httpClient.close();
		} */
		return jsonObj;
	}

	public JsonObject executePostURL(String executeURL, String userPass, HttpServletResponse response, JsonObject insertPayLoad, 
				HttpServletRequest request, boolean debug, String destination) throws IOException{
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		String data = "";
		HttpPost postRequest=null;
		try{
			if(debug){
				response.getWriter().println("executePostURL-insertPayLoad: "+insertPayLoad);
			}
			
			if(debug)
				response.getWriter().println("executePostURL-executeURL: "+executeURL);
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
			}
			String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
		
			String bearerAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
				response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
				response.getWriter().println("executeHttpPost.userName: "+ userName);
				response.getWriter().println("executeHttpPost.password: "+ password);
				response.getWriter().println("executeHttpPost.authParam: "+ authParam);
				response.getWriter().println("executeHttpPost.bearerAuth: "+ bearerAuth);
			}

			/* CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
			UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
			credentialsProvider.setCredentials(AuthScope.ANY, credentials); */

			if(debug){
				response.getWriter().println("insertPayLoad.toString(): "+insertPayLoad.toString());
			}
			requestEntity = new StringEntity(insertPayLoad.toString());
			// httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
				postRequest = new HttpPost(executeURL);
			postRequest.setHeader("Content-Type", "application/json");
			postRequest.setHeader("Accept", "application/json");
			postRequest.setEntity(requestEntity);
			// HttpResponse httpPostResponse = httpClient.execute(postRequest);
			HttpResponse httpPostResponse = client.execute(postRequest);
			responseEntity = httpPostResponse.getEntity();
			if (httpPostResponse.getEntity().getContentType() != null
					&& httpPostResponse.getEntity().getContentType().toString() != "") {
				String contentType = httpPostResponse.getEntity().getContentType().toString()
						.replaceAll("content-type:", "").trim();
				if (contentType.equalsIgnoreCase("application/xml;charset=utf-8")) {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
					if (debug)
						response.getWriter().println(EntityUtils.toString(responseEntity));
				} else {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
					if (debug)
						response.getWriter().println(data);
				}
			} else {
				response.setContentType("application/pdf");
				data = EntityUtils.toString(responseEntity);
				if (debug)
					response.getWriter().println(EntityUtils.toString(responseEntity));
			}
			int statusCode = httpPostResponse.getStatusLine().getStatusCode();
				if ((statusCode/100)==2) {
					JsonParser parser = new JsonParser();
					jsonObj = (JsonObject) parser.parse(data);
					jsonObj.addProperty("Status", "000001");
					jsonObj.addProperty("ErrorCode", "");
					jsonObj.addProperty("Message", "Record Inserted Successfully");
				} else {
					jsonObj.addProperty("Status", "000002");
					jsonObj.addProperty("ErrorCode", statusCode);
					jsonObj.addProperty("Message", data);
				}
				return jsonObj;
		}catch (Exception e) {
			postRequest.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("executeUpdate-Exception Stack Trace: "+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Status", "000002");
			jsonObj.addProperty("Message", buffer.toString());
		}/* finally{
			httpClient.close();
		} */
		return jsonObj;
	}

	public JsonObject executeURL(String executeURL, String userPass, HttpServletResponse response,boolean debug, String destination){
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		JsonObject jsonObj = null;
		String line=null;
		try{
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			//  CloseableHttpClient httpclient = HttpClients.createDefault();
			 HttpGet getRequest = new HttpGet(executeURL);
			 getRequest.setHeader(HttpHeaders.AUTHORIZATION, "Basic "+Base64.getEncoder().encodeToString(userPass.getBytes()));
			 getRequest.setHeader(HttpHeaders.ACCEPT, "application/json"); 
			 getRequest.setHeader(HttpHeaders.CONTENT_TYPE,"application/json; Charset=windows-1255");
			//  HttpResponse httpresponse = httpclient.execute(getRequest);
			HttpResponse httpresponse = client.execute(getRequest);
			 int statusCode = httpresponse.getStatusLine().getStatusCode();
			 in = new BufferedReader(new InputStreamReader(httpresponse.getEntity().getContent(),"UTF-8"));
			  StringBuffer responseStrBuffer = new StringBuffer();
			  while ((line = in.readLine()) != null) {
				  responseStrBuffer.append(line);
		        }
		      in.close();
			JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(responseStrBuffer.toString());
		}catch (Exception e) {
			response.getWriter().println("executeURL.Exception: "+e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeURL.Full Stack Trace: "+buffer.toString());
		}finally{
			return jsonObj;
		}
	}

	public JsonObject callAccountDetailsAPI(HttpServletResponse response,Properties properties,String aggrID,String accNum,boolean debug){
		JsonObject resObj=new JsonObject();
		JsonObject cpiInputPayload=new JsonObject();
		try{
			// Context ctxDestFact = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxDestFact
			// 		.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration cpiConfig = configuration.getConfiguration(DestinationUtils.CPI_CONNECT);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.CPI_CONNECT, options);
			Destination cpiConfig = destinationAccessor.get();

			final String username = cpiConfig.get("User").get().toString();
			final String passWord = cpiConfig.get("Password").get().toString();
			final String wsURL = cpiConfig.get("URL").get().toString();
			final String userpass = username + ":" + passWord;
			final String accVerfnActEndPnt = properties.getProperty("AccountDetails");
			final String endPointURL = wsURL + accVerfnActEndPnt;
			cpiInputPayload.addProperty("accountNumber", accNum);
			cpiInputPayload.addProperty("AggregatorID", aggrID);
			if (debug) {
				response.getWriter().println("endPointURL:" + endPointURL);
				
					response.getWriter().println("CPI Input :" + cpiInputPayload);
				
			}
			URL url = new URL(endPointURL);
			HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
			byte[] bytes = cpiInputPayload.toString().getBytes("UTF-8");
			urlConnection.setRequestMethod("GET");
			urlConnection.setRequestProperty("Content-Type", "application/json");
			urlConnection.setRequestProperty("charset", "utf-8");
			urlConnection.setRequestProperty("Content-Length", String.valueOf(bytes.length));
			urlConnection.setRequestProperty("Accept", "application/json");
			urlConnection.setDoOutput(true);
			urlConnection.setDoInput(true);
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userpass.getBytes());
			urlConnection.setRequestProperty("Authorization", basicAuth);
			urlConnection.connect();
			OutputStream outputStream = urlConnection.getOutputStream();
			OutputStreamWriter osw = new OutputStreamWriter(outputStream, "UTF-8");
			osw.write(cpiInputPayload.toString());
			osw.flush();
			osw.close();
			int resCode = urlConnection.getResponseCode();
			if (debug) {
				response.getWriter().println("responseCode: " + resCode);
			}
			
			if ((resCode / 100) == 2 || (resCode / 100) == 3) {
				StringBuffer sb = new StringBuffer();
				BufferedReader br = new BufferedReader(
						new InputStreamReader(urlConnection.getInputStream(), "utf-8"));
				String line = null;
				while ((line = br.readLine()) != null) {
					sb.append(line + "\n");
				}
				br.close();
				if (debug) {
					response.getWriter().println("Cpi Response: " + sb.toString());
				}
				String cpiResPnse = sb.toString();
				/*cpiResPnse=cpiResPnse.replaceAll("\"", "");*/
				JsonObject responseJson = (JsonObject) new JsonParser().parse(cpiResPnse);
				return responseJson;
			} else {
				StringBuffer sb = new StringBuffer();
				BufferedReader br = new BufferedReader(
						new InputStreamReader(urlConnection.getErrorStream(), "utf-8"));
				String line = null;
				while ((line = br.readLine()) != null) {
					sb.append(line + "\n");
				}
				br.close();
				if (debug) {
					response.getWriter().println("getErrorStream: " + sb.toString());
				}
				resObj.addProperty("Message", sb.toString());
				resObj.addProperty("ErrorCode", resCode);
				resObj.addProperty("Status", "000002");
				return resObj;
			}
			
		}catch(JsonSyntaxException ex ){
			resObj.addProperty("Message", "Invalid response from AccountDetails iflow");
			resObj.addProperty("ExceptionMessge", ex.getLocalizedMessage());
			resObj.addProperty("Status", "000002");
			resObj.addProperty("ErrorCode", "J002");
			return resObj;
		}
		catch(Exception ex){
			StackTraceElement[] stackTrace = ex.getStackTrace();
			StringBuffer buffer=new StringBuffer();
			for(int i=0;i<stackTrace.length;i++){
				buffer.append(stackTrace[i]);
			}
			resObj.addProperty("Message", ex.getLocalizedMessage()!=null?ex.getLocalizedMessage():"Exception Occured While Calling AccountDetails Api");
			resObj.addProperty("ExceptionTrace", buffer.toString());
			resObj.addProperty("ErrorCode", "J002");
			resObj.addProperty("Status", "000002");
			return resObj;
		}
	}

	public JsonObject updateCPIApplicationLog(String executeURL, String userPass, HttpServletResponse response, JSONObject updatePayLoad, 
			HttpServletRequest request,String accountID, boolean debug, String destination) throws IOException {
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName = "", password = "", authParam = "";
		JsonObject jsonObj = new JsonObject();
		try {
			if (debug) {
				response.getWriter().println("executeUpdate-updatePayLoad: " + updatePayLoad);
			}
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(destination, options);
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			requestEntity = new StringEntity(updatePayLoad.toString());

			/*
			 * String proxyType = destConfiguration.getProperty("ProxyType");
			 * userName = destConfiguration.getProperty("User"); password =
			 * destConfiguration.getProperty("Password");
			 */
			String[] split = userPass.split(":");
			userName = split[0];
			password = split[1];
			authParam = userName + ":" + password;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());

			if (debug) {
				response.getWriter().println("executeHttpPost.executeURL: " + executeURL);
				response.getWriter().println("executeHttpPost.userName: " + userName);
				response.getWriter().println("executeHttpPost.password: " + password);
				response.getWriter().println("executeHttpPost.authParam: " + authParam);
				response.getWriter().println("executeHttpPost.basicAuth: " + basicAuth);
			}

			HttpPut updateRequest = new HttpPut(executeURL);
			// updateRequest.setHeader("SAP-Connectivity-ConsumerAccount",accountID);
			updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
			updateRequest.setHeader("Content-Type", "application/json");
			updateRequest.setHeader("Accept", "application/json");
			updateRequest.setHeader("X-HTTP-Method", "PUT");
			updateRequest.setEntity(requestEntity);
			// updateRequest.setHeader("X-CSRF-Token", csrfToken);

			// HttpResponse httpResponse = httpClient.execute(updateRequest);
			HttpResponse httpResponse = client.execute(updateRequest);
			responseEntity = httpResponse.getEntity();

			if (debug) {
				response.getWriter()
						.println("executeUpdate.getStatusCode: " + httpResponse.getStatusLine().getStatusCode());
			}
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		} catch (RuntimeException e) {
			response.getWriter().println("Error at updating data: " + e.getMessage());
			response.getWriter().println("Error at updating data xmlgetLocalizedMessage: " + e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < element.length; i++) {
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:" + buffer.toString());

			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " + e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " + e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < element.length; i++) {
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:" + buffer.toString());

			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} /* finally {
			httpClient.close();
		} */
		return jsonObj;
	}

	public String getCurrentTime(){
		try {
			SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
			format.setTimeZone(TimeZone.getTimeZone("IST"));
			String time = format.format(new Date());
			return time;
		}catch(Exception ex){
			return new Date().toString();
		}
	}

	public String getCurrentDate(String dateFormat){
		try{
			Date date=new Date(System.currentTimeMillis());
			SimpleDateFormat format=new SimpleDateFormat(dateFormat);
			String forMatedDate = format.format(date);
			return forMatedDate;
		}catch(Exception ex){
			return "";
		}
	}

	public JsonObject sendEmail(String emailSubject,String username,String password,String url,final String eamil,final String emailPassword,String exceptionMessage, String aggregatorID, String cpNo, HttpServletResponse response,
				HttpServletRequest request, boolean debug, Properties properties) {
			CommonUtils commonUtils = new CommonUtils();
			ODataLogs oDataLogs = new ODataLogs();
			JsonObject resObj=new JsonObject();
			try {
				if (cpNo.length() < 10) {
					boolean isDigit = cpNo.matches("[0-9]+");
					try {
						if (isDigit) {
							int cpGUIDNum = Integer.parseInt(cpNo);
							cpNo = String.format("%010d", cpGUIDNum);
						}
					} catch (Exception ex) {

					}
				}
				// Send the Email to Support team.
				String executeURL = url + "Aggregators?$filter=AggregatorID%20eq%20%27" + aggregatorID + "%27";
				String userpass = username + ":" + password;
				String mails = null;
				JsonObject aggrObj = commonUtils.executeURL(executeURL, userpass, response);
				if (!aggrObj.has("error")
						&& aggrObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0) {
					JsonObject aggregatorName = aggrObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0)
							.getAsJsonObject();
					String aggName = aggregatorName.get("AggregatorName").getAsString();
					Properties emailProps = new Properties();
					String recepentEmail = properties.getProperty("Emails");
					emailProps.put("mail.smtp.auth", properties.getProperty("mail.smtp.auth"));
					emailProps.put("mail.smtp.starttls.enable", properties.getProperty("mail.smtp.starttls.enable"));
					emailProps.put("mail.smtp.host", properties.getProperty("mail.smtp.host"));
					emailProps.put("mail.smtp.port", properties.getProperty("mail.smtp.port"));
					try {
						Session session = Session.getInstance(emailProps, new javax.mail.Authenticator() {
							protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
								return new PasswordAuthentication(eamil, emailPassword);
							}
						});
						MimeMessage msg = new MimeMessage(session);
						msg.setFrom(new InternetAddress(eamil));
						String[] toMailsAddress = recepentEmail.split(",");
						for (int i = 0; i < toMailsAddress.length; i++) {
							msg.addRecipient(Message.RecipientType.TO, new InternetAddress(toMailsAddress[i]));
						}
						StringBuffer buffer = new StringBuffer();
						for (int i = 0; i < toMailsAddress.length; i++) {
							buffer.append(toMailsAddress[i]).append(";");
						}
						mails = buffer.substring(0, buffer.length() - 1);
						msg.setSubject(emailSubject);
						Multipart emailContent = new MimeMultipart();
						MimeBodyPart mailBody = new MimeBodyPart();
							mailBody.setText("Dear Team,\n\n\n" + "Send PaymentAdvice failed for Customer:" + aggName+ "(" + aggregatorID + ")"
									+ "\n\nAGGRID: " + aggName + " (" + aggregatorID + ")"
									+ "\nCPGUID: "+cpNo
									+ "\n\nException: "
									+ exceptionMessage + "\n\n\n\nThanks," + "\nFinessart Platform");
						emailContent.addBodyPart(mailBody);
						msg.setContent(emailContent);
						Transport.send(msg);
						resObj.addProperty("Message", "Mail Send Successfully");
						resObj.addProperty("Status", "000001");
						resObj.addProperty("ErrorCode", "");
					} catch (Exception ex) {
						StackTraceElement[] stackTrace = ex.getStackTrace();
						StringBuffer buffer = new StringBuffer();
						for (int i = 0; i < stackTrace.length; i++) {
							buffer.append(stackTrace[i]);
						}
						resObj.addProperty("ExceptionMssage", ex.getLocalizedMessage()+"");
						resObj.addProperty("Message", buffer.toString());
						resObj.addProperty("Status", "000002");
						resObj.addProperty("ErrorCode", "J002");
					}
				} else {
					if(aggrObj.has("error")){
					resObj.add("Message", aggrObj);
					resObj.addProperty("Status", "000002");
					resObj.addProperty("ErrorCode", "J002");
					}else{
						resObj.addProperty("Message", "AggregatorName not found");
						resObj.addProperty("Status", "000002");
						resObj.addProperty("ErrorCode", "J002");	
					}
					
					
				}
			} catch (Exception ex) {
				StackTraceElement[] stackTrace = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for (int i = 0; i < stackTrace.length; i++) {
					buffer.append(stackTrace[i]);
				}
				resObj.addProperty("ExceptionMessage", ex.getLocalizedMessage() + "");
				resObj.addProperty("Message", buffer.toString());
				resObj.addProperty("Status", "000002");
				resObj.addProperty("ErrorCode", "J002");
			}finally{
				return resObj;
			}

		}

		public JsonObject insertIntoLogsOnEvent(HttpServletResponse response,String aggregatorID,JsonObject applicationLog,JsonArray applicationLogMessage,boolean debug){
			CommonUtils commonUtils=new CommonUtils();
			try{
				JsonObject objevnt=new JsonObject();
				JsonObject onObjectEvent=new JsonObject();
				objevnt.addProperty("Object", "ApplicationLog");
				objevnt.addProperty("Event", "INSERT");
				objevnt.addProperty("AggregatorID", aggregatorID);
				objevnt.addProperty("Identifier", "000001");
				objevnt.add("Message", applicationLog);
				onObjectEvent.add("OnObjectEvent", objevnt);
				if(debug){
					response.getWriter().println("onObjectEvent:"+onObjectEvent);
				}
				JsonObject onObjRes = callOnObjectEventPublish(response, onObjectEvent, debug);
				if(debug){
					response.getWriter().println("onObjRes:"+onObjRes);
				}
				if(onObjRes.get("Status").getAsString().equalsIgnoreCase("000001")){
					JsonObject appLogMsg=new JsonObject();
					JsonObject onObjEvent=new JsonObject();
					appLogMsg.addProperty("Object", "ApplicationLog");
					appLogMsg.addProperty("Event", "INSERT");
					appLogMsg.addProperty("AggregatorID", aggregatorID);
					appLogMsg.addProperty("Identifier", "000002");
					appLogMsg.add("Message", applicationLogMessage);
					onObjEvent.add("OnObjectEvent", appLogMsg);
					if(debug){
						response.getWriter().println("Application LogMessage Input PayLoad:"+onObjEvent);
					}
					onObjRes = callOnObjectEventPublish(response, onObjEvent, debug);
					if(debug){
						response.getWriter().println("Application Log Message Response:"+onObjRes);
					}
					return onObjRes;
				  }
				return onObjRes;
			}catch(Exception ex){
				StackTraceElement[] stackTrace = ex.getStackTrace();
				StringBuffer buffer=new StringBuffer();
				for(int i=0;i<stackTrace.length;i++){
					buffer.append(stackTrace[i]);
				}
				JsonObject resObj=new JsonObject();
				resObj.addProperty("Message", buffer.toString());
				resObj.addProperty("Status", "000002");
				resObj.addProperty("ErrorCode", "J002");
				resObj.addProperty("ExceptionMessage", ex.getLocalizedMessage());
				return resObj;
			}
			
		}

		public JsonObject sendQtdSalesExceptionMail(String reasonMessage,Properties properties,String spGuid,String userName,String passWord)throws IOException{
			CommonUtils commonUtils=new CommonUtils();
			JsonObject resObj=new JsonObject();
			try {	
					Properties emailProps = new Properties();
					
					//final String userName = commonUtils.getODataDestinationProperties("emailid", DestinationUtils.PLATFORM_EMAIL);
					//final String passWord = commonUtils.getODataDestinationProperties("Password", DestinationUtils.PLATFORM_EMAIL);
					String recipentEmail = properties.getProperty("MdtSupportMail");
					emailProps.put("mail.smtp.auth", properties.getProperty("mail.smtp.auth"));
					emailProps.put("mail.smtp.starttls.enable", properties.getProperty("mail.smtp.starttls.enable"));
					emailProps.put("mail.smtp.host", properties.getProperty("mail.smtp.host"));
					emailProps.put("mail.smtp.port", properties.getProperty("mail.smtp.port"));
					String emailSubject = properties.getProperty("MdtSupportMailSub");
					try {
						Session session = Session.getInstance(emailProps, new javax.mail.Authenticator() {
							protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
								return new PasswordAuthentication(userName, passWord);
							}
						});
						MimeMessage msg = new MimeMessage(session);
						msg.setFrom(new InternetAddress(userName));
						String[] toMailsAddress = recipentEmail.split(",");
						for (int i = 0; i < toMailsAddress.length; i++) {
							msg.addRecipient(Message.RecipientType.TO, new InternetAddress(toMailsAddress[i]));
						}
						
						msg.setSubject(emailSubject);
						Multipart emailContent = new MimeMultipart();
						MimeBodyPart mailBody = new MimeBodyPart();
					    mailBody.setText("Dear Team,\n\n\nSending QTD report has failed for the below SP:\n" + spGuid + "\n\n\nException: "+reasonMessage+"\n\n\nThanks & Regards,\nMedtronic DMS Team");
						emailContent.addBodyPart(mailBody);
						msg.setContent(emailContent);
						Transport.send(msg);
						resObj.addProperty("Status", "000001");
						resObj.addProperty("ErrorCode", "");
						resObj.addProperty("Message", "Mail Send Successfully");

					} catch (Exception ex) {
						StackTraceElement[] stackTrace = ex.getStackTrace();
						StringBuffer buffer = new StringBuffer();
						for (int i = 0; i < stackTrace.length; i++) {
							buffer.append(stackTrace[i]);
						}
						if (ex.getLocalizedMessage() != null) {
							resObj.addProperty("ExceptionMessage", ex.getLocalizedMessage());
						}
						resObj.addProperty("Message", buffer.toString());
						resObj.addProperty("Status", "000002");
						resObj.addProperty("ErrorCode", "J002");
					}
				
			}catch(Exception ex){
				StackTraceElement[] stackTrace = ex.getStackTrace();
				StringBuffer buffer=new StringBuffer();
				for(int i=0;i<stackTrace.length;i++){
					buffer.append(stackTrace[i]);
				}
				if(ex.getLocalizedMessage()!=null){
					resObj.addProperty("ExceptionMessage", ex.getLocalizedMessage());
				}
				resObj.addProperty("Message", buffer.toString());
				resObj.addProperty("Status", "000002");
				resObj.addProperty("ErrorCode", "J002");
			}
			return resObj;
		}

		public JsonObject callOnObjectEventPublish(HttpServletResponse response,JsonObject inputPayload,boolean debug){
			try{
				// Context ctxDestFact = new InitialContext();
				// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctxDestFact
				// 		.lookup("java:comp/env/connectivityConfiguration");
				// DestinationConfiguration cpiConfig = configuration.getConfiguration(DestinationUtils.CPI_CONNECT);

				DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
						.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
				Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
						.tryGetDestination(DestinationUtils.CPI_CONNECT, options);
				Destination cpiConfig = destinationAccessor.get();

				String wsURL = cpiConfig.get("URL").get().toString();
				if (debug) {
					response.getWriter().println("WsURL :" + wsURL);
				}
				String userName = cpiConfig.get("User").get().toString();
				String passWord = cpiConfig.get("Password").get().toString();
				String userpass = userName + ":" + passWord;
				wsURL = wsURL.concat("OnObjectEventPublish");
				if (debug) {
					response.getWriter().println("CPI Input Json Payload " + inputPayload);
					response.getWriter().println("WsURL :" + wsURL);
				}
				URL url = new URL(wsURL);
				HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
				byte[] bytes = inputPayload.toString().getBytes("UTF-8");
				urlConnection.setRequestMethod("GET");
				urlConnection.setRequestProperty("Content-Type", "application/json");
				urlConnection.setRequestProperty("charset", "utf-8");
				urlConnection.setRequestProperty("Content-Length", String.valueOf(bytes.length));
				urlConnection.setRequestProperty("Accept", "application/json");
				urlConnection.setDoOutput(true);
				urlConnection.setDoInput(true);
				String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userpass.getBytes());
				urlConnection.setRequestProperty("Authorization", basicAuth);
				urlConnection.connect();
				OutputStream outputStream = urlConnection.getOutputStream();
				OutputStreamWriter osw = new OutputStreamWriter(outputStream, "UTF-8");
				osw.write(inputPayload.toString());
				osw.flush();
				osw.close();
				int resCode = urlConnection.getResponseCode();
				if ((resCode / 100) == 2 || (resCode / 100) == 3) {
					StringBuffer sb = new StringBuffer();
					BufferedReader br = new BufferedReader(
							new InputStreamReader(urlConnection.getInputStream(), "utf-8"));
					String line = null;
					while ((line = br.readLine()) != null) {
						sb.append(line + "\n");
					}
					br.close();
					if (debug) {
						response.getWriter().println("sb: " + sb.toString());
					}
					String res = sb.toString();
					JsonParser jsonParser = new JsonParser();
					JsonObject responseJson = (JsonObject) jsonParser.parse(res);
					responseJson.addProperty("Remarks", "");
					if (debug)
						response.getWriter().println("responseJson: " + responseJson);
					return responseJson;
	
				} else {
					JsonObject responseJson = new JsonObject();
					StringBuffer sb = new StringBuffer();
					BufferedReader br = new BufferedReader(
							new InputStreamReader(urlConnection.getErrorStream(), "utf-8"));
					String line = null;
					while ((line = br.readLine()) != null) {
						sb.append(line + "\n");
					}
					br.close();
					if (debug) {
						response.getWriter().println("getErrorStream: " + sb.toString());
					}
					String res = sb.toString();
					responseJson.addProperty("Status", "000002");
					responseJson.addProperty("ErrorCode", "J001");
					responseJson.addProperty("Message", urlConnection.getResponseMessage());
					if (debug)
						response.getWriter().println("responseJson: " + responseJson);
					return responseJson;
				}
	
				
			}catch(Exception ex){
				StackTraceElement element[] = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for (int i = 0; i < element.length; i++) {
					buffer.append(element[i]);
				}
				JsonObject result = new JsonObject();
				result.addProperty("ErrorCode", "J002");
				result.addProperty("Message",buffer.toString());
				result.addProperty("Status", "000002");
				result.addProperty("Valid", "false");
				return result;
			}
		}

		public JsonObject getConfigTypeSetsOnTypesetAndTypes(HttpServletRequest request, HttpServletResponse response,String typeSet, String types, String aggregatorID, boolean debug) throws IOException, URISyntaxException{
			JsonObject configTypesetRetObj = new JsonObject();
			JsonObject oDataResponse = new JsonObject();
			String oDataUrl="", userName="", password="", userPass="", executeURL="";
			try{
				
				oDataUrl = getODataDestinationProperties("URL", "PCGWHANA");
				userName = getODataDestinationProperties("User", "PCGWHANA");
				password = getODataDestinationProperties("Password", "PCGWHANA");
				userPass = userName+":"+password;
				
				if(debug){
					response.getWriter().println("getConfigTypeSetsOnTypesetAndTypes-oDataUrl: "+oDataUrl);
					response.getWriter().println("getConfigTypeSetsOnTypesetAndTypes-aggregatorID: "+aggregatorID);
//					response.getWriter().println("getAccountStatusCode-userName: "+userName);
//					response.getWriter().println("getAccountStatusCode-password: "+password);
//					response.getWriter().println("getAccountStatusCode-userPass: "+userPass);
				}
				executeURL = oDataUrl+"ConfigTypsetTypeValues?$filter=Typeset%20eq%20%27"+typeSet+"%27%20and%20Types%20eq%20%27"+types+"%27%20and%20AggregatorID%20eq%20%27"+aggregatorID+"%27";
				if(debug)
					response.getWriter().println("getConfigTypeSetsOnTypesetAndTypes-executeURL: "+executeURL);
				
				oDataResponse = executeURL(executeURL, userPass, response);
				JsonObject results = oDataResponse.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
				if(debug)
					response.getWriter().println("getConfigTypeSetsOnTypesetAndTypes-dresults: "+dresults);
				if(dresults.size() == 0){
					configTypesetRetObj = new JsonObject();
					configTypesetRetObj.addProperty("Message", "No records found");
					configTypesetRetObj.addProperty("Status", "000002");
					configTypesetRetObj.addProperty("ErrorCode", "J001");
					if(debug){
						response.getWriter().println("result=0-configTypesetRetObj: "+configTypesetRetObj);
					}
					return configTypesetRetObj;
				}else{
					configTypesetRetObj = new JsonObject();
					configTypesetRetObj = dresults.get(0).getAsJsonObject();
					configTypesetRetObj.addProperty("Status", "000001");
					if(debug){
						response.getWriter().println("result>0-configTypesetRetObj: "+configTypesetRetObj);
					}
					return configTypesetRetObj;
				}
			}catch (Exception e) {
				configTypesetRetObj = new JsonObject();
				StackTraceElement[] stackTrace = e.getStackTrace();
				StringBuffer buffer=new StringBuffer();
				for(int i=0;i<stackTrace.length;i++){
					buffer.append(stackTrace[i]);
				}
				if(e.getLocalizedMessage()!=null){
					configTypesetRetObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
				}
				configTypesetRetObj.addProperty("Message", buffer.toString());
				configTypesetRetObj.addProperty("Status", "000002");
				configTypesetRetObj.addProperty("ErrorCode", "J002");
				
				if(debug){
					response.getWriter().println("exception-configTypesetRetObj: "+configTypesetRetObj);
				}
				return configTypesetRetObj;
			}
		}

		public JsonObject executeAccountLinkingURL(String executeURL, String userPass, HttpServletResponse response,boolean debug){
			DataOutputStream dataOut = null;
			BufferedReader in =null;
			JsonObject jsonObj = null;
			try{
				URL urlObj = new URL(executeURL);
				HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
				connection.setRequestMethod("GET");
				connection.setRequestProperty("Content-Type","application/json");
				connection.setRequestProperty("Accept","application/json");
				connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encodeToString(userPass.getBytes()));
				connection.setDoInput(true);
	
				int responseCode = connection.getResponseCode();
				if (debug) {
					response.getWriter().println("responseCode: " + responseCode);
				}
				if (responseCode == 200) {
					in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
					String inputLine;
					StringBuffer responseStrBuffer = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						responseStrBuffer.append(inputLine);
					}
					JsonParser parser = new JsonParser();
					jsonObj = (JsonObject) parser.parse(responseStrBuffer.toString());
				} else {
					jsonObj = new JsonObject();
					if (responseCode == 404) {
						jsonObj.addProperty("Message",
								"Resource Not Exist with Http Status Code:" + connection.getResponseMessage());
						jsonObj.addProperty("ErrorCode", "J002");
						jsonObj.addProperty("Status", "000002");
					} else if (responseCode == 401) {
						jsonObj.addProperty("Message",
								"Unauthorized Issue with Http Status Code: " + connection.getResponseMessage());
						jsonObj.addProperty("ErrorCode", "J002");
						jsonObj.addProperty("Status", "000002");
					} else {
						jsonObj.addProperty("Message", "Unable to fetch records:" + connection.getResponseMessage());
						jsonObj.addProperty("ErrorCode", "J002");
						jsonObj.addProperty("Status", "000002");
					}
				}
			}catch (Exception e) {
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++){
					buffer.append(element[i]);
				}
				jsonObj = new JsonObject();
				jsonObj.addProperty("Message", e.getLocalizedMessage());
				jsonObj.addProperty("ExceptionStackTrace", buffer.toString());
				jsonObj.addProperty("ErrorCode", "J002");
				jsonObj.addProperty("Status", "000002");
			}finally{
				return jsonObj;
			}
		}

	public JsonObject userAccountsCreate(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, String loginID, 
			String aggregatorID, String oDataURL, Properties properties,JsonArray appLogMessArray,String appLogID, boolean debug) throws IOException{
		JsonObject userAccCreateResponseToUI = new JsonObject();
		JsonObject errorResponseObj = new JsonObject();
		JsonObject bankAccountEntriesJson = new JsonObject();
		JsonObject bankAccountEntriesJsonWithSI = new JsonObject();
		Map<String, String> userRegMap = new HashMap<String, String>();
		Map<String,String> accountsWSResponseMap = new HashMap<String,String>();
		Map<String,String> scfEntryMapForUser = new HashMap<String,String>();
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		String message = "", testRun = "", accountTypeFromWS = "", isCFSOFFromWS="", accountNoFromUI = "", ddbActiveFromUI="";
		int userAccSize=0;
		boolean hasUserRegistered = true, validationSuccess = false, isOfflineODAccount = false;
		String setSIForResponse="";
		ODataLogs appLogs=new ODataLogs();
		AtomicInteger stepNo=new AtomicInteger(1);
		String successResponse = "{\"d\":{\"__metadata\":{\"id\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/UserAccounts(guid'USERACCOUNTGUID_VALUE')\",\"uri\":\"http://sserp:8000/sap/opu/odata/ARTEC/PYGW/UserAccounts(guid'USERACCOUNTGUID_VALUE')\",\"type\":\"ARTEC.PYGW.UserAccount\"}"
				+ ",\"UaccntGuid\":\"USERACCOUNTGUID_VALUE\""
				+ ",\"LoginId\":\"LOGINID_VALUE\""
				+ ",\"Corpid\":\"\""
				+ ",\"Userid\":\"\""
				+ ",\"BankCountry\":\"\""
				+ ",\"BankKey\":\"\""
				+ ",\"BankAccntNo\":\"BANKACCOUNTNO_VALUE\""
				+ ",\"BankAccntType\":\"BANKACCOUNTTYPE_VALUE\""
				+ ",\"BankAccntSts\":\"BANKACCOUNTSTATUS_VALUE\""
				+ ",\"CreatedOn\":null"
				+ ",\"CreatedBy\":\"\""
				+ ",\"CreatedAt\":\"PT00H00M00S\""
				+ ",\"ChangedOn\":null"
				+ ",\"ChangedBy\":\"\""
				+ ",\"ChangedAt\":\"PT00H00M00S\""
				+ ",\"BankAccStsDs\":\"\""
				+ ",\"BankAccTypeDs\":\"\""
				+ ",\"CustomerID\":\"\""
				+ ",\"CustomerTitle\":\"\""
				+ ",\"CustomerName\":\"\""
				+ ",\"CustomerShortName\":\"\""
				+ ",\"ModeOfOperation\":\"\""
				+ ",\"IsAccountClosed\":\"\""
				+ ",\"AccountClosedDate\":null"
				+ ",\"DDBActive\":\"DDBACTIVE_VALUE\""
				+ ",\"Testrun\":\"TESTRUN_VALUE\""
				+ ",\"SetSI\":\"SETSI_VALUE\""
				+ ",\"IsCFSODA\":\"ISCFSOD_VALUE\"}}";
		
		String errorResponse = "{\"error\":{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":{\"lang\":\"en\",\"value\":\"ERROR_MESSAGE\"}"
				+ ",\"innererror\":{\"application\":{\"component_id\":\"\",\"service_namespace\":\"/ARTEC/\",\"service_id\":\"PYGW\""
				+ ",\"service_version\":\"0001\"},\"transactionid\":\"8A50D8E98D62F127A8EC001372667F53\",\"timestamp\":null"
				+ ",\"Error_Resolution\":{\"SAP_Transaction\":\"Run transaction /IWFND/ERROR_LOG on SAP Gateway hub system and search for entries with the timestamp above for more details\""
				+ ",\"SAP_Note\":\"See SAP Note 1797736 for error analysis (https://service.sap.com/sap/support/notes/1797736)\""
				+ ",\"Batch_SAP_Note\":\"See SAP Note 1869434 for details about working with $batch (https://service.sap.com/sap/support/notes/1869434)\"}"
				+ ",\"errordetails\":[{\"code\":\"/ARTEC/PY/ERROR_CODE\""
				+ ",\"message\":\"ERROR_MESSAGE\",\"propertyref\":\"\""
				+ ",\"severity\":\"error\",\"target\":\"\"},{\"code\":\"/IWBEP/CX_SD_GEN_DPC_BUSINS\""
				+ ",\"message\":\"An application exception has occurred.\",\"propertyref\":\"\",\"severity\":\"error\",\"target\":\"\"}]}}}";
		
		try{
			
			if(debug)
				response.getWriter().println("userAccountsCreate-inputJsonObj: "+inputJsonObj);
			
			message = validateAccountCreateInput(response, inputJsonObj, aggregatorID, debug);
			// need to log the message.
			appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5652", "userAccountsCreate-validateAccountCreateInput.message:", "validateAccountCreateInput()", stepNo.getAndIncrement()+"", inputJsonObj+"", message);
			if(debug)
				response.getWriter().println("userAccountsCreate-validateAccountCreateInput.message: "+message);
			
			if(message != null && message.trim().length() > 0){
				if(message.equalsIgnoreCase("Technical Error : Missing value for mandatory field : UaccntGuid")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "120");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else if(message.equalsIgnoreCase("Technical Error : Missing value for mandatory field : BankAccntNo")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "120");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else if(message.equalsIgnoreCase("Given User Account Guid is already available")){
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "160");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}else{
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", "001");
					errorResponseObj.addProperty("ErrorMessage", message);
					userAccCreateResponseToUI.add("d", errorResponseObj);
				}
			}else{
				bankAccountEntriesJson = getUserAccountsInJson(request, response, loginID, oDataURL, aggregatorID, "", properties, debug);
				//need to log the bankAccountEntriesJson
				appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5681", "bankAccountEntriesJson=", "getUserAccountsInJson()", stepNo.getAndIncrement()+"","", bankAccountEntriesJson+"");
				if(! bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").isJsonNull() 
						&& bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().length() > 0){
//					userAccCreateResponseToUI = bankAccountEntriesJson;
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorCode").getAsString());
					errorResponseObj.addProperty("ErrorMessage", bankAccountEntriesJson.get("d").getAsJsonObject().get("ErrorMessage").getAsString());
					userAccCreateResponseToUI.add("d", errorResponseObj);
//					return userAccCreateResponseToUI;
				}else{
					userAccSize = getResultsSize(response, bankAccountEntriesJson, debug);
					// log the userAccSize
					appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5693", "userAccSize=", "getResultsSize()", stepNo.getAndIncrement()+"","", userAccSize+"");
					if(userAccSize > 0){
						message = validateAccount(response, inputJsonObj, bankAccountEntriesJson, loginID, aggregatorID, oDataURL, debug);
					}
					// need to log the message
					// appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5698", "message=", "validateAccount()", stepNo.getAndIncrement()+"","", message);
					if(message != null && message.trim().length() > 0){
						if(message.equalsIgnoreCase("151")){
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
							userAccCreateResponseToUI.add("d", errorResponseObj);
						}else{
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", "001");
							errorResponseObj.addProperty("ErrorMessage", message);
							userAccCreateResponseToUI.add("d", errorResponseObj);
						}
					}else{
						//Proceed Further
						userRegMap = getUserRegDetails(request, response, loginID, aggregatorID, oDataURL, debug);
						// need to log the userRegMap
						JsonObject logUserRegMap=new JsonObject();
						for (String key : userRegMap.keySet()) {
							if(debug)
								response.getWriter().println("userAccountsCreate-userRegResponseMap: "+key + " - " + userRegMap.get(key));
							if (userRegMap.get(key) != null) {
								logUserRegMap.addProperty(key, userRegMap.get(key));
							} else {
								logUserRegMap.add(key, null);
							}
							if(key.equalsIgnoreCase("Error")){
								if(userRegMap.get(key).equalsIgnoreCase("054") || userRegMap.get(key).equalsIgnoreCase("001")){
									hasUserRegistered = false;
									break;
								}else{
									if(! userRegMap.get("UserRegStatus").equalsIgnoreCase("000002")){
										hasUserRegistered = false;
										break;
									}
								}
							}
						}
						
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5737", "userRegMap=", "getUserRegDetails()", stepNo.getAndIncrement()+"","", logUserRegMap+"");
						// need to log the hasUserRegistered
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5739", "hasUserRegistered=", "hasUserRegistered Value set from userRegMap Map", stepNo.getAndIncrement()+"","", logUserRegMap+"");
						if(hasUserRegistered){
							if(debug){
								response.getWriter().println("userAccountsCreate.loginID"+loginID);
								response.getWriter().println("userAccountsCreate.oDataURL"+oDataURL);
								response.getWriter().println("userAccountsCreate.aggregatorID"+aggregatorID);
							}
							//Call Accounts WS
							accountsWSResponseMap = getAccountDetails(request, response, inputJsonObj, userRegMap, aggregatorID, debug);
						// log the accountsWSResponseMap Error Property.
							JsonObject logAccResJson=new JsonObject();
							accountsWSResponseMap.forEach((key,value)->{
							   if(value==null){
								   logAccResJson.add(key, null);
							   }else{
								   logAccResJson.addProperty(key, value); 
							   }
							});
							appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5757", "accountsWSResponseMap=", "getAccountDetails()", stepNo.getAndIncrement()+"","", logAccResJson+"");
							if(accountsWSResponseMap.get("Error").equalsIgnoreCase("059")){
								message = "059";
								errorResponseObj.addProperty("Status", "000000");
								errorResponseObj.addProperty("ErrorCode", message);
								errorResponseObj.addProperty("ErrorMessage", accountsWSResponseMap.get("Message"));
								userAccCreateResponseToUI.add("d", errorResponseObj);
							}else{
								bankAccountEntriesJsonWithSI = bankAccountEntriesJson;
								bankAccountEntriesJson = null;
								bankAccountEntriesJson = setStandingInstruction1(request, response, bankAccountEntriesJsonWithSI, properties, loginID, aggregatorID, oDataURL,appLogs,appLogMessArray,appLogID,stepNo,debug);
								//appLogs,appLogMessArray,appLogID,stepNo,debug
								try{
									testRun = inputJsonObj.getString("Testrun");
								}catch (Exception e) {
									if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
										//When Testrun in ""
										testRun = "";
									}
								}
								accountNoFromUI = inputJsonObj.getString("BankAccntNo");
								ddbActiveFromUI = inputJsonObj.getString("DDBActive");
								accountTypeFromWS = accountsWSResponseMap.get("AccountType");
								isCFSOFFromWS = accountsWSResponseMap.get("IsCFSOD");
								if(debug){
									response.getWriter().println("userAccountsCreate.bankAccountEntriesJson: "+bankAccountEntriesJson);
									response.getWriter().println("userAccountsCreate.testRun: "+testRun);
									response.getWriter().println("userAccountsCreate.accountTypeFromWS: "+accountTypeFromWS);
									response.getWriter().println("userAccountsCreate.isCFSOFFromWS: "+isCFSOFFromWS);
								}
								// need to log the accountNoFromUI,ddbActiveFromUI,accountTypeFromWS,isCFSOFFromWS and testRun
								String logMsg="BankAccntNo="+accountNoFromUI+"DDBActive"+ddbActiveFromUI+"userAccountsCreate.bankAccountEntriesJson="+bankAccountEntriesJson+",userAccountsCreate.testRun="+testRun+",userAccountsCreate.accountTypeFromWS="+accountTypeFromWS+",userAccountsCreate.isCFSOFFromWS="+isCFSOFFromWS;
								appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5789", "Values from inputJsonObj and  accountsWSResponseMap", "", stepNo.getAndIncrement()+"","", logMsg+"");
								String accountTypeFromUACTbl = "", setSIFromUACTbl = "";
								boolean isValidODA=true;
								if(testRun != null && testRun.trim().length() > 0){
									if(testRun.equalsIgnoreCase("X")){
										if(accountTypeFromWS != null && accountTypeFromWS.trim().length() > 0){
											if(accountTypeFromWS.equalsIgnoreCase("ODA") && isCFSOFFromWS.equalsIgnoreCase("Y")){
												JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
												JsonArray dresults = results.get("results").getAsJsonArray();
												for (int i = 0; i <= dresults.size() - 1; i++) {
													accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
													setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
													
													if(debug){
														response.getWriter().println("userAccountsCreate.ODA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
														response.getWriter().println("userAccountsCreate.ODA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
													}
													
													if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
														isValidODA=false;
														break;
													}
												}
												// log the isValidODA value
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5813", "isValidODA=", "if AccountType is ODA", stepNo.getAndIncrement()+"","", isValidODA+"");
												if(! isValidODA){
													message = "153";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//Get SCF Entries
													scfEntryMapForUser = getSCFEntryForTheUser(response, inputJsonObj, aggregatorID, loginID, debug);
													
													if(debug){
														/*for (String key : scfEntryMapForUser.keySet()) {
															response.getWriter().println("userAccCreate.scfEntryMapForUser: "+key + " - " + scfEntryMapForUser.get(key));
														}*/
														response.getWriter().println("userAccCreate.scfEntryMapForUser.ErrorCode: "+scfEntryMapForUser.get("ErrorCode"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo"));
														response.getWriter().println("userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive"));
														response.getWriter().println("userAccCreate.accountNoFromUI: "+accountNoFromUI);
													}
													// need to log above debug block properties from scfEntryMapForUser Map.
													String logMessage="userAccCreate.scfEntryMapForUser.ErrorCode="+scfEntryMapForUser.get("ErrorCode")+"userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID")+" userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo")+" userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive")+" userAccCreate.accountNoFromUI: "+accountNoFromUI;
													appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5836", "scfEntryMapForUser", "getSCFEntryForTheUser()", stepNo.getAndIncrement()+"","", logMessage);
													if(scfEntryMapForUser.get("ErrorCode") != null && scfEntryMapForUser.get("ErrorCode").trim().length() == 0){
														if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000002")){
															if(! scfEntryMapForUser.get("AccountNo").equalsIgnoreCase(accountNoFromUI)){
																message = "185";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is already active. Please link the same account");
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}else{
																if(scfEntryMapForUser.get("DDBActive") != null && scfEntryMapForUser.get("DDBActive").equalsIgnoreCase("X")){
																	//setsi=""
																	setSIForResponse="";
																	validationSuccess = true;
																}else{
																	//setsi="X"
																	setSIForResponse="X";
																	validationSuccess = true;
																}
															}
														}else if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000001")){
															message = "185";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}else{
															//setsi = "X"
															setSIForResponse="X";
															validationSuccess = true;
														}
													}else{
														//Offline OD Account Scenario
														if(debug)
															response.getWriter().println("Offline ODA scenario.userAccCreateResponseToUI: "+userAccCreateResponseToUI);
														
														if (scfEntryMapForUser.get("ErrorCode").equalsIgnoreCase("000")) {
															setSIForResponse="X";
															isOfflineODAccount = true;
															validationSuccess = true;
														}else{
															message = "001";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", scfEntryMapForUser.get("ErrorMessage"));
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}
														logMsg="ErrorCode="+scfEntryMapForUser.get("ErrorCode")+", setSIForResponse="+setSIForResponse+",isOfflineODAccount="+isOfflineODAccount+",validationSuccess="+validationSuccess;
														appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5884", "Offline OD Account Scenario", "", stepNo.getAndIncrement()+"","", logMsg);
														// Log the above scfEntryMapForUser.get("ErrorCode"),setSIForResponse,isOfflineODAccount,validationSuccess Message1:Offline OD Account Scenario
													}
												}
											}else if(accountTypeFromWS.equalsIgnoreCase("ODA") && isCFSOFFromWS.equalsIgnoreCase("N")){
												//setsi=""
												setSIForResponse="";
												validationSuccess = true;
												logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess="+validationSuccess;
												// log the above setSIForResponse and validationSuccess values Message1:Line number
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5894", "accountTypeFromWS.equalsIgnoreCase equal to ODA", "isCFSOFFromWS is equal to N", stepNo.getAndIncrement()+"","", logMsg);
											}else if(accountTypeFromWS.equalsIgnoreCase("CAA")){
												//If account type is CAA
												boolean doNothing = false;
												accountTypeFromUACTbl = ""; setSIFromUACTbl="";
												String ddbActive = "";
												JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
												JsonArray dresults = results.get("results").getAsJsonArray();
												for (int i = 0; i <= dresults.size() - 1; i++) {
													accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
													setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
													
													if(debug){
														response.getWriter().println("userAccountsCreate.ODA and SI is 'X'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
														response.getWriter().println("userAccountsCreate.ODA and SI is 'X'.setSIFromUACTbl: "+setSIFromUACTbl);
													}
													if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
														doNothing = true;
													}
												}
												// log the accountTypeFromUACTbl,setSIFromUACTbl and doNothing
												logMsg="accountTypeFromUACTbl:"+accountTypeFromUACTbl+",setSIFromUACTbl="+setSIFromUACTbl+",doNothing="+doNothing;
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5916", "accountTypeFromWS equal to  CAA", "", stepNo.getAndIncrement()+"","", logMsg);
												if(! doNothing){
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull()){
															ddbActive = "";
														}else{
															ddbActive = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString();
														}
														
														if(debug){
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.setSIFromUACTbl: "+setSIFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and SI is 'O'.setSIFromUACTbl: "+ddbActive);
														}
														if(accountTypeFromUACTbl.equalsIgnoreCase("CAA") && setSIFromUACTbl.equalsIgnoreCase("O") && ddbActive.equalsIgnoreCase("X")){
															doNothing = true;
														}
													}
													// log the accountTypeFromUACTbl,setSIFromUACTbl and ddbActive along with Line Number
													logMsg="accountTypeFromUACTbl:"+accountTypeFromUACTbl+",setSIFromUACTbl="+setSIFromUACTbl+",doNothing="+doNothing+",ddbActive="+ddbActive;
													appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5939", "", "", stepNo.getAndIncrement()+"","", logMsg);
													if(! doNothing){
														//setSI = "O"
														setSIForResponse="O";
														validationSuccess = true;
													}else{
														//setSI = ""
														setSIForResponse="";
														validationSuccess = true;
													}
												}else{
													//setSI = ""
													setSIForResponse="";
													validationSuccess = true;
												}
												// log the setSIForResponse and validationSuccess.
												logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess="+validationSuccess;
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5956", "", "", stepNo.getAndIncrement()+"","", logMsg);
											}else if(!accountTypeFromWS.equalsIgnoreCase("CAA") && !accountTypeFromWS.equalsIgnoreCase("ODA")){
												//setSI = ""
//												setSIForResponse="";
//												validationSuccess = true;
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "146";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//setsi = "";
													setSIForResponse="";
													validationSuccess = true;
												}
												// log the setSIForResponse and validationSuccess.
												logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess="+validationSuccess+",ddbActiveFromUI="+ddbActiveFromUI;
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=5974", "accountTypeFromWS not equal to CAA ", "accountTypeFromWS not equal to ODA", stepNo.getAndIncrement()+"","", logMsg);
											}
										}
									}
									
									
								}else{
									//TestRun is Blank
									if(accountTypeFromWS != null && accountTypeFromWS.trim().length() > 0){
										if(accountTypeFromWS.equalsIgnoreCase("ODA")){
											if(isCFSOFFromWS.equalsIgnoreCase("Y")){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
													JsonArray dresults = results.get("results").getAsJsonArray();
													accountTypeFromUACTbl = ""; setSIFromUACTbl="";
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(debug){
															response.getWriter().println("userAccountsCreate.ODA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.ODA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
														}
														
														if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
															isValidODA=false;
															break;
														}
													}
													
													appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6004", "isValidODA=", "Test Run is blank,accountTypeFromWS is equal to ODA and isCFSOFFromWS is equal to Y", stepNo.getAndIncrement()+"","", isValidODA+"");
													if(! isValidODA){
														message = "153";
														errorResponseObj.addProperty("Status", "000000");
														errorResponseObj.addProperty("ErrorCode", message);
														errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
														userAccCreateResponseToUI.add("d", errorResponseObj);
													}else{
														//Get SCF Entries
														scfEntryMapForUser = getSCFEntryForTheUser(response, inputJsonObj, aggregatorID, loginID, debug);
														
														if(debug){
															/*for (String key : scfEntryMapForUser.keySet()) {
																response.getWriter().println("userAccCreate.scfEntryMapForUser: "+key + " - " + scfEntryMapForUser.get(key));
															}*/
															response.getWriter().println("userAccCreate.scfEntryMapForUser.ErrorCode: "+scfEntryMapForUser.get("ErrorCode"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo"));
															response.getWriter().println("userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive"));
															response.getWriter().println("userAccCreate.accountNoFromUI: "+accountNoFromUI);
														}
														
														logMsg="userAccCreate.scfEntryMapForUser.ErrorCode: "+scfEntryMapForUser.get("ErrorCode")+",userAccCreate.scfEntryMapForUser.StatusID: "+scfEntryMapForUser.get("StatusID")+",userAccCreate.scfEntryMapForUser.AccountNo: "+scfEntryMapForUser.get("AccountNo")+",userAccCreate.scfEntryMapForUser.DDBActive: "+scfEntryMapForUser.get("DDBActive")+",userAccCreate.accountNoFromUI: "+accountNoFromUI;
														appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6027", "scfEntryMapForUser=", "getSCFEntryForTheUser()", stepNo.getAndIncrement()+"","", logMsg);
														
														if(scfEntryMapForUser.get("ErrorCode") != null && scfEntryMapForUser.get("ErrorCode").trim().length() == 0){
															if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000002")){
																if(! scfEntryMapForUser.get("AccountNo").equalsIgnoreCase(accountNoFromUI)){
																	message = "185";
																	errorResponseObj.addProperty("Status", "000000");
																	errorResponseObj.addProperty("ErrorCode", message);
																	errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is already active. Please link the same account");
																	userAccCreateResponseToUI.add("d", errorResponseObj);
																}else{
																	if(scfEntryMapForUser.get("DDBActive") != null && scfEntryMapForUser.get("DDBActive").equalsIgnoreCase("X")){
																		//setsi=""
																		setSIForResponse="";
																		validationSuccess = true;
																	}else{
																		//setsi="X"
																		setSIForResponse="X";
																		validationSuccess = true;
																	}
																}
															}else if(scfEntryMapForUser.get("StatusID") != null && scfEntryMapForUser.get("StatusID").equalsIgnoreCase("000001")){
																message = "185";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", "OD account "+scfEntryMapForUser.get("AccountNo")+" is not activated. Linking not possible");
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}else{
																//setsi = "X"
																setSIForResponse="X";
																validationSuccess = true;
															}
															
															logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
															appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6061", "", "", stepNo.getAndIncrement()+"","", logMsg);
														}else{
															//Offline OD Account scenario
															/*setSIForResponse="X";
															isOfflineODAccount = true;
															validationSuccess = true;*/
															if ( scfEntryMapForUser.get("ErrorCode").equalsIgnoreCase("000")) {

																setSIForResponse="X";
																validationSuccess = true;
																isOfflineODAccount = true;
															} else {
																message = "001";
																errorResponseObj.addProperty("Status", "000000");
																errorResponseObj.addProperty("ErrorCode", message);
																errorResponseObj.addProperty("ErrorMessage", scfEntryMapForUser.get("ErrorMessage"));
																userAccCreateResponseToUI.add("d", errorResponseObj);
															}
															
															logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess+",isOfflineODAccount:"+isOfflineODAccount;
															appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6081", "Offline OD Account scenario", "", stepNo.getAndIncrement()+"","", logMsg);
														}
													}
												}else if(ddbActiveFromUI == null || ddbActiveFromUI.trim().equalsIgnoreCase("")){
													message = "149";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}
											}else if(isCFSOFFromWS.equalsIgnoreCase("N")){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "146";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													//setsi=""
													setSIForResponse="";
													validationSuccess = true;
												}
												
												logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6105", "isCFSOFFromWS is equal to N", "", stepNo.getAndIncrement()+"","", logMsg);
											}
										}else if(accountTypeFromWS.equalsIgnoreCase("CAA")){
											boolean isCAAAlreadyAvailable  = false;
											JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
											JsonArray dresults = results.get("results").getAsJsonArray();
											accountTypeFromUACTbl = ""; setSIFromUACTbl="";
											for (int i = 0; i <= dresults.size() - 1; i++) {
												accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
												setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
												
												if(debug){
													response.getWriter().println("userAccountsCreate.CAA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
													response.getWriter().println("userAccountsCreate.CAA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl);
												}
												
												if(accountTypeFromUACTbl.equalsIgnoreCase("ODA") && setSIFromUACTbl.equalsIgnoreCase("X")){
													isValidODA=false;
													break;
												}
											}
											logMsg="userAccountsCreate.CAA and 'Y'.accountTypeFromUACTbl: "+accountTypeFromUACTbl+",userAccountsCreate.CAA and 'Y'.setSIFromUACTbl: "+setSIFromUACTbl;
											appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6127", "isValidODA=", "", stepNo.getAndIncrement()+"",logMsg, isValidODA+"");
											
											if(! isValidODA){
												if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
													message = "148";
													errorResponseObj.addProperty("Status", "000000");
													errorResponseObj.addProperty("ErrorCode", message);
													errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
													userAccCreateResponseToUI.add("d", errorResponseObj);
												}else{
													String ddbActiveFromUACTbl =  "";
													for (int i = 0; i <= dresults.size() - 1; i++) {
														accountTypeFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString();
														setSIFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("SetSI").getAsString();
														
														if(bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull()){
															ddbActiveFromUACTbl = "";
														}else{
															ddbActiveFromUACTbl = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString();	
														}
														
														
														if(debug){
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.accountTypeFromUACTbl: "+accountTypeFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.setSIFromUACTbl: "+setSIFromUACTbl);
															response.getWriter().println("userAccountsCreate.CAA and 'O'  and DDBActive.ddbActiveFromUACTbl: "+ddbActiveFromUACTbl);
														}
														
														if(accountTypeFromUACTbl.equalsIgnoreCase("CAA") && setSIFromUACTbl.equalsIgnoreCase("O") && ddbActiveFromUACTbl.equalsIgnoreCase("X")){
															isCAAAlreadyAvailable  = true;
															break;
														}
														
														logMsg="userAccountsCreate.CAA and 'O'  and DDBActive.accountTypeFromUACTbl: "+accountTypeFromUACTbl+",userAccountsCreate.CAA and 'O'  and DDBActive.setSIFromUACTbl: "+setSIFromUACTbl+",userAccountsCreate.CAA and 'O'  and DDBActive.ddbActiveFromUACTbl: "+ddbActiveFromUACTbl;
														appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6161", "isCAAAlreadyAvailable=", isCAAAlreadyAvailable+"", stepNo.getAndIncrement()+"","", logMsg);
													}
													
													if(isCAAAlreadyAvailable){
														if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
															message = "147";
															errorResponseObj.addProperty("Status", "000000");
															errorResponseObj.addProperty("ErrorCode", message);
															errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
															userAccCreateResponseToUI.add("d", errorResponseObj);
														}else{
															//setsi = "O";
															setSIForResponse="O";
															validationSuccess = true;
														}
														// log the setSIForResponse,validationSuccess
														logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
														appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6178", "", "", stepNo.getAndIncrement()+"","", logMsg);
													}else{
														//setsi = "O";
														
														setSIForResponse="O";
														validationSuccess = true;
														// log the setSIForResponse,validationSuccess
														logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
														appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6186", "", "", stepNo.getAndIncrement()+"","", logMsg);
													}
												}
											}else{
												//setsi = "";
												setSIForResponse="";
												validationSuccess = true;
												// log the setSIForResponse,validationSuccess
												logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
												appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6195", "", "", stepNo.getAndIncrement()+"","", logMsg);
											}
										}else if(!accountTypeFromWS.equalsIgnoreCase("CAA") && !accountTypeFromWS.equalsIgnoreCase("ODA")){
											if(ddbActiveFromUI != null && ddbActiveFromUI.equalsIgnoreCase("X")){
												message = "146";
												errorResponseObj.addProperty("Status", "000000");
												errorResponseObj.addProperty("ErrorCode", message);
												errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
												userAccCreateResponseToUI.add("d", errorResponseObj);
											}else{
												//setsi = "";
												setSIForResponse="";
												validationSuccess = true;
											}
											// log the setSIForResponse,validationSuccess
											logMsg="setSIForResponse:"+setSIForResponse+",validationSuccess:"+validationSuccess;
											appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6211", "", "", stepNo.getAndIncrement()+"","", logMsg);
										}
									}
								}
							}
							
						}else{
							message = "054";
							errorResponseObj.addProperty("Status", "000000");
							errorResponseObj.addProperty("ErrorCode", message);
							errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
							userAccCreateResponseToUI.add("d", errorResponseObj);
							
							accountsWSResponseMap.put("Error", "059");
							accountsWSResponseMap.put("Message", "User not registered");
							//set accounts ws response to error
							// log the accountsWSResponseMap Message Message Property
							JsonObject logAccountResMap=new JsonObject();
							accountsWSResponseMap.forEach((key,value)->{
								if(value!=null){
									logAccountResMap.addProperty(key, value);
								}else{
									logAccountResMap.add(key, null);
								}
							});
							appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6236", "accountsWSResponseMap", "User not registered and Error equal to 059", stepNo.getAndIncrement()+"","", logAccountResMap+"");
						}
					}
					/*}else{
//						userAccCreateResponseToUI = bankAccountEntriesJson;
//						return userAccCreateResponseToUI;
					}*/
				}
			}
			
			if(debug){
				response.getWriter().println("userAccountsCreate.validationSuccess: "+validationSuccess);
				response.getWriter().println("userAccountsCreate.setSIForResponsefinal: "+setSIForResponse);
			}
				
			String logMsg="userAccountsCreate.setSIForResponsefinal:"+setSIForResponse+",userAccountsCreate.validationSuccess:"+validationSuccess;
			appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6252", "", "", stepNo.getAndIncrement()+"","", logMsg);
			
			String responseUserAccGuid="", responseLoginID="", responseAccNo="", responseAccType="", responseAccStatus="", responseDDB="", responseTestRun="", responseIfCFSOD="";
			String responseErrorCode="", responseErrorMessage="";
			
			if(validationSuccess){
				//Success Response
				responseUserAccGuid = inputJsonObj.getString("UaccntGuid");
				responseLoginID = loginID;
				responseAccNo = inputJsonObj.getString("BankAccntNo");
				responseAccType = accountsWSResponseMap.get("AccountType");
				responseAccStatus = accountsWSResponseMap.get("AccountStatus"); //Have pass the status code
				responseDDB = inputJsonObj.getString("DDBActive");
				try{
					responseTestRun = inputJsonObj.getString("Testrun");
				}catch (Exception e) {
					if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
						//When Testrun in ""
						responseTestRun = "";
					}
				}
//				responseTestRun = inputJsonObj.getString("Testrun");
				responseIfCFSOD = accountsWSResponseMap.get("IsCFSOD");
				// log the responseUserAccGuid,responseLoginID,responseAccNo,responseAccType,responseAccStatus,responseDDB and responseIfCFSOD
				logMsg="responseUserAccGuid:"+responseUserAccGuid+",responseLoginID:"+responseLoginID+",responseAccNo:"+responseAccNo+",responseAccType:"+responseAccType+",responseAccStatus:"+responseAccStatus+",responseDDB:"+responseDDB;
				appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6278", "", "", stepNo.getAndIncrement()+"","", logMsg);
				
				successResponse = successResponse.replaceAll("USERACCOUNTGUID_VALUE", responseUserAccGuid);
				successResponse = successResponse.replaceAll("LOGINID_VALUE", responseLoginID);
				successResponse = successResponse.replaceAll("BANKACCOUNTNO_VALUE", responseAccNo);
				successResponse = successResponse.replaceAll("BANKACCOUNTTYPE_VALUE", responseAccType);
				successResponse = successResponse.replaceAll("BANKACCOUNTSTATUS_VALUE", responseAccStatus);
				successResponse = successResponse.replaceAll("DDBACTIVE_VALUE", responseDDB);
				successResponse = successResponse.replaceAll("TESTRUN_VALUE", responseTestRun);
				successResponse = successResponse.replaceAll("SETSI_VALUE", setSIForResponse);
				successResponse = successResponse.replaceAll("ISCFSOD_VALUE", responseIfCFSOD);
				
				userAccCreateResponseToUI = new JsonParser().parse(successResponse).getAsJsonObject();
				
				testRun = "";
				try{
					testRun = inputJsonObj.getString("Testrun");
				}catch (Exception e) {
					if(e.getMessage().contains("JSONObject[\"Testrun\"] not found")){
						//When Testrun in ""
						testRun = "";
					}
				}
				appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6301", "testRun="+testRun, "", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
				if(debug)
					response.getWriter().println("userAccountsCreate.finalTestRun: "+testRun);
				if(testRun != null && testRun.equalsIgnoreCase("X")){
					
					response.getWriter().println(userAccCreateResponseToUI);
					return userAccCreateResponseToUI;
				}else{
					message = "";
					
					if(debug){
						response.getWriter().println("userAccountsCreate.bankAccountEntriesJson: "+bankAccountEntriesJson);
					}
					appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6314", "responseIfCFSOD="+testRun, "", stepNo.getAndIncrement()+"","", bankAccountEntriesJson+"");
					if(responseIfCFSOD != null && responseIfCFSOD.equalsIgnoreCase("Y")){
						//Check for existing entries with DDBActive in bankAccountEntriesJson
						String ddbActiveForUpdate = "";
						boolean insertFlag = false;
						JsonObject results = bankAccountEntriesJson.get("d").getAsJsonObject();
						JsonArray dresults = results.get("results").getAsJsonArray();
						JsonObject entryToUpdate = new JsonObject();
						for (int i = 0; i <= dresults.size() - 1; i++) {
							entryToUpdate = bankAccountEntriesJson.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject();
							
							if(entryToUpdate.get("DDBActive").isJsonNull()){
								ddbActiveForUpdate = "";
							}else{
								ddbActiveForUpdate = entryToUpdate.get("DDBActive").getAsString();
							}
							
							if(debug)
								response.getWriter().println("userAccountsCreate.ddbActiveForUpdate: "+ddbActiveForUpdate);
							entryToUpdate.remove("DDBActive");
							entryToUpdate.addProperty("DDBActive", "");
							if(debug)
								response.getWriter().println("userAccountsCreate.entryToUpdate: "+entryToUpdate);
							
							if(ddbActiveForUpdate != null && ddbActiveForUpdate.equalsIgnoreCase("X")){
								//Call Update here
								message = updateUserAccounts(request, response, entryToUpdate, aggregatorID, debug);
							}
						}
						
						// log the entryToUpdate JsonObject
						// new logs for message returned from updateUserAccounts
						// isOfflineODAccount log this Value
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6347", "updateUserAccounts()","message:"+message+",isOfflineODAccount:"+isOfflineODAccount, stepNo.getAndIncrement()+"","", entryToUpdate+"");
						if(debug){
							response.getWriter().println("userAccountsCreate.update.message: "+message);
						}
						//Call Insert here
						if(message == null || (message != null && message.equalsIgnoreCase(""))){
							if(debug){
								response.getWriter().println("userAccountsCreate.CorpId: "+userRegMap.get("CorpId"));
								response.getWriter().println("userAccountsCreate.CorpId: "+userRegMap.get("CorpId"));
							}
							
							if(isOfflineODAccount){
								message = insertOfflineODAIntoSCF(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, appLogs,appLogMessArray,appLogID,stepNo,debug);
							}
							if(debug){
								response.getWriter().println("userAccountsCreate.insertOfflineODAIntoSCF.message: "+message);
							}
							
							if(message == null || (message != null && message.equalsIgnoreCase(""))){
								message = insertIntoUserAccounts(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, debug);
								if(debug){
									response.getWriter().println("userAccountsCreate.insertafterupdate.message: "+message);
								}
								// log the Message value print like userAccountsCreate.insertOfflineODAIntoSCF.message:
								appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6371", "insertIntoUserAccounts()","message:"+message, stepNo.getAndIncrement()+"","", message);
							}else{
								
								if(message.equalsIgnoreCase("000") || message.equalsIgnoreCase("155")){
									responseErrorCode = "155";
									responseErrorMessage = "More than one partner is assigned for that login";
									
									errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
									errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
									response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
									userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
									appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6382", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
									response.getWriter().println(userAccCreateResponseToUI);
									return userAccCreateResponseToUI;
								}else{
									responseErrorCode = "001";
									responseErrorMessage = message;
									
									errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
									errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
									response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
									userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
									// log the userAccCreateResponseToUI;
									appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6394", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
									response.getWriter().println(userAccCreateResponseToUI);
									return userAccCreateResponseToUI;
								}
							}
						}else{
							responseErrorCode = "045";
							responseErrorMessage = "Account Linking Failed";
							
							errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
							errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
							response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
							userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
							//log the userAccCreateResponseToUI
							appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6410", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
							response.getWriter().println(userAccCreateResponseToUI);
							return userAccCreateResponseToUI;
						}
					}else{
						
//						String successResponse = "sap-message: {\"code\":\"/ARTEC/PY/044\",\"message\":\"Account Linked Sucessfully\",\"severity\":\"info\",\"target\":\"\",\"details\":[]}";
						message = insertIntoUserAccounts(request, response, inputJsonObj, userRegMap, setSIForResponse, accountsWSResponseMap, aggregatorID, loginID, debug);
						if(debug){
							response.getWriter().println("userAccountsCreate.directinsert.message: "+message);
						}
						// log the Message value. along with Line Number and userAccountsCreate.directinsert.message:
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6422", "message=","insertIntoUserAccounts()", stepNo.getAndIncrement()+"","", message);
					}
					
					if(message == null || message.trim().equalsIgnoreCase("")){
						responseErrorCode = "045";
						responseErrorMessage = "Account Linking Failed";
						
						errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
						errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
						response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
						userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
						// log the userAccCreateResponseToUI
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6434", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
						response.getWriter().println(userAccCreateResponseToUI);
						return userAccCreateResponseToUI;
					}else{
						userAccCreateResponseToUI.get("d").getAsJsonObject().addProperty("Code", "044");
						userAccCreateResponseToUI.get("d").getAsJsonObject().addProperty("Message", "Account Linked Sucessfully");
						// log the userAccCreateResponseToUI
						appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6441", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
						response.getWriter().println(userAccCreateResponseToUI);
						return userAccCreateResponseToUI;
					}
				}
			}else{
				//Failure Response
				responseErrorCode = userAccCreateResponseToUI.get("d").getAsJsonObject().get("ErrorCode").getAsString();
				responseErrorMessage = userAccCreateResponseToUI.get("d").getAsJsonObject().get("ErrorMessage").getAsString();
				
				errorResponse = errorResponse.replaceAll("ERROR_CODE", responseErrorCode);
				errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", responseErrorMessage);
				
				userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6456", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
				response.getWriter().println(userAccCreateResponseToUI);
				if(debug)
					response.getWriter().println("userAccountsCreate.Failure Response.userAccCreateResponseToUI: "+userAccCreateResponseToUI);
				// log the userAccCreateResponseToUI
				return userAccCreateResponseToUI;
			}
		}catch (Exception e) {
//			String responseErrorCode="", responseErrorMessage="";
			
			message = "001";
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug){
				response.getWriter().println("CommonUtils.userAccountsCreate --> "+e.getMessage()+". Full Stack Trace:"+buffer.toString());
			}
			
			if(debug){
				response.getWriter().println("CommonUtils.userAccountsCreate.userAccCreateResponseToUI: "+userAccCreateResponseToUI);
			}
			
			errorResponse = errorResponse.replaceAll("ERROR_CODE", message);
			errorResponse = errorResponse.replaceAll("ERROR_MESSAGE", "CommonUtils.userAccountsCreate --> "+e.getMessage());
			
			userAccCreateResponseToUI = new JsonParser().parse(errorResponse).getAsJsonObject();
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			try{
			appLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMessArray, appLogID, "LineNumber=6488", "Response to UI","userAccCreateResponseToUI=", stepNo.getAndIncrement()+"","", userAccCreateResponseToUI+"");
			}catch(Exception ex){

			}
			response.getWriter().println(userAccCreateResponseToUI);
			// log the userAccCreateResponseToUI
			return userAccCreateResponseToUI;
		}
	}

	public void crtAppLogMsgsObj(HttpServletRequest request,HttpServletResponse response,String aggrId,String txnID,String errorMsg,String aLogId,JsonArray appLogArry){
		JsonObject appLogMsg=new JsonObject();
		CommonUtils commonUtils=new CommonUtils();
		try {
			String createdBy = "JAVA";//getUserPrincipal(request, "name", response);			
			String createdDate = commonUtils.getCurrentDate("yyyy-MM-dd");
			String createdAt = commonUtils.getCurrentTime();
			
			String guid = commonUtils.generateGUID(36);
			appLogMsg.addProperty("ID", guid);
			appLogMsg.addProperty("ALogHID", aLogId);
			appLogMsg.addProperty("MessageType", "I");
			appLogMsg.addProperty("MessageID", "/ARTEC/PY");
			appLogMsg.addProperty("Message1", txnID + "");
			appLogMsg.addProperty("Message2", aggrId);
			appLogMsg.addProperty("CreatedBy", createdBy);
			appLogMsg.addProperty("CreatedAt", createdAt);
			appLogMsg.addProperty("CreatedOn", createdDate);
			
			if (errorMsg.length() > 900) {
				appLogMsg.addProperty("ErrorMessage", errorMsg.substring(0, 900));
			} else {
				appLogMsg.addProperty("ErrorMessage", errorMsg + "");
			}

			if (errorMsg.length() > 900) {
				if (errorMsg.length() < 1800) {
					String userMsg = errorMsg.substring(900, errorMsg.length()-1);
					appLogMsg.addProperty("UserMessage", userMsg);
				} else {
					String userMsg = errorMsg.substring(900, 1800);
					appLogMsg.addProperty("UserMessage", userMsg);
				}
			}
			appLogArry.add(appLogMsg);
		}catch(Exception ex){
			throw ex;
		}
	}

	public JsonObject setStandingInstruction1(HttpServletRequest request, HttpServletResponse response, JsonObject userAccountsEntries, 
			Properties properties, String loginID, String aggregatorID, String oDataURL,ODataLogs odataLogs,JsonArray appLogMsgArray,String appLogId,AtomicInteger stepNo, boolean debug) throws IOException{
		JsonObject userAccountsResponseObj = new JsonObject();
		JsonObject errorResponseObj = new JsonObject(); 
		Map<String,String> pyeactEntries = new HashMap<String,String>();
		Map<String,String> userAccountsEntry = new HashMap<String,String>();
		Map<String,String> accountsWSResponse = new HashMap<String,String>();
		String message="";
		JSONObject inputJsonObject = new JSONObject();
		boolean odAccAvailableY = false;
		try{
//			pyeactEntries = getPYEACTEntries(request, response, inputJsonObject, loginID, debug); //PYEACT typeset values
			userAccountsEntry = getODAUserAccountEntry(request, response, inputJsonObject, loginID, pyeactEntries, oDataURL, aggregatorID, debug);
			// need to log the userAccountsEntry. if more then 1000 character truncate it ErrorMessage,UserMessage Filed.
			JsonObject logUserAccountEnty=new JsonObject();
			userAccountsEntry.forEach((key,value)->{
				if(value!=null){
					logUserAccountEnty.addProperty(key, value);
				}else{
					logUserAccountEnty.add(key, null);
				}
			});
			odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26096", "userAccountsEntry=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", logUserAccountEnty+"");
			if(debug){
				for (String key : userAccountsEntry.keySet()) {
					response.getWriter().println("setStandingInstruction1-userAccountsEntry: "+key + " - " + userAccountsEntry.get(key));
				}
			}
			
			if(userAccountsEntry.get("Error").equalsIgnoreCase("")){
				//When ODA account is available in UserAccounts
				//Call Accounts WS
				accountsWSResponse = callAccountsWS(request, response, userAccountsEntry, loginID, aggregatorID, "", oDataURL, inputJsonObject, debug);
		// need to log the accountsWSResponse
				JsonObject logAccountRes=new JsonObject();
				accountsWSResponse.forEach((key,value)->{
					if(value!=null){
						logAccountRes.addProperty(key, value);
					}else{
						logAccountRes.add(key, null);
					}
				});
				odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26116", "accountsWSResponse=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", logAccountRes+"");
				
				if(debug){
					for (String key : accountsWSResponse.keySet()) {
						response.getWriter().println("setStandingInstruction1-accountsWSResponse: "+key + " - " + accountsWSResponse.get(key));
					}
				}
				
				if(accountsWSResponse.get("Error").equalsIgnoreCase("054")){
					message = "054";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("059")){
					message = "059";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", accountsWSResponse.get("Message"));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("067")){
					message = "067";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}
				else if(accountsWSResponse.get("Error").equalsIgnoreCase("065")){
					message = "065";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("066")){
					message = "066";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else if(accountsWSResponse.get("Error").equalsIgnoreCase("001")){
					message = "001";
					errorResponseObj.addProperty("Status", "000000");
					errorResponseObj.addProperty("ErrorCode", message);
					errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
					userAccountsResponseObj.add("d", errorResponseObj);
				}else{
					userAccountsResponseObj = userAccountsEntries;
					boolean isDDBActive = false;
					String selectedAccNo = userAccountsEntry.get("BankAccntNo");
					// need to log the selectedAccNo
					odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26166", "selectedAccNo=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", selectedAccNo);

					if(debug){
						response.getWriter().println("selectedAccNo: "+selectedAccNo);
						response.getWriter().println("setStandingInstruction.IsCFSOD: "+accountsWSResponse.get("IsCFSOD"));
					}
					
					// need to the log the IsCFSOD Property value from accountsWSResponse JsonObjetc
					odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26174", "setStandingInstruction.IsCFSOD=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", accountsWSResponse.get("IsCFSOD"));
					if(accountsWSResponse.get("IsCFSOD").equalsIgnoreCase("Y")){
						odAccAvailableY = true;
						
						JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
						JsonArray dresults = results.get("results").getAsJsonArray();
						for (int i = 0; i <= dresults.size() - 1; i++) {
							if(selectedAccNo.equalsIgnoreCase(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntNo").getAsString())){
								//Setting SI as X and CFS OD as Y when the account is CFSOD
								if(debug)
									response.getWriter().println("1");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "X");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "Y");
							}else{
								//All other accounts - setSI as ""
								if(debug)
									response.getWriter().println("2");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
						}
						// need to log the userAccountsResponseObj 
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26196", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
					}else{
						//When ODA account is not CFSOD
						userAccountsResponseObj = userAccountsEntries;
					
						JsonObject results1 = userAccountsResponseObj.get("d").getAsJsonObject();
						JsonArray dresults1 = results1.get("results").getAsJsonArray();
						for (int i = 0; i <= dresults1.size() - 1; i++) {
							if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")){
								//When  CFS OD account in "N"
								if(debug)
									response.getWriter().println("3");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}else{
								//If CFS OD is N, then CAA logic added
								if(debug)
									response.getWriter().println("4");
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
										&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
									if(debug)
										response.getWriter().println("5");
									isDDBActive = true;
								}
							}
						}
						// need to log the userAccountsResponseObj in the Message1 or Message2 Property put the Message if ODAccount CFSOD
						// log the isDDBActive
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26224", "isDDBActive=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", isDDBActive+"");
						if(isDDBActive){
							userAccountsResponseObj = userAccountsEntries;
							JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
							JsonArray dresults = results.get("results").getAsJsonArray();
							for (int i = 0; i <= dresults.size() - 1; i++) {
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
										&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
									//Set SI as O only when CAA is available and DDBActive is X
									if(debug)
										response.getWriter().println("6");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
								}else if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")
										&& userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("")){
									//Set SI as "" only when CAA is available and DDBActive is ""
									if(debug)
										response.getWriter().println("7");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}else{
									//All other Account Types other than CAA and ODA - set SI as ""
									if(debug)
										response.getWriter().println("8");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
							
							// need to log the userAccountsResponseObj if isDDBActive is true
							odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26252", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
						}else{
							userAccountsResponseObj = userAccountsEntries;
							JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
							JsonArray dresults = results.get("results").getAsJsonArray();
							for (int i = 0; i <= dresults.size() - 1; i++) {
								if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")){
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
									if(debug)
										response.getWriter().println("9");
								}else{
									if(debug)
										response.getWriter().println("10");
									userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
								}
								
								userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
							}
							odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26270", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
							// need to log the userAccountsResponseObj if isDDBActive is false
						}
					}
					
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("Status", "000001");
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
					userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
				}
				// need to log the userAccountsResponseObj
				odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26280", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
			}else{
				//No ODA account available in UserAccounts
				if(debug)
					response.getWriter().println("No ODA Account Available");
				boolean isDDBActive = false;
				userAccountsResponseObj = userAccountsEntries;
				JsonObject results1 = userAccountsResponseObj.get("d").getAsJsonObject();
				JsonArray dresults1 = results1.get("results").getAsJsonArray();
				for (int i = 0; i <= dresults1.size() - 1; i++) {
					if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
							&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
						if(debug)
							response.getWriter().println("11");
						isDDBActive = true;
					}
				}
				if(debug)
					response.getWriter().println("No ODA Account AvailableisDDBActive: "+isDDBActive);
				// need to the isDDBActive Message1 ODA Account not Available
				odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26300", "No ODA account available in UserAccounts,isDDBActive=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", isDDBActive+"");
				if(isDDBActive){
					userAccountsResponseObj = userAccountsEntries;
					JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
					JsonArray dresults = results.get("results").getAsJsonArray();
					for (int i = 0; i <= dresults.size() - 1; i++) {
						if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")
								&& (!userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").isJsonNull() && userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("X"))){
							//Set SI as O only when CAA is available and DDBActive is X
							if(debug)
								response.getWriter().println("12");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
						}else if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("ODA")
								&& userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("DDBActive").getAsString().equalsIgnoreCase("")){
							//Set SI as "" only when CAA is available and DDBActive is ""
							if(debug)
								response.getWriter().println("13");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}else{
							//All other Account Types other than CAA and ODA - set SI as ""
							if(debug)
								response.getWriter().println("14");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}
						userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
					}
					// need to log the userAccountsResponseObj Message1=ODAccount Not Available
					odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26327", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
				}else{
					userAccountsResponseObj = userAccountsEntries;
					JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
					JsonArray dresults = results.get("results").getAsJsonArray();
					for (int i = 0; i <= dresults.size() - 1; i++) {
						if(userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().get("BankAccntType").getAsString().equalsIgnoreCase("CAA")){
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "O");
							if(debug)
								response.getWriter().println("15");
						}else{
							if(debug)
								response.getWriter().println("16");
							userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("SetSI", "");
						}
						
						userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("IsCFSODA", "N");
					}
					// need to log the userAccountsResponseObj.
					odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26346", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
				}
				
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("Status", "000001");
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorCode", "");
				userAccountsResponseObj.get("d").getAsJsonObject().addProperty("ErrorMessage", "");
				
			}
			
			if(debug)
				response.getWriter().println("setStandingInstruction1.userAccountsResponseObj before setting description: "+userAccountsResponseObj);
			//Setting Description Fields
			String accountStatusDesc="", accountTypeDesc="";
			odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26359", "userAccountsResponseObj=", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
			if(! userAccountsResponseObj.get("d").getAsJsonObject().get("Status").getAsString().equalsIgnoreCase("000000")){
				JsonObject results = userAccountsResponseObj.get("d").getAsJsonObject();
				JsonArray dresults = results.get("results").getAsJsonArray();
				for (int i = 0; i <= dresults.size() - 1; i++) {
					accountTypeDesc = getAccountTypeDesc(request, response, aggregatorID, dresults.get(i).getAsJsonObject().get("BankAccntType").getAsString(), debug);
					accountStatusDesc = getAccountStatusDesc(request, response, aggregatorID, dresults.get(i).getAsJsonObject().get("BankAccntSts").getAsString(), debug);
				
					userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("BankAccStsDs", accountStatusDesc);
					userAccountsResponseObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(i).getAsJsonObject().addProperty("BankAccTypeDs", accountTypeDesc);
				}
			}
		}catch (Exception e) {
			message = "001";
			errorResponseObj.addProperty("ErrorCode", message);
			errorResponseObj.addProperty("ErrorMessage", properties.getProperty(message));
			userAccountsResponseObj.add("d", errorResponseObj);
			try{
			odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=26376,"+e.getLocalizedMessage(), "userAccountsResponseObj=,Exception occurred", "setStandingInstruction1()", stepNo.getAndIncrement()+"","", userAccountsResponseObj+"");
			}catch(Exception ex){
				
			}
			if(debug){
				StackTraceElement element[] = e.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for(int i=0;i<element.length;i++)
				{
					buffer.append(element[i]);
				}
				response.getWriter().println("Exception-setStandingInstruction: "+e.getMessage()+"---> Full Stack Trace: "+buffer.toString());
			}
		}
		if(debug)
			response.getWriter().println("setStandingInstruction.userAccountsResponseObj: "+userAccountsResponseObj);
		
		return userAccountsResponseObj;

	}

	public String insertOfflineODAIntoSCF(HttpServletRequest request, HttpServletResponse response, JSONObject inputJsonObj, Map<String, String> userRegMap, 
			String setSIForResponse, Map<String, String> accountsWSResponseMap, String aggregatorID, String loginID,ODataLogs odataLogs,JsonArray appLogMsgArray,String appLogId,AtomicInteger stepNo, boolean debug) throws IOException{
		String message = "", createdBy="", createdAt="", userName="", password="", userPass="", executeURL="", oDataUrl="", userPartnerTypes="";
		JsonObject userCustomersObj = new JsonObject();
		JsonObject scfInsertResponseObj = new JsonObject();
		JSONObject scfInsertPayLoad = new JSONObject();
		long createdOnInMillis=0;
		JsonObject userPartnerJsonResponse = new JsonObject();
		
		try{
			createdBy = getUserPrincipal(request, "name", response);
			createdOnInMillis = getCreatedOnDate();
			createdAt = getCreatedAtTime();
			
			userPartnerJsonResponse = getUserPartnerTypes(response, loginID, aggregatorID, debug);
			JsonArray userPartnerJsonArray = userPartnerJsonResponse.getAsJsonObject("d").getAsJsonArray("results");
			JsonObject childUserPartnerJsonObj = new JsonObject();
			 // log the userPartnerJsonArray,PartnerTypeID
			odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6516", "insertOfflineODAIntoSCF()","userPartnerJsonArray Total Records"+userPartnerJsonArray.size(), stepNo.getAndIncrement()+"","", userPartnerJsonArray+"");
			if(userPartnerJsonArray.size() > 0)
				childUserPartnerJsonObj = userPartnerJsonArray.get(0).getAsJsonObject();
			
			if ( childUserPartnerJsonObj.has("PartnerTypeID") &&  ! childUserPartnerJsonObj.get("PartnerTypeID").isJsonNull() )
				userPartnerTypes = childUserPartnerJsonObj.get("PartnerTypeID").getAsString();
			else
				userPartnerTypes = "";
			
			if (userPartnerTypes.equalsIgnoreCase("000002"))
			{
				userCustomersObj = getVendors(response, loginID, aggregatorID, debug);
			}
			else if (userPartnerTypes.equalsIgnoreCase("000003"))
			{
				userCustomersObj = getUserCustomers(response, loginID, aggregatorID, debug);
			}
			else {
				message = "Invalid Partner type maintained";
			}
			
			odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6537", "insertOfflineODAIntoSCF()","message:"+message, stepNo.getAndIncrement()+"","", userCustomersObj+"");
			if(debug){
				response.getWriter().println("insertOfflineODAIntoSCF.userCustomersObj: "+userCustomersObj);
			}
			if(debug){
				response.getWriter().println("insertOfflineODAIntoSCF.userCustomersObj: "+userCustomersObj);
			}
			
			if (message != null && message.trim().length() > 0) {
				return message; 
			}else{
				if(! userCustomersObj.get("d").getAsJsonObject().get("ErrorCode").isJsonNull() && userCustomersObj.get("d").getAsJsonObject().get("ErrorCode").getAsString().trim().length() > 0){
					message = "000";
					return message;
				}else{
					JsonObject userCustomersResults = userCustomersObj.get("d").getAsJsonObject();
					JsonArray userCustomersResultsArray = userCustomersResults.get("results").getAsJsonArray();
					JsonObject assignedCustomer = new JsonObject();
					if(userCustomersResultsArray.size() == 1){
						assignedCustomer = userCustomersResultsArray.get(0).getAsJsonObject();
						if(debug){
							response.getWriter().println("insertOfflineODAIntoSCF.assignedCustomer: "+assignedCustomer);
						}
						// log the assignedCustomer Object.
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6558", "insertOfflineODAIntoSCF()","", stepNo.getAndIncrement()+"","", assignedCustomer+"");
						scfInsertPayLoad.accumulate("ID", ""+generateGUID(36));
						scfInsertPayLoad.accumulate("CPGUID", assignedCustomer.get("PartnerID").getAsString());
//						scfInsertPayLoad.accumulate("CPTypeID", );
						if(userPartnerTypes.equalsIgnoreCase("000002"))
							scfInsertPayLoad.accumulate("CPTypeID", "60");
						else if(userPartnerTypes.equalsIgnoreCase("000003"))
							scfInsertPayLoad.accumulate("CPTypeID", "01");
						scfInsertPayLoad.accumulate("AggregatorID", aggregatorID);
						scfInsertPayLoad.accumulate("AccountNo", inputJsonObj.getString("BankAccntNo"));
						scfInsertPayLoad.accumulate("DDBActive", inputJsonObj.getString("DDBActive"));
						scfInsertPayLoad.accumulate("StatusID", "000002");
						scfInsertPayLoad.accumulate("CallBackStatus", "000080");
						scfInsertPayLoad.accumulate("CreatedBy", createdBy);
						scfInsertPayLoad.accumulate("CreatedAt", createdAt);
						scfInsertPayLoad.accumulate("CreatedOn", "/Date("+createdOnInMillis+")/");
						
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6579", "insertOfflineODAIntoSCF()","scfInsertPayLoad=", stepNo.getAndIncrement()+"","", scfInsertPayLoad+"");
						
						oDataUrl = getODataDestinationProperties("URL", "PYGWHANA");
						userName = getODataDestinationProperties("User", "PYGWHANA");
						password = getODataDestinationProperties("Password", "PYGWHANA");
						userPass = userName+":"+password;
						executeURL = oDataUrl+"SupplyChainFinances";
						
						if(debug){
							response.getWriter().println("insertOfflineODAIntoSCF.executeURL: "+executeURL);
							response.getWriter().println("insertOfflineODAIntoSCF.oDataUrl: "+oDataUrl);
							response.getWriter().println("insertOfflineODAIntoSCF.userName: "+userName);
							response.getWriter().println("insertOfflineODAIntoSCF.scfInsertPayLoad: "+scfInsertPayLoad.toString());
						}
						
						scfInsertResponseObj = executePostURL(executeURL, userPass, response, scfInsertPayLoad, request, debug, "PYGWHANA");
						
						if(scfInsertResponseObj.has("error")){
							message = scfInsertResponseObj.get("error").getAsJsonObject().get("message").getAsJsonObject().get("value").getAsString();
						}
						
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6600", "insertOfflineODAIntoSCF()","message=", stepNo.getAndIncrement()+"","", message);
						
						return message;
					}else{
//						More than one partner is assigned for that login
						message = "155";
						if(debug)
							response.getWriter().println("insertOfflineODAIntoSCF.message: "+message);
						odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6608", "insertOfflineODAIntoSCF()","message=", stepNo.getAndIncrement()+"","", message);
						return message;
					}
				}
			}
		}catch (Exception e) {
			
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug){	
				response.getWriter().print("Exception in insertOfflineODAIntoSCF: "+e.getLocalizedMessage()+"-"+buffer.toString());
			}
			
			message = e.getLocalizedMessage()+"-"+buffer.toString();
			try{
				odataLogs.createApplicationLogMsgOnEvent(request, response, debug, appLogMsgArray, appLogId, "LineNumber=6628", "exception Occurred While insertOfflineODAIntoSCF()","message="+message, stepNo.getAndIncrement()+"","", buffer.toString());
				}catch(Exception ex){
					
				}
			return message;
		}
	}

	public JsonObject createApplictaionLogPayload(HttpServletRequest request,HttpServletResponse response,String aggregatorID,String subObject,String program,boolean debug){
		JsonObject insertPayload=new JsonObject();
		try{
			String appLogGuid = generateGUID(36);
			long createdOnDate = getCreatedOnDate();
			String createdBy = getLoginID(request, response, debug);
			String createdAtTime = getCreatedAtTime();
			insertPayload.addProperty("ID", appLogGuid);
			insertPayload.addProperty("AggregatorID", aggregatorID);
			insertPayload.addProperty("LogObject", "Java");
			if(subObject.length()>50){
				subObject=subObject.substring(0, 50);
			}
			insertPayload.addProperty("LogSubObject", subObject);
			insertPayload.addProperty("CreatedAt", createdAtTime);
			insertPayload.addProperty("CreatedBy", createdBy);
			insertPayload.addProperty("CreatedOn",  "/Date("+createdOnDate+")/");
			insertPayload.addProperty("LogTime", createdAtTime);
			insertPayload.addProperty("LogUser", createdBy);
			insertPayload.addProperty("LogDate",  "/Date("+createdOnDate+")/");
			insertPayload.addProperty("Program", program);
			return insertPayload;
			} catch (Exception ex) {
				StackTraceElement[] stackTrace = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for (int i = 0; i < stackTrace.length; i++) {
					buffer.append(stackTrace[i]);
				}
				insertPayload.addProperty("Status", "000002");
				insertPayload.addProperty("ErrorCode", "J002");
				insertPayload.addProperty("Message", ex.getLocalizedMessage());
				insertPayload.addProperty("ExceptionStackTrace", buffer.toString());
				return insertPayload;
			}
		}
		
		public JsonObject createApplictaionLogMsgPayload(HttpServletRequest request,HttpServletResponse response,String appLogId,String msgType,String msgId,int msgNo,String messageNo1,String messageNo2,String messageNo3,String messageNo4,String errorMsg,String userMsg,boolean debug){
			JsonObject insertPayload=new JsonObject();
			try{
				String appLogGuid = generateGUID(36);
				long createdOnDate = getCreatedOnDate();
				String createdBy = getLoginID(request, response, debug);
				String createdAtTime = getCreatedAtTime();
				insertPayload.addProperty("ID", appLogGuid);
				insertPayload.addProperty("ALogHID", appLogId);
				insertPayload.addProperty("MessageType", msgType);
				insertPayload.addProperty("MessageID", msgId);
				insertPayload.addProperty("MessageNo", msgNo+"");
				if(messageNo1.length()>100){
					messageNo1=messageNo1.substring(0, 100);	
				}
				insertPayload.addProperty("Message1", messageNo1);
				if(messageNo2.length()>100){
					messageNo2=messageNo2.substring(0, 100);	
				}
				insertPayload.addProperty("Message2",messageNo2);
				if(messageNo3.length()>100){
					messageNo3=messageNo3.substring(0, 100);	
				}
				insertPayload.addProperty("Message3", messageNo3);
				if(messageNo4.length()>100){
					messageNo4=messageNo4.substring(0, 100);	
				}
				insertPayload.addProperty("Message4", messageNo4);
				if(errorMsg.length()>1000){
					errorMsg=errorMsg.substring(0, 1000);	
				}
				insertPayload.addProperty("ErrorMessage", errorMsg);
				if(userMsg.length()>1000){
					userMsg=userMsg.substring(0, 1000);	
				}
				insertPayload.addProperty("UserMessage", userMsg);
				insertPayload.addProperty("CreatedBy", createdBy);
				insertPayload.addProperty("CreatedAt", createdAtTime);
				insertPayload.addProperty("CreatedOn", "/Date("+createdOnDate+")/");
				insertPayload.addProperty("ChangedBy", createdBy);
				insertPayload.addProperty("ChangedAt", createdAtTime);
				insertPayload.addProperty("ChangedOn", "/Date("+createdOnDate+")/");
				return insertPayload;
				} catch (Exception ex) {
					StackTraceElement[] stackTrace = ex.getStackTrace();
					StringBuffer buffer = new StringBuffer();
					for (int i = 0; i < stackTrace.length; i++) {
						buffer.append(stackTrace[i]);
					}
					insertPayload.addProperty("Status", "000002");
					insertPayload.addProperty("ErrorCode", "J002");
					insertPayload.addProperty("Message", ex.getLocalizedMessage());
					insertPayload.addProperty("ExceptionStackTrace", buffer.toString());
					return insertPayload;
				}
		}

		public long getDateAfterOneyearFrmCurDate(){
			long createdOn=0;
			 try {
				 SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
				 SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
				 sdf1.setTimeZone(TimeZone.getTimeZone("IST"));
				 Date curDate = sdf2.parse(sdf1.format(new Date()));
				 Calendar cal = Calendar.getInstance();
				 cal.setTime(curDate);
				 cal.setTimeZone(TimeZone.getTimeZone("IST"));
				 cal.add(Calendar.YEAR, 1);
				 Date date = cal.getTime();
				 long dateAfterOneYear = date.getTime();
				return dateAfterOneYear;
			} catch (Exception e) {
				createdOn=0;
			}
			 return createdOn;
		}

		public JsonObject updateRecord(HttpServletResponse response,String executeURL,String userpass,JSONObject inpJsonPayLoad, boolean debug){
			JsonObject responseJson = new JsonObject();
			try{
			if(debug){
				response.getWriter().println("executeURL:"+executeURL);
			}
			URL url = new URL(executeURL);
			HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
			byte[] bytes = inpJsonPayLoad.toString().getBytes("UTF-8");
			urlConnection.setRequestMethod("PUT");
			urlConnection.setRequestProperty("Content-Type", "application/json");
			urlConnection.setRequestProperty("charset", "utf-8");
			urlConnection.setRequestProperty("Content-Length", String.valueOf(bytes.length));
			urlConnection.setRequestProperty("Accept", "application/json");
			urlConnection.setDoOutput(true);
			urlConnection.setDoInput(true);
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userpass.getBytes());
			urlConnection.setRequestProperty("Authorization", basicAuth);
			urlConnection.connect();
			OutputStream outputStream = urlConnection.getOutputStream();
			OutputStreamWriter osw = new OutputStreamWriter(outputStream, "UTF-8");
			osw.write(inpJsonPayLoad.toString());
			osw.flush();
			osw.close();
			int resCode = urlConnection.getResponseCode();
			if (debug) {
				response.getWriter().println("responseCode: " + resCode);
			}
			if ((resCode / 100) == 2 || (resCode / 100) == 3||resCode==204) {
				responseJson.addProperty("Message", "Records updated successfully");
				responseJson.addProperty("Status", "000001");
				responseJson.addProperty("ErrorCode", "");

			} else {
				StringBuffer sb = new StringBuffer();
				BufferedReader br = new BufferedReader(
						new InputStreamReader(urlConnection.getErrorStream(), "utf-8"));
				String line = null;
				while ((line = br.readLine()) != null) {
					sb.append(line + "\n");
				}
				br.close();
				if (debug) {
					response.getWriter().println("getErrorStream: " + sb.toString());
				}
				responseJson.addProperty("Status", "000002");
				responseJson.addProperty("ErrorCode", "J001");
				responseJson.addProperty("Message", urlConnection.getResponseMessage());
			   responseJson.addProperty("Remarks",sb.toString());
				if (debug)
					response.getWriter().println("responseJson: " + responseJson);
				response.getWriter().println(responseJson);
			}
		}
			catch (Exception ex) {
				StackTraceElement[] stackTrace = ex.getStackTrace();
				StringBuffer buffer = new StringBuffer();
				for (int i = 0; i < stackTrace.length; i++) {
					buffer.append(stackTrace[i]);
				}
				responseJson.addProperty("Status", "000002");
				responseJson.addProperty("ErrorCode", "J001");
				responseJson.addProperty("Message", ex.getLocalizedMessage());
				responseJson.addProperty("Remarks", buffer.toString());
			}	
			return responseJson;
	}

	public JsonObject getBPByGuid(HttpServletRequest request, HttpServletResponse response, String bpGuid, boolean debug) throws IOException{
		String oDataUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", DestinationUtils.PYGWHANA);
			aggregatorID = getODataDestinationProperties("AggregatorID", DestinationUtils.PYGWHANA);
			userName = getODataDestinationProperties("User", DestinationUtils.PYGWHANA);
			password = getODataDestinationProperties("Password", DestinationUtils.PYGWHANA);
			userPass = userName+":"+password;

			executeURL = oDataUrl+"BPHeader('"+bpGuid+"')";

			httpJsonResult = executeODataGetForPut(executeURL, userPass, response, debug);
			/* JsonParser parser = new JsonParser();
			jsonObj = (JsonObject)parser.parse(responseStrBuffer.toString()); */
			
			/* jsonObj.get("d").getAsJsonObject().remove("__metadata");
			jsonObj.addProperty("Status", "000001");
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("Message", "Success"); */
		}catch (Exception e) {
			/* jsonObj = new JsonObject(); 
			jsonObj.addProperty("Status", "000002");
			jsonObj.addProperty("ErrorCode", "E0001");
			jsonObj.addProperty("Message", e.getClass()+" - "+e.getLocalizedMessage());
			System.out.println("getBPByGuid: "+jsonObj); */
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < stackTrace.length; i++) {
				buffer.append(stackTrace[i]);
			}
			httpJsonResult.addProperty("Status", "000002");
			httpJsonResult.addProperty("ErrorCode", "J001");
			httpJsonResult.addProperty("Message", e.getLocalizedMessage());
			httpJsonResult.addProperty("Remarks", buffer.toString());
		}finally{
			return httpJsonResult;
		}
	}

	public JsonObject getApprovalByGuid(HttpServletRequest request, HttpServletResponse response, String approvalGuid, boolean debug) throws IOException{
		String oDataUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", DestinationUtils.PCGWHANA);
			aggregatorID = getODataDestinationProperties("AggregatorID", DestinationUtils.PCGWHANA);
			userName = getODataDestinationProperties("User", DestinationUtils.PCGWHANA);
			password = getODataDestinationProperties("Password", DestinationUtils.PCGWHANA);
			userPass = userName+":"+password;

			executeURL = oDataUrl+"Approval('"+approvalGuid+"')";

			httpJsonResult = executeODataGetForPut(executeURL, userPass, response, debug);
		}catch (Exception e) {
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < stackTrace.length; i++) {
				buffer.append(stackTrace[i]);
			}
			httpJsonResult.addProperty("Status", "000002");
			httpJsonResult.addProperty("ErrorCode", "J001");
			httpJsonResult.addProperty("Message", e.getLocalizedMessage());
			httpJsonResult.addProperty("Remarks", buffer.toString());
		}finally{
			return httpJsonResult;
		}
	}

	public JsonObject doGetForPut(HttpServletRequest request, HttpServletResponse response, String uniqueID, String destination, String entity, boolean debug) throws IOException{
		String oDataUrl="", aggregatorID="", userName="", password="", userPass="", executeURL="";
		JsonObject httpJsonResult = new JsonObject();
		try{
			oDataUrl = getODataDestinationProperties("URL", destination);
			aggregatorID = getODataDestinationProperties("AggregatorID", destination);
			userName = getODataDestinationProperties("User", destination);
			password = getODataDestinationProperties("Password", destination);
			userPass = userName+":"+password;

			executeURL = oDataUrl+entity+"('"+uniqueID+"')";

			httpJsonResult = executeODataGetForPut(executeURL, userPass, response, debug);
		}catch (Exception e) {
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < stackTrace.length; i++) {
				buffer.append(stackTrace[i]);
			}
			httpJsonResult.addProperty("Status", "000002");
			httpJsonResult.addProperty("ErrorCode", "J001");
			httpJsonResult.addProperty("Message", e.getLocalizedMessage());
			httpJsonResult.addProperty("Remarks", buffer.toString());
		}finally{
			return httpJsonResult;
		}
	}
	
	public JsonObject executeODataGetForPut(String executeURL, String token, HttpServletResponse response, boolean debug){
		DataOutputStream dataOut = null;
		BufferedReader in =null;
		JsonObject jsonObj = null;
		String responseMsg="";
		try{
			URL urlObj = new URL(executeURL);
			HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Content-Type","application/json");
			connection.setRequestProperty("Accept","application/json");
//			connection.setRequestProperty("Authorization","Basic "+Base64.getEncoder().encode(userPass.getBytes()));
			connection.setRequestProperty("Authorization","Bearer "+ token);
			connection.setDoInput(true);
			
			int responseCode = connection.getResponseCode();
			responseMsg = connection.getResponseMessage();
			if(debug)
				response.getWriter().println("responseCode: "+responseCode);
			
			if(responseCode/100 == 2 || responseCode/100 == 3){
				in = new BufferedReader(new InputStreamReader(connection.getInputStream(),StandardCharsets.UTF_8));
				String inputLine;
				StringBuffer responseStrBuffer = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					responseStrBuffer.append(inputLine);
				}
			
				JsonParser parser = new JsonParser();
				jsonObj = (JsonObject)parser.parse(responseStrBuffer.toString());
				
				jsonObj.get("d").getAsJsonObject().remove("__metadata");
				jsonObj.addProperty("Status", "000001");
				jsonObj.addProperty("ErrorCode", "");
				jsonObj.addProperty("Message", "Success");
			}else{
				/* To read exception body 
				in = new BufferedReader(new InputStreamReader(connection.getErrorStream(),StandardCharsets.UTF_8));
				System.out.println("else1");
				String inputLine;
				StringBuffer responseStrBuffer = new StringBuffer();
				System.out.println("else2");
				while ((inputLine = in.readLine()) != null) {
					System.out.println("elseinputLine: "+inputLine);
					responseStrBuffer.append(inputLine);
				}
				System.out.println("elseresponseStrBuffer: "+responseStrBuffer); */

				jsonObj = new JsonObject(); 
				jsonObj.addProperty("Status", "000002");
				jsonObj.addProperty("ErrorCode", responseCode);
				jsonObj.addProperty("Message", responseMsg);
			}
			if(debug)
				response.getWriter().println("executeODataGetForPut.jsonObj: "+jsonObj);
		}catch (Exception e) {
			jsonObj = new JsonObject(); 
			jsonObj.addProperty("Status", "000002");
			jsonObj.addProperty("ErrorCode", "E001");
			jsonObj.addProperty("Message", "Class: "+e.getClass()+". Cause: "+e.getCause()+". LocalizedMessage:"+e.getMessage());
			if(debug)
				response.getWriter().println("executeODataGetForPut.jsonObj: "+jsonObj);
		}finally{
			return jsonObj;
		}
	}

	public JsonObject createPutPayload(HttpServletRequest request, HttpServletResponse response, JsonObject getEntity, JsonObject updateEntity, boolean debug){
		JsonObject returnPayload = new JsonObject();
		Map<String, Object> getMap = new HashMap<String, Object>();
		Map<String, Object> patchMap = new HashMap<String, Object>();
		Gson gson = new Gson();
		try{
			returnPayload = getEntity;
			
			System.out.println("returnPayload-before: "+returnPayload);
			getMap = (Map<String, Object>)gson.fromJson(getEntity, getMap.getClass());
			if(debug){
				for (String getKey : getMap.keySet()) {
					response.getWriter().println("getkey: "+getKey + " - getValue: " + getMap.get(getKey).toString());
				}
			}
			
			patchMap = (Map<String, Object>)gson.fromJson(updateEntity, patchMap.getClass());
			if(debug){
				for (String patchKey : patchMap.keySet()) {
					response.getWriter().println("patchkey: "+patchKey + " - patchValue: " + patchMap.get(patchKey).toString());
				}
			}
			
			for (String patchKey : patchMap.keySet()) {
				for (String getKey : getMap.keySet()) {
					if(patchKey.equalsIgnoreCase(getKey)){
						returnPayload.remove(getKey);
						returnPayload.addProperty(patchKey, patchMap.get(patchKey).toString());
					}
				}
			}

			if(debug)
				response.getWriter().println("returnPayload-after: "+returnPayload);
				
			return returnPayload;
		}catch (Exception e) {
			returnPayload = new JsonObject();
			/*returnPayload.addProperty("Status", "000002");
			returnPayload.addProperty("ErrorCode", "J001");
			returnPayload.addProperty("Message", "Class: "+e.getClass()+". Cause: "+e.getCause()+". LocalizedMessage:"+e.getMessage());
			System.out.println("ExceptionreturnPayload: "+returnPayload);*/
			return returnPayload;
		}
	}

	public JsonObject executePostURL(String executeURL, String userPass, HttpServletResponse response, JsonObject insertPayLoad, 
		HttpServletRequest request, boolean debug) throws IOException{
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		String data = "";
		HttpPost postRequest=null;
		try{
			if(debug){
				response.getWriter().println("executePostURL-insertPayLoad: "+insertPayLoad);
			}
			
			if(debug)
				response.getWriter().println("executePostURL-executeURL: "+executeURL);
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PYGWHANA, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
			}
			String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
		
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
				response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
				response.getWriter().println("executeHttpPost.userName: "+ userName);
				response.getWriter().println("executeHttpPost.password: "+ password);
				response.getWriter().println("executeHttpPost.authParam: "+ authParam);
				response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
		
			// CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
			// UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
			// credentialsProvider.setCredentials(AuthScope.ANY, credentials);
			
			if(debug){
				response.getWriter().println("insertPayLoad.toString(): "+insertPayLoad.toString());
			}
			
			requestEntity = new StringEntity(insertPayLoad.toString());
			
			// httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
			postRequest = new HttpPost(executeURL);
			postRequest.setHeader("Content-Type", "application/json");
			postRequest.setHeader("Accept", "application/json");
			postRequest.setEntity(requestEntity);
			HttpResponse httpPostResponse = client.execute(postRequest);
			responseEntity = httpPostResponse.getEntity();
			if (httpPostResponse.getEntity().getContentType() != null
					&& httpPostResponse.getEntity().getContentType().toString() != "") {
				String contentType = httpPostResponse.getEntity().getContentType().toString()
						.replaceAll("content-type:", "").trim();
				if (contentType.equalsIgnoreCase("application/xml;charset=utf-8")) {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
					if (debug)
						response.getWriter().println(EntityUtils.toString(responseEntity));
				} else {
					response.setContentType(contentType);
					data = EntityUtils.toString(responseEntity);
					if (debug)
						response.getWriter().println(data);
				}
			} else {
				response.setContentType("application/pdf");
				data = EntityUtils.toString(responseEntity);
				if (debug)
					response.getWriter().println(EntityUtils.toString(responseEntity));
			}
			int statusCode = httpPostResponse.getStatusLine().getStatusCode();
				if ((statusCode/100)==2) {
					JsonParser parser = new JsonParser();
					jsonObj = (JsonObject) parser.parse(data);
					jsonObj.addProperty("Status", "000001");
					jsonObj.addProperty("ErrorCode", "");
					jsonObj.addProperty("Message", "Record Inserted Successfully");
				} else {
					jsonObj.addProperty("Status", "000002");
					jsonObj.addProperty("ErrorCode", statusCode);
					jsonObj.addProperty("Message", data);
				}
				return jsonObj;
		}catch (Exception e) {
			postRequest.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("executeUpdate-Exception Stack Trace: "+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Status", "000002");
			jsonObj.addProperty("Message", buffer.toString());
		}/* finally{
			httpClient.close();
			
		} */
		return jsonObj;
	}

	public JsonObject executeUpdate111(String executeURL, String userPass, HttpServletResponse response, JSONObject updatePayLoad, 
			HttpServletRequest request, boolean debug) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
			Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			}
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PYGWHANA, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);
			
			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
            }
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			
			String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
	        // CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        // UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
	        // credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
//	        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
	        // httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
//	        HttpPost updateRequest = new HttpPost(executeURL);
	        HttpPut updateRequest = new HttpPut(executeURL);
	        // updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PUT");
	        updateRequest.setEntity(requestEntity);
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			HttpResponse httpResponse = client.execute(updateRequest);
			responseEntity = httpResponse.getEntity();
			
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
			}
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		}catch (RuntimeException e) {
			response.getWriter().println("Error at updating data: " +  e.getMessage());
			response.getWriter().println("Error at updating data xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.NamingException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}/* finally{
			httpClient.close();
		} */
		return jsonObj;
	}

	public JsonObject executeUpdate(String executeURL, String userPass, HttpServletResponse response, JsonObject updatePayLoad, 
			HttpServletRequest request, boolean debug) throws IOException{
		HttpPost httpPost = null;
		// CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String userName="", password="", authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
			// Context tenCtx = new InitialContext();
			// TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			// if(debug){
			// 	response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
			// 	response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
			// 	response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			// }
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PYGWHANA);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PYGWHANA, options);
			Destination destConfiguration = destinationAccessor.get();
			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        String.format("Destination %s is not found. Hint: Make sure to have the destination configured.", DestinationUtils.PYGWHANA));
            }
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			
			String proxyType = destConfiguration.get("ProxyType").get().toString();
			userName = destConfiguration.get("User").get().toString();
			password = destConfiguration.get("Password").get().toString();
			authParam = userName + ":"+ password ;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        response.getWriter().println("executeHttpPost.proxyType: "+ proxyType);
		        response.getWriter().println("executeHttpPost.userName: "+ userName);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
// 	        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
// 	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(userName, password);
// 	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
// //	        httpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build();
// 	        httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
//	        HttpPost updateRequest = new HttpPost(executeURL);
	        HttpPut updateRequest = new HttpPut(executeURL);
	        // updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PUT");
	        updateRequest.setEntity(requestEntity);
//			updateRequest.setHeader("X-CSRF-Token", csrfToken);
			
			HttpResponse httpResponse = client.execute(updateRequest);
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			if(debug){
				response.getWriter().println("statusCode:"+statusCode);
			}
			if((statusCode/100)==2){
				jsonObj.addProperty("ErrorCode", "");
				jsonObj.addProperty("Message", "Record Updated Successfully");
				jsonObj.addProperty("Status", "000001");
			} else {
				responseEntity = httpResponse.getEntity();
				String errorResponse = EntityUtils.toString(responseEntity);
				if (debug) {
					response.getWriter().println("executeUpdate.getStatusCode: " + httpResponse.getStatusLine().getStatusCode());
					response.getWriter().println("error response: " + errorResponse);
				}
				jsonObj.addProperty("ErrorCode", statusCode);
				jsonObj.addProperty("Message", errorResponse);
				jsonObj.addProperty("Status", "000002");
			}
		}catch (RuntimeException e) {
			httpPost.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage", e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		} /* catch (NamingException e) {
			// TODO Auto-generated catch block
			httpPost.abort();
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			
			if(debug)
			response.getWriter().println("executeHttpPost.NamingException:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage",e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		}  */catch (Exception e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
			httpPost.abort();
			
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			if(e.getLocalizedMessage()!=null){
				jsonObj.addProperty("ExceptionMessage",e.getLocalizedMessage());
			}
			jsonObj.addProperty("ErrorCode", "J002");
			jsonObj.addProperty("Message", buffer.toString());
			jsonObj.addProperty("Status", "000002");
		}
		return jsonObj;
	}

	public void getUserInfo(HttpServletRequest request, HttpServletResponse response) throws IOException{

		try{
			response.getWriter().println("request.getUserPrincipal(): "+request.getUserPrincipal());
			XSUserInfo userInfo = (XSUserInfo) request.getUserPrincipal();
			response.getWriter().println("userInfo: "+userInfo);
			String[] roleCollections = userInfo.getSystemAttribute("xs.rolecollections");
			response.getWriter().println("roleCollections: "+roleCollections);
			String[] samlGroups = userInfo.getSystemAttribute("xs.saml.groups");
			response.getWriter().println("samlGroups: "+samlGroups);
		}catch(Exception e){
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
		}
	}

	public JsonObject executeUpdate(String executeURL, String username,String password, HttpServletResponse response, JSONObject updatePayLoad, 
			HttpServletRequest request, boolean debug) throws IOException{
		HttpPost httpPost = null;
		CloseableHttpClient httpClient = null;
		HttpEntity requestEntity = null;
		HttpEntity responseEntity = null;
		String  authParam="";
		JsonObject jsonObj = new JsonObject();
		try{
			if(debug){
				response.getWriter().println("executeUpdate-updatePayLoad: "+updatePayLoad);
			}
			Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			}
			
			requestEntity = new StringEntity(updatePayLoad.toString());
			authParam = username + ":"+ password ;
			String basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
			
			if(debug){
				response.getWriter().println("executeHttpPost.executeURL: "+ executeURL);
		        response.getWriter().println("executeHttpPost.userName: "+ username);
		        response.getWriter().println("executeHttpPost.password: "+ password);
		        response.getWriter().println("executeHttpPost.authParam: "+ authParam);
		        response.getWriter().println("executeHttpPost.basicAuth: "+ basicAuth);
			}
			
	        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
	        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);
	        credentialsProvider.setCredentials(AuthScope.ANY, credentials);
	        
	        httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(credentialsProvider).build();
	        HttpPut updateRequest = new HttpPut(executeURL);
	        updateRequest.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        updateRequest.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        updateRequest.setHeader("Content-Type", "application/json");
	        updateRequest.setHeader("Accept", "application/json");
	        updateRequest.setHeader("X-HTTP-Method", "PATCH");
	        updateRequest.setEntity(requestEntity);			
			HttpResponse httpResponse = httpClient.execute(updateRequest);
			responseEntity = httpResponse.getEntity();
			
			if(debug){
				response.getWriter().println("executeUpdate.getStatusCode: "+httpResponse.getStatusLine().getStatusCode());
			}
			jsonObj.addProperty("ErrorCode", "");
			jsonObj.addProperty("ErrorMessage", "");
		}catch (RuntimeException e) {
			response.getWriter().println("Error at updating data: " +  e.getMessage());
			response.getWriter().println("Error at updating data xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.RuntimeException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.NamingException:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
			httpPost.abort();
			response.getWriter().println("Error at posting xml: " +  e.getMessage());
			response.getWriter().println("Error at posting xmlgetLocalizedMessage: " +  e.getLocalizedMessage());
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
			
			jsonObj.addProperty("ErrorCode", "001");
			jsonObj.addProperty("ErrorMessage", buffer.toString());
		}finally{
			httpClient.close();
		}
		return jsonObj;
	}

	public JsonObject getPgConfigRecords(HttpServletRequest request, HttpServletResponse response, String PGID,String pgCatId) throws IOException, URISyntaxException{
		String configurableValues="", basicAuth="", authMethod="", destURL="", userName="", password="", authParam="", constantValuesService="", constantValuesFilter="";
		byte[] encodedByte = null;
		CommonUtils commonUtils = new CommonUtils();
		AuthenticationHeader principalPropagationHeader = null;
		boolean debug = false;
		HttpGet configValuesGet = null;
		HttpEntity configValuesEntity = null;
		// CloseableHttpClient closableHttpClient = null;
		JsonObject resObj=new JsonObject();
		try
		{
			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				debug = true;
			
			/* Context tenCtx = new InitialContext();
			TenantContext tenantContext = (TenantContext) tenCtx.lookup("java:comp/env/TenantContext");
			if(debug){
				response.getWriter().println("getTenant.getId: "+tenantContext.getTenant().getAccount().getId());
				response.getWriter().println("getTenant.getCustomerId: "+tenantContext.getTenant().getAccount().getCustomerId());
				response.getWriter().println("getTenant.getName: "+tenantContext.getTenant().getAccount().getName());
			} */
			
			// Context ctx = new InitialContext();
			// ConnectivityConfiguration configuration = (ConnectivityConfiguration) ctx.lookup("java:comp/env/connectivityConfiguration");
			// DestinationConfiguration destConfiguration = configuration.getConfiguration(DestinationUtils.PCGW_UTILS_OP);
			DestinationOptions options = DestinationOptions.builder().augmentBuilder(ScpCfDestinationOptionsAugmenter
					.augmenter().tokenExchangeStrategy(ScpCfDestinationTokenExchangeStrategy.LOOKUP_ONLY)).build();
			Try<Destination> destinationAccessor = DestinationAccessor.getLoader()
					.tryGetDestination(DestinationUtils.PCGW_UTILS_OP, options);
			Destination destConfiguration = destinationAccessor.get();

			HttpDestination httpDestConfiguration = destinationAccessor.get().asHttp();
			HttpClient client = HttpClientAccessor.getHttpClient(httpDestConfiguration);

			if (destConfiguration == null) {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						 String.format("Destination %s is not found. Hint:"
								 + " Make sure to have the destination configured.", DestinationUtils.PCGW_UTILS_OP));
				 
				 return resObj;
	        }
			
			authMethod = destConfiguration.get("Authentication").get().toString();
			destURL = destConfiguration.get("URL").get().toString();
			if(authMethod.equalsIgnoreCase("BasicAuthentication")){
				userName = destConfiguration.get("User").get().toString();
				password = destConfiguration.get("Password").get().toString();
				authParam = userName + ":"+ password ;
				encodedByte = Base64.getEncoder().encode(authParam.getBytes());
				String encodedStr = new String(encodedByte);
				// basicAuth = "Basic " + Base64.getEncoder().encodeToString(authParam.getBytes());
				basicAuth = "Bearer " + authParam;
			}else{
				principalPropagationHeader = commonUtils.getPrincipalPropagationAuthHdr(response, debug);
			}
			
			String sapclient = destConfiguration.get("sap-client").get().toString();

			constantValuesService = "/sap/opu/odata/ARTEC/PCGW/PGPaymentConfigs";
			constantValuesFilter = "";
			
			constantValuesFilter = constantValuesFilter+"PGID eq '"+PGID+"' and PGCategoryID eq '"+pgCatId+"'";
			if(debug)
				response.getWriter().println("constantValuesFilter: "+constantValuesFilter);
			
			constantValuesFilter = URLEncoder.encode(constantValuesFilter, "UTF-8");
			if(sapclient != null)
			{
				constantValuesService =  destURL+constantValuesService+"?sap-client="+ sapclient +"&$filter="+constantValuesFilter;
			}
			else
			{
				constantValuesService =  destURL+constantValuesService+"?$filter="+constantValuesFilter;
			}

			if (debug){
				response.getWriter().println("pgPaymentConfigs.constantValuesService: "+constantValuesService);
				response.getWriter().println("pgPaymentConfigs.destURL: "+destURL);
				response.getWriter().println("User Name: "+userName);
				response.getWriter().println("Password : "+password);
			}
			
			/* String proxyType = destConfiguration.getProperty("ProxyType");
			if(debug)
				response.getWriter().println("pgPaymentConfigs.proxyType: "+proxyType);
			String proxyHost = System.getenv("HC_OP_HTTP_PROXY_HOST");
		    int proxyPort = Integer.parseInt(System.getenv("HC_OP_HTTP_PROXY_PORT"));
		    if(debug){
			    response.getWriter().println("pgPaymentConfigs.proxyHost: "+proxyHost);
			    response.getWriter().println("pgPaymentConfigs.proxyPort: "+proxyPort);
		    }
		    
		    HttpHost proxy = new HttpHost(proxyHost, proxyPort, "http");
	        DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);
	        
	        closableHttpClient = HttpClientBuilder.create().setRoutePlanner(routePlanner).build(); */
	        configValuesGet = new HttpGet(constantValuesService);
	        // configValuesGet.setHeader("SAP-Connectivity-ConsumerAccount", tenantContext.getTenant().getAccount().getId());
	        configValuesGet.setHeader("content-type", "text/xml; charset=UTF-8");
	        configValuesGet.setHeader("Accept", "application/json");
	        if(authMethod.equalsIgnoreCase("BasicAuthentication")){
	        	configValuesGet.setHeader(HttpHeaders.AUTHORIZATION, basicAuth);
	        }else{
	        	configValuesGet.setHeader(principalPropagationHeader.getName(), principalPropagationHeader.getValue());
	        }
	        
	        // HttpResponse httpResponse = closableHttpClient.execute(configValuesGet);
			HttpResponse httpResponse = client.execute(configValuesGet);
	        int statusCode = httpResponse.getStatusLine().getStatusCode();
	        if(debug){
		        
				response.getWriter().println("pgPaymentConfigs.statusCode: "+statusCode);
	        }
	        String retSrc = EntityUtils.toString(configValuesEntity);
			if (statusCode == 200) {
				configValuesEntity = httpResponse.getEntity();
				if (debug) {
					response.getWriter().println("configValuesEntity:" + configValuesEntity);
				}
				if (debug)
					response.getWriter().println("retSrc: " + retSrc);
				JsonParser parser = new JsonParser();
				JsonObject configObj = (JsonObject) parser.parse(retSrc);
				if(configObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size()>0){
					resObj.add("Message", configObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject());
					resObj.addProperty("Status", "000001");
					resObj.addProperty("ErrorCode", "");
				}else{
					resObj.addProperty("Message", "Records not exist in the PGPaymentConfigs Table for the PGID:B2BIZ and PGCatId:"+pgCatId);
					resObj.addProperty("Status", "000002");
					resObj.addProperty("ErrorCode", "J002");
					
				}
				return resObj;
			}else{
				resObj.addProperty("Message", "Fetching Records from PGPaymentConfigs Table Failed: "+retSrc);
				resObj.addProperty("Status", "000002");
				resObj.addProperty("ErrorCode", "J002");
				return resObj;
			}
		}
		catch (Exception e){
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for (int i = 0; i < stackTrace.length; i++) {
				buffer.append(stackTrace[i]);
			}
			String localizedMessage = e.getLocalizedMessage();
			if (localizedMessage != null) {
				resObj.addProperty("Message", localizedMessage);
			} else {
				resObj.addProperty("Message", "Fetching Records from PGPaymentConfigs Table Failed:");
			}
			resObj.addProperty("ExceptionMessage", buffer.toString());
			resObj.addProperty("Status", "000002");
			resObj.addProperty("ErrorCode", "J002");
			return resObj;
		}
		/* finally
		{
			closableHttpClient.close();
		} */
	
	}

	public JsonObject decodeJWTBody(HttpServletRequest request, HttpServletResponse response, String authTokenHeader, boolean debug) throws IOException, URISyntaxException{
		JsonObject jwtBody = new JsonObject();

		try{
			String[] chunks = authTokenHeader.split("\\.");
			Base64.Decoder decoder = Base64.getUrlDecoder();
			String header = new String(decoder.decode(chunks[0]));
			String payload = new String(decoder.decode(chunks[1]));

			JsonParser jsonParser = new JsonParser();
		    jwtBody = (JsonObject)jsonParser.parse(payload.toString());
		}catch(Exception e){
			StackTraceElement element[] = e.getStackTrace();
			StringBuffer buffer = new StringBuffer();
			for(int i=0;i<element.length;i++)
			{
				buffer.append(element[i]);
			}
			if(debug)
				response.getWriter().println("executeHttpPost.Exception:"+buffer.toString());
				
			jwtBody.addProperty("ExceptionMessage","Exception: "+buffer.toString());
			jwtBody.addProperty("ErrorCode", "J002");
			jwtBody.addProperty("Message", "Exception: "+e.getClass()+"|"+e.getMessage()+"|"+e.getCause());
			jwtBody.addProperty("Status", "000002");
		}
		return jwtBody;
	}

	public String getAuthorization(HttpServletRequest request) throws IOException{
		String authTokenHeader="";
		try{
			authTokenHeader = request.getHeader("authorization");
			if(authTokenHeader == null || authTokenHeader.trim().length() == 0){
				authTokenHeader = request.getHeader("Authorization");
			}
		}catch(Exception e){
			writeExceptionLogs(e, "getAuthToken");
			authTokenHeader="";
		}

		return authTokenHeader;
	}

	public void writeExceptionLogs(Exception e, String method){
		String writeMsg="";
		StackTraceElement element[] = e.getStackTrace();
		StringBuffer buffer = new StringBuffer();
		for(int i=0;i<element.length;i++)
		{
			buffer.append(element[i]);
		}
		
		writeMsg = "Exception: "+e.getClass()+"|"+e.getMessage()+"|"+e.getCause();

		System.out.println("Exception in: "+method+" method. Reason: "+writeMsg);
		System.out.println("Exception in: "+method+" method. Full trace: "+buffer.toString());
	}

	public boolean readUserPrincipal(HttpServletRequest request, HttpServletResponse response)
	{
		boolean isGroupAvailable=false;
		String authTokenHeader="", authMtd="", authValue="";
		String jwtSplit[] = null;
		JsonObject jwtBody = new JsonObject();
		System.out.println( "inside readUserPrincipal for getCurrentToken:" +AuthTokenAccessor.getCurrentToken().getJwt());
		// System.out.println( "inside readUserPrincipal for getXsuaaServiceToken:" +AuthTokenAccessor.getXsuaaServiceToken().getJwt());
		System.out.println("inside readUserPrincipal for getCurrentPrincipal:"+PrincipalAccessor.getCurrentPrincipal());
		CommonUtils commonUtils = new CommonUtils();
		boolean debug= false;
		try
		{
			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				debug = true;

			authTokenHeader = commonUtils.getAuthorization(request);
			if(debug)
				response.getWriter().println("readUserPrincipal.authTokenHeader: "+authTokenHeader);

			jwtSplit = authTokenHeader.split("\\s+");
		
			if(jwtSplit.length == 2){
				authMtd = jwtSplit[0];
				authValue = jwtSplit[1];
			}
			if(debug)
				response.getWriter().println("readUserPrincipal.authValue: "+authValue);

			jwtBody = commonUtils.decodeJWTBody(request, response, authValue, debug);
			if(debug)
				response.getWriter().println("readUserPrincipal.jwtBody: "+jwtBody);

			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
			{
				response.getWriter().println("Inside readUserPrincipal");
			}
				
			JsonArray samlGroupsArray = jwtBody.get("xs.system.attributes").getAsJsonObject().get("xs.saml.groups").getAsJsonArray();
			List<String> samlGroupList = new ArrayList<String>();
			for(int i=0 ; i<samlGroupsArray.size(); i++){
				samlGroupList.add(samlGroupsArray.get(i).getAsString());
			}

			String[] samlStrArray = samlGroupList.toArray(new String[samlGroupList.size()]);
			for(String groupName : samlStrArray){
				if(debug)
					response.getWriter().println("readUserPrincipal.available saml groups: "+groupName);
				if(groupName.equalsIgnoreCase("PY_ESCROW_SUPERUSER"))
				{
					isGroupAvailable = true;
					break;
				}
			}

			if(null != request.getParameter("debug") && request.getParameter("debug").equalsIgnoreCase("true"))
				response.getWriter().println("isGroupAvailable: "+isGroupAvailable);
		}
		catch (Exception e) {
			// TODO: handle exception
		}
		finally
		{
			return isGroupAvailable;
		}
	}

	public boolean textMatch(HttpServletRequest request, HttpServletResponse response, String text1, String text2, boolean debug) throws IOException{
		boolean isMatching = false;
		
		try{
			text1 = text1.replaceAll("M/S", "");
			text1 = text1.replaceAll("&amp;", "and");
			text1 = text1.replaceAll("&AMP;", "and");
			text1 = text1.replaceAll("amp;", "and");
			text1 = text1.replaceAll("AMP;", "and");
			text1 = text1.replaceAll("&", "and");
			text1 = text1.replaceAll("#39;", "");
			text1 = text1.replaceAll(" ", "");
			text1 = text1.replaceAll(",", "");
			text1 = text1.replaceAll("PVT", "PRIVATE");
			text1 = text1.replaceAll("LTD", "LIMITED");
			text1 = text1.replaceAll("[^a-zA-Z0-9]", "");
			
			text2 = text2.replaceAll("M/S", "");
			text2 = text2.replaceAll("&amp;", "and");
			text2 = text2.replaceAll("&AMP;", "and");
			text2 = text2.replaceAll("amp;", "and");
			text2 = text2.replaceAll("AMP;", "and");
			text2 = text2.replaceAll("&", "and");
			text2 = text2.replaceAll("#39;", "");
			text2 = text2.replaceAll("PVT", "PRIVATE");
			text2 = text2.replaceAll("LTD", "LIMITED");
			text2 = text2.replaceAll("[^a-zA-Z0-9]", "");
			
			if(text1.equalsIgnoreCase(text2))
				isMatching = true;
			else
				isMatching = false;
			
			return isMatching;
		}catch (Exception e) {
			StackTraceElement[] stackTrace = e.getStackTrace();
			StringBuffer buffer=new StringBuffer();
			for(int i=0;i<stackTrace.length;i++){
				buffer.append(stackTrace[i]);
			}
			
			if(debug){
				response.getWriter().println("exception-configTypesetRetObj: "+buffer.toString());
			}
			return isMatching;
		}
	}

	public String updateSpecialCharacter(String inputStr) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < inputStr.length(); i++) {
			char ch = inputStr.charAt(i);
			String s = Character.toString(ch);
			int asciiValue = (int) ch;
			if ((asciiValue >= 192 && asciiValue <= 197) || (asciiValue >= 224 && asciiValue <= 229)
					|| asciiValue == 945) {
				sb.append('a');
			} else if ((asciiValue >= 384 && asciiValue <= 389) || asciiValue == 946) {
				sb.append('b');
			} else if ((asciiValue >= 390 && asciiValue <= 392) || asciiValue == 947 || asciiValue == 199) {
				sb.append('c');
			}
			else if ((asciiValue >= 270 && asciiValue <= 273) || asciiValue == 948 || asciiValue == 393
					|| asciiValue == 599 || asciiValue == 598) {
				sb.append('d');
			} else if ((asciiValue >= 232 && asciiValue <= 235) || (asciiValue >= 200 && asciiValue <= 203)
					|| asciiValue == 603) {
				sb.append('e');
			} else if ((asciiValue >= 1274 && asciiValue <= 1275) || asciiValue == 383) {
				sb.append('f');
			} else if ((asciiValue >= 284 && asciiValue <= 291)) {
				sb.append('g');
			} else if ((asciiValue >= 293 && asciiValue <= 295)) {
				sb.append('h');
			} else if ((asciiValue >= 204 && asciiValue <= 207) || (asciiValue >= 236 && asciiValue <= 239)) {
				sb.append('i');
			} else if (asciiValue == 308 || asciiValue == 309) {
				sb.append('j');
			} else if ((asciiValue >= 310 && asciiValue <= 312)) {
				sb.append('k');
			} else if ((asciiValue >= 313 && asciiValue <= 321)) {
				sb.append('l');
			} else if ((asciiValue >= 623 && asciiValue <= 625)) {
				sb.append('m');
			} else if ((asciiValue >= 325 && asciiValue <= 331) || asciiValue == 414 || asciiValue == 413
					|| asciiValue == 951) {
				sb.append('n');
			} else if ((asciiValue >= 210 && asciiValue <= 214) || (asciiValue >= 242 && asciiValue <= 246)
					|| (asciiValue >= 332 && asciiValue <= 337) || asciiValue == 248) {
				sb.append('o');
			} else if ((asciiValue == 222 || asciiValue == 254)) {
				sb.append('p');
			} else if ((asciiValue >= 340 && asciiValue <= 342) || (asciiValue == 344 || asciiValue == 345)) {
				sb.append('r');
			} else if ((asciiValue >= 346 && asciiValue <= 352)) {
				sb.append('s');
			} else if ((asciiValue >= 354 && asciiValue <= 359)) {
				sb.append('t');
			} else if ((asciiValue >= 360 && asciiValue <= 371)) {
				sb.append('u');
			} else if ((asciiValue == 372 || asciiValue == 373)) {
				sb.append('w');
			} else if ((asciiValue >= 1277 && asciiValue <= 1279)) {
				sb.append('x');
			} else if ((asciiValue >= 374 && asciiValue <= 376) || asciiValue == 221 || asciiValue == 255) {
				sb.append('y');
			} else if ((asciiValue >= 377 && asciiValue <= 382)) {
				sb.append('z');
			} else if (asciiValue == 160) {
				sb.append(" ");
			} else if (s.matches("[^a-zA-Z0-9&\\s]*")) {
				sb.append("");
			} else {
				sb.append(ch);
			}
		}
		return sb.toString();
	}

	public static JsonObject getSupplyChainPartners(HttpServletRequest request, HttpServletResponse response, String oDataURL, 
			String userPass, String aggregatorID, String customerNo, String cpTypeID, boolean debug) throws IOException{
		
		CommonUtils commonUtils = new CommonUtils();
		JsonObject returnObj = new JsonObject();
		JsonObject scpObj = new JsonObject();
		String scpType="", executeUrl="";
		try{
			if(cpTypeID.equalsIgnoreCase("01")){
        		scpType="000003";
        	}else if(cpTypeID.equalsIgnoreCase("60")){
        		scpType="000002";
        	}
			
			if(debug){
				response.getWriter().println("cpTypeID: "+cpTypeID);
				response.getWriter().println("scpType: "+scpType);
				response.getWriter().println("customerNo: "+customerNo);
				response.getWriter().println("oDataURL: "+oDataURL);
			}
			
			executeUrl = oDataURL+"SupplyChainPartners?$filter=AggregatorId%20eq%20%27"+aggregatorID+"%27%20and%20SCPGuid%20eq%20%27"+customerNo+"%27%20and%20SCPType%20eq%20%27"+scpType+"%27&$select=PANNo,PostalCode";
			scpObj = commonUtils.executeURL(executeUrl, userPass, response);
			if(debug)
				response.getWriter().println("scpObj: "+scpObj);
			
			if(scpObj.has("d") && scpObj.get("d").getAsJsonObject().get("results").getAsJsonArray().size() > 0){
				returnObj = scpObj.get("d").getAsJsonObject().get("results").getAsJsonArray().get(0).getAsJsonObject();
				returnObj.remove("__metadata");
				returnObj.addProperty("Status", "000001");
				returnObj.addProperty("Message", "Success");
				returnObj.addProperty("ErrorCode", "");
				if(debug)
					response.getWriter().println("returnObj: "+returnObj);
				
				return returnObj;
			}else{
				if(scpObj.has("d")){
					returnObj.addProperty("Status", "000002");
					returnObj.addProperty("Message", "No Records Found");
					returnObj.addProperty("ErrorCode", "000001");
					if(debug)
						response.getWriter().println("returnObj: "+returnObj);
					
					return returnObj;
				}else{
					returnObj.addProperty("Status", "000002");
					returnObj.add("Message", scpObj);
					returnObj.addProperty("ErrorCode", "000002");
					if(debug)
						response.getWriter().println("returnObj: "+returnObj);
					
					return returnObj;
				}
			}
		}catch (Exception e) {
			if(debug){
				StackTraceElement[] stackTrace = e.getStackTrace();
				StringBuffer buffer=new StringBuffer();
				for(int i=0;i<stackTrace.length;i++){
					buffer.append(stackTrace[i]);
				}
				response.getWriter().println("exception-getSupplyChainPartner: "+buffer.toString());
			}
			
			returnObj.addProperty("Status", "000002");
			returnObj.addProperty("Message", "Exception: "+e.getClass()+"|Cause: "+e.getCause()+"|Message: "+e.getMessage());
			returnObj.addProperty("ErrorCode", "000002");
			if(debug)
				response.getWriter().println("returnObj: "+returnObj);
			
			return returnObj;
		}
	}
}